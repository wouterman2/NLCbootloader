
80482201 - Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db4  08004db4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dbc  08004dbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000010  08004dd0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  08004dd0  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001137a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ac  00000000  00000000  000313af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00034a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00035668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017aa1  00000000  00000000  00036380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a28  00000000  00000000  0004de21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008449b  00000000  00000000  00063849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7ce4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e98  00000000  00000000  000e7d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000090b7  00000000  00000000  000e9bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08004c60 	.word	0x08004c60

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08004c60 	.word	0x08004c60

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000484:	b500      	push	{lr}
 8000486:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000488:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_DMA_Init+0x40>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000490:	61da      	str	r2, [r3, #28]
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	4611      	mov	r1, r2
 80004a0:	200d      	movs	r0, #13
 80004a2:	f002 fb35 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004a6:	200d      	movs	r0, #13
 80004a8:	f002 fb68 	bl	8002b7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	4611      	mov	r1, r2
 80004b0:	2010      	movs	r0, #16
 80004b2:	f002 fb2d 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004b6:	2010      	movs	r0, #16
 80004b8:	f002 fb60 	bl	8002b7c <HAL_NVIC_EnableIRQ>

}
 80004bc:	b003      	add	sp, #12
 80004be:	f85d fb04 	ldr.w	pc, [sp], #4
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_GPIO_Init+0x2c>)
 80004cc:	69da      	ldr	r2, [r3, #28]
 80004ce:	f042 0201 	orr.w	r2, r2, #1
 80004d2:	61da      	str	r2, [r3, #28]
 80004d4:	69da      	ldr	r2, [r3, #28]
 80004d6:	f002 0201 	and.w	r2, r2, #1
 80004da:	9200      	str	r2, [sp, #0]
 80004dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	69da      	ldr	r2, [r3, #28]
 80004e0:	f042 0202 	orr.w	r2, r2, #2
 80004e4:	61da      	str	r2, [r3, #28]
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	f003 0302 	and.w	r3, r3, #2
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	9b01      	ldr	r3, [sp, #4]

}
 80004f0:	b002      	add	sp, #8
 80004f2:	4770      	bx	lr
 80004f4:	40023800 	.word	0x40023800

080004f8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80004f8:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <MX_IWDG_Init+0x20>)
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <MX_IWDG_Init+0x24>)
 80004fe:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000500:	2306      	movs	r3, #6
 8000502:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 1250;
 8000504:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000508:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800050a:	f003 f84f 	bl	80035ac <HAL_IWDG_Init>
 800050e:	b900      	cbnz	r0, 8000512 <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000510:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000512:	f000 f875 	bl	8000600 <Error_Handler>
}
 8000516:	e7fb      	b.n	8000510 <MX_IWDG_Init+0x18>
 8000518:	2000002c 	.word	0x2000002c
 800051c:	40003000 	.word	0x40003000

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b500      	push	{lr}
 8000522:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000524:	2234      	movs	r2, #52	; 0x34
 8000526:	2100      	movs	r1, #0
 8000528:	a805      	add	r0, sp, #20
 800052a:	f004 fb91 	bl	8004c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	2300      	movs	r3, #0
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	9302      	str	r3, [sp, #8]
 8000536:	9303      	str	r3, [sp, #12]
 8000538:	9304      	str	r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053a:	4917      	ldr	r1, [pc, #92]	; (8000598 <SystemClock_Config+0x78>)
 800053c:	680a      	ldr	r2, [r1, #0]
 800053e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8000542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000546:	600a      	str	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000548:	220a      	movs	r2, #10
 800054a:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	2201      	movs	r2, #1
 800054e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	2110      	movs	r1, #16
 8000552:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000554:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2202      	movs	r2, #2
 8000558:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800055c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000560:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	a805      	add	r0, sp, #20
 800056a:	f003 f905 	bl	8003778 <HAL_RCC_OscConfig>
 800056e:	b978      	cbnz	r0, 8000590 <SystemClock_Config+0x70>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2303      	movs	r3, #3
 8000576:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000580:	2101      	movs	r1, #1
 8000582:	4668      	mov	r0, sp
 8000584:	f003 fbd2 	bl	8003d2c <HAL_RCC_ClockConfig>
 8000588:	b920      	cbnz	r0, 8000594 <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
}
 800058a:	b013      	add	sp, #76	; 0x4c
 800058c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000592:	e7fe      	b.n	8000592 <SystemClock_Config+0x72>
 8000594:	b672      	cpsid	i
 8000596:	e7fe      	b.n	8000596 <SystemClock_Config+0x76>
 8000598:	40007000 	.word	0x40007000

0800059c <main>:
{
 800059c:	b508      	push	{r3, lr}
  Initialized = 0;
 800059e:	4c15      	ldr	r4, [pc, #84]	; (80005f4 <main+0x58>)
 80005a0:	2300      	movs	r3, #0
 80005a2:	7023      	strb	r3, [r4, #0]
  HAL_Init();
 80005a4:	f002 fa6c 	bl	8002a80 <HAL_Init>
  SystemClock_Config();
 80005a8:	f7ff ffba 	bl	8000520 <SystemClock_Config>
  MX_GPIO_Init();
 80005ac:	f7ff ff8c 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f7ff ff68 	bl	8000484 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f932 	bl	800081c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f916 	bl	80007e8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005bc:	f000 f822 	bl	8000604 <MX_SPI1_Init>
  MX_IWDG_Init();
 80005c0:	f7ff ff9a 	bl	80004f8 <MX_IWDG_Init>
  SER_Init();
 80005c4:	f001 fda0 	bl	8002108 <SER_Init>
  FLA_Init();
 80005c8:	f000 fffe 	bl	80015c8 <FLA_Init>
  LED_Init();
 80005cc:	f001 f9d2 	bl	8001974 <LED_Init>
  Initialized = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	7023      	strb	r3, [r4, #0]
  WRK_Handle();
 80005d4:	f000 fd46 	bl	8001064 <WRK_Handle>
	  HAL_IWDG_Refresh(&hiwdg);
 80005d8:	4d07      	ldr	r5, [pc, #28]	; (80005f8 <main+0x5c>)
	  if (Flg1ms == 1)
 80005da:	4c08      	ldr	r4, [pc, #32]	; (80005fc <main+0x60>)
	  		Flg1ms = 0;
 80005dc:	2600      	movs	r6, #0
	  HAL_IWDG_Refresh(&hiwdg);
 80005de:	4628      	mov	r0, r5
 80005e0:	f003 f815 	bl	800360e <HAL_IWDG_Refresh>
	  if (Flg1ms == 1)
 80005e4:	7823      	ldrb	r3, [r4, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1f8      	bne.n	80005de <main+0x42>
	  		Flg1ms = 0;
 80005ec:	7026      	strb	r6, [r4, #0]
	  		WRK_HandleTickTime();
 80005ee:	f000 f9d1 	bl	8000994 <WRK_HandleTickTime>
 80005f2:	e7f4      	b.n	80005de <main+0x42>
 80005f4:	200001a5 	.word	0x200001a5
 80005f8:	2000002c 	.word	0x2000002c
 80005fc:	200001a4 	.word	0x200001a4

08000600 <Error_Handler>:
 8000600:	b672      	cpsid	i
  while (1)
 8000602:	e7fe      	b.n	8000602 <Error_Handler+0x2>

08000604 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000604:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <MX_SPI1_Init+0x3c>)
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_SPI1_Init+0x40>)
 800060a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000610:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000612:	2300      	movs	r3, #0
 8000614:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000616:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000618:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800061a:	2201      	movs	r2, #1
 800061c:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800061e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000622:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000624:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000626:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000628:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800062a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800062c:	230a      	movs	r3, #10
 800062e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000630:	f003 fd24 	bl	800407c <HAL_SPI_Init>
 8000634:	b900      	cbnz	r0, 8000638 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000636:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000638:	f7ff ffe2 	bl	8000600 <Error_Handler>
}
 800063c:	e7fb      	b.n	8000636 <MX_SPI1_Init+0x32>
 800063e:	bf00      	nop
 8000640:	2000003c 	.word	0x2000003c
 8000644:	40013000 	.word	0x40013000

08000648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	2300      	movs	r3, #0
 800064e:	9303      	str	r3, [sp, #12]
 8000650:	9304      	str	r3, [sp, #16]
 8000652:	9305      	str	r3, [sp, #20]
 8000654:	9306      	str	r3, [sp, #24]
 8000656:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8000658:	6802      	ldr	r2, [r0, #0]
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <HAL_SPI_MspInit+0x98>)
 800065c:	429a      	cmp	r2, r3
 800065e:	d001      	beq.n	8000664 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000660:	b008      	add	sp, #32
 8000662:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000664:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000668:	6a1a      	ldr	r2, [r3, #32]
 800066a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800066e:	621a      	str	r2, [r3, #32]
 8000670:	6a1a      	ldr	r2, [r3, #32]
 8000672:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000676:	9200      	str	r2, [sp, #0]
 8000678:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	f042 0201 	orr.w	r2, r2, #1
 8000680:	61da      	str	r2, [r3, #28]
 8000682:	69da      	ldr	r2, [r3, #28]
 8000684:	f002 0201 	and.w	r2, r2, #1
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	f042 0202 	orr.w	r2, r2, #2
 8000692:	61da      	str	r2, [r3, #28]
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LED_Pin;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2402      	movs	r4, #2
 80006a6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2603      	movs	r6, #3
 80006aa:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ac:	2505      	movs	r5, #5
 80006ae:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006b0:	a903      	add	r1, sp, #12
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <HAL_SPI_MspInit+0x9c>)
 80006b4:	f002 fe10 	bl	80032d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b8:	2308      	movs	r3, #8
 80006ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2400      	movs	r4, #0
 80006c0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006c4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	a903      	add	r1, sp, #12
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <HAL_SPI_MspInit+0xa0>)
 80006ca:	f002 fe05 	bl	80032d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80006ce:	4622      	mov	r2, r4
 80006d0:	4621      	mov	r1, r4
 80006d2:	2023      	movs	r0, #35	; 0x23
 80006d4:	f002 fa1c 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006d8:	2023      	movs	r0, #35	; 0x23
 80006da:	f002 fa4f 	bl	8002b7c <HAL_NVIC_EnableIRQ>
}
 80006de:	e7bf      	b.n	8000660 <HAL_SPI_MspInit+0x18>
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020400 	.word	0x40020400

080006ec <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80006ec:	b508      	push	{r3, lr}

  if(spiHandle->Instance==SPI1)
 80006ee:	6802      	ldr	r2, [r0, #0]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_SPI_MspDeInit+0x30>)
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d000      	beq.n	80006f8 <HAL_SPI_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80006f6:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI1_CLK_DISABLE();
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <HAL_SPI_MspDeInit+0x34>)
 80006fa:	6a13      	ldr	r3, [r2, #32]
 80006fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000700:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <HAL_SPI_MspDeInit+0x38>)
 8000708:	f002 feca 	bl	80034a0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800070c:	2108      	movs	r1, #8
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <HAL_SPI_MspDeInit+0x3c>)
 8000710:	f002 fec6 	bl	80034a0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000714:	2023      	movs	r0, #35	; 0x23
 8000716:	f002 fa3f 	bl	8002b98 <HAL_NVIC_DisableIRQ>
}
 800071a:	e7ec      	b.n	80006f6 <HAL_SPI_MspDeInit+0xa>
 800071c:	40013000 	.word	0x40013000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	40020400 	.word	0x40020400

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b084      	sub	sp, #16
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x40>)
 8000730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000732:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
 8000738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800073a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	6a1a      	ldr	r2, [r3, #32]
 8000744:	f042 0201 	orr.w	r2, r2, #1
 8000748:	621a      	str	r2, [r3, #32]
 800074a:	6a1a      	ldr	r2, [r3, #32]
 800074c:	f002 0201 	and.w	r2, r2, #1
 8000750:	9202      	str	r2, [sp, #8]
 8000752:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	9303      	str	r3, [sp, #12]
 8000764:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler>

08000772 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler>

08000774 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler>

08000776 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler>

08000778 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler>

0800077a <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077a:	4770      	bx	lr

0800077c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Flg1ms = 1;
 8000782:	4b03      	ldr	r3, [pc, #12]	; (8000790 <SysTick_Handler+0x10>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f002 f98a 	bl	8002aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bd08      	pop	{r3, pc}
 800078e:	bf00      	nop
 8000790:	200001a4 	.word	0x200001a4

08000794 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <DMA1_Channel3_IRQHandler+0xc>)
 8000798:	f002 fb23 	bl	8002de2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800079c:	bd08      	pop	{r3, pc}
 800079e:	bf00      	nop
 80007a0:	200000d8 	.word	0x200000d8

080007a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <DMA1_Channel6_IRQHandler+0xc>)
 80007a8:	f002 fb1b 	bl	8002de2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007ac:	bd08      	pop	{r3, pc}
 80007ae:	bf00      	nop
 80007b0:	20000094 	.word	0x20000094

080007b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80007b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <SPI1_IRQHandler+0xc>)
 80007b8:	f003 fd84 	bl	80042c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80007bc:	bd08      	pop	{r3, pc}
 80007be:	bf00      	nop
 80007c0:	2000003c 	.word	0x2000003c

080007c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c6:	4802      	ldr	r0, [pc, #8]	; (80007d0 <USART2_IRQHandler+0xc>)
 80007c8:	f004 f84a 	bl	8004860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007cc:	bd08      	pop	{r3, pc}
 80007ce:	bf00      	nop
 80007d0:	2000011c 	.word	0x2000011c

080007d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80007d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007d6:	4802      	ldr	r0, [pc, #8]	; (80007e0 <USART3_IRQHandler+0xc>)
 80007d8:	f004 f842 	bl	8004860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80007dc:	bd08      	pop	{r3, pc}
 80007de:	bf00      	nop
 80007e0:	20000160 	.word	0x20000160

080007e4 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	4770      	bx	lr
	...

080007e8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007e8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <MX_USART2_UART_Init+0x2c>)
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_USART2_UART_Init+0x30>)
 80007ee:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80007f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007f4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	2300      	movs	r3, #0
 80007f8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fe:	220c      	movs	r2, #12
 8000800:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	f003 feb3 	bl	8004570 <HAL_UART_Init>
 800080a:	b900      	cbnz	r0, 800080e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800080e:	f7ff fef7 	bl	8000600 <Error_Handler>
}
 8000812:	e7fb      	b.n	800080c <MX_USART2_UART_Init+0x24>
 8000814:	2000011c 	.word	0x2000011c
 8000818:	40004400 	.word	0x40004400

0800081c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800081c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <MX_USART3_UART_Init+0x2c>)
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_USART3_UART_Init+0x30>)
 8000822:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000824:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000828:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	2300      	movs	r3, #0
 800082c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800082e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000830:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000832:	220c      	movs	r2, #12
 8000834:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083a:	f003 fe99 	bl	8004570 <HAL_UART_Init>
 800083e:	b900      	cbnz	r0, 8000842 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000840:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000842:	f7ff fedd 	bl	8000600 <Error_Handler>
}
 8000846:	e7fb      	b.n	8000840 <MX_USART3_UART_Init+0x24>
 8000848:	20000160 	.word	0x20000160
 800084c:	40004800 	.word	0x40004800

08000850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000850:	b510      	push	{r4, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	2300      	movs	r3, #0
 8000858:	9305      	str	r3, [sp, #20]
 800085a:	9306      	str	r3, [sp, #24]
 800085c:	9307      	str	r3, [sp, #28]
 800085e:	9308      	str	r3, [sp, #32]
 8000860:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART2)
 8000862:	6803      	ldr	r3, [r0, #0]
 8000864:	4a42      	ldr	r2, [pc, #264]	; (8000970 <HAL_UART_MspInit+0x120>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d004      	beq.n	8000874 <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800086a:	4a42      	ldr	r2, [pc, #264]	; (8000974 <HAL_UART_MspInit+0x124>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d03f      	beq.n	80008f0 <HAL_UART_MspInit+0xa0>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000870:	b00a      	add	sp, #40	; 0x28
 8000872:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <HAL_UART_MspInit+0x128>)
 8000876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000878:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
 800087e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000880:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	69da      	ldr	r2, [r3, #28]
 800088a:	f042 0201 	orr.w	r2, r2, #1
 800088e:	61da      	str	r2, [r3, #28]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	9302      	str	r3, [sp, #8]
 8000898:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a6:	2307      	movs	r3, #7
 80008a8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	a905      	add	r1, sp, #20
 80008ac:	4833      	ldr	r0, [pc, #204]	; (800097c <HAL_UART_MspInit+0x12c>)
 80008ae:	f002 fd13 	bl	80032d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008b2:	4833      	ldr	r0, [pc, #204]	; (8000980 <HAL_UART_MspInit+0x130>)
 80008b4:	4b33      	ldr	r3, [pc, #204]	; (8000984 <HAL_UART_MspInit+0x134>)
 80008b6:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	2300      	movs	r3, #0
 80008ba:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008bc:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	60c2      	str	r2, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c2:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c4:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80008c6:	2220      	movs	r2, #32
 80008c8:	6182      	str	r2, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ca:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008cc:	f002 f99e 	bl	8002c0c <HAL_DMA_Init>
 80008d0:	b958      	cbnz	r0, 80008ea <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80008d2:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <HAL_UART_MspInit+0x130>)
 80008d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80008d6:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	4611      	mov	r1, r2
 80008dc:	2026      	movs	r0, #38	; 0x26
 80008de:	f002 f917 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e2:	2026      	movs	r0, #38	; 0x26
 80008e4:	f002 f94a 	bl	8002b7c <HAL_NVIC_EnableIRQ>
 80008e8:	e7c2      	b.n	8000870 <HAL_UART_MspInit+0x20>
      Error_Handler();
 80008ea:	f7ff fe89 	bl	8000600 <Error_Handler>
 80008ee:	e7f0      	b.n	80008d2 <HAL_UART_MspInit+0x82>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_UART_MspInit+0x128>)
 80008f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
 80008fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008fc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000900:	9203      	str	r2, [sp, #12]
 8000902:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	69da      	ldr	r2, [r3, #28]
 8000906:	f042 0202 	orr.w	r2, r2, #2
 800090a:	61da      	str	r2, [r3, #28]
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	9304      	str	r3, [sp, #16]
 8000914:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000916:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800091a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000924:	2307      	movs	r3, #7
 8000926:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	a905      	add	r1, sp, #20
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <HAL_UART_MspInit+0x138>)
 800092c:	f002 fcd4 	bl	80032d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000930:	4816      	ldr	r0, [pc, #88]	; (800098c <HAL_UART_MspInit+0x13c>)
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_UART_MspInit+0x140>)
 8000934:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	2300      	movs	r3, #0
 8000938:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093a:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	60c2      	str	r2, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000940:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000942:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000944:	2220      	movs	r2, #32
 8000946:	6182      	str	r2, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000948:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800094a:	f002 f95f 	bl	8002c0c <HAL_DMA_Init>
 800094e:	b958      	cbnz	r0, 8000968 <HAL_UART_MspInit+0x118>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_UART_MspInit+0x13c>)
 8000952:	63a3      	str	r3, [r4, #56]	; 0x38
 8000954:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	4611      	mov	r1, r2
 800095a:	2027      	movs	r0, #39	; 0x27
 800095c:	f002 f8d8 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000960:	2027      	movs	r0, #39	; 0x27
 8000962:	f002 f90b 	bl	8002b7c <HAL_NVIC_EnableIRQ>
}
 8000966:	e783      	b.n	8000870 <HAL_UART_MspInit+0x20>
      Error_Handler();
 8000968:	f7ff fe4a 	bl	8000600 <Error_Handler>
 800096c:	e7f0      	b.n	8000950 <HAL_UART_MspInit+0x100>
 800096e:	bf00      	nop
 8000970:	40004400 	.word	0x40004400
 8000974:	40004800 	.word	0x40004800
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	20000094 	.word	0x20000094
 8000984:	4002606c 	.word	0x4002606c
 8000988:	40020400 	.word	0x40020400
 800098c:	200000d8 	.word	0x200000d8
 8000990:	40026030 	.word	0x40026030

08000994 <WRK_HandleTickTime>:
//-----------------------------------------------------------------------------
//! \brief      Handles the tick time counter
//! \details    Handles 1 ms time interrupt
//! \param      None
void WRK_HandleTickTime (void)
{
 8000994:	b508      	push	{r3, lr}
	if (!Initialized) return;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <WRK_HandleTickTime+0x1c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b903      	cbnz	r3, 800099e <WRK_HandleTickTime+0xa>
	HAL_IWDG_Refresh(&hiwdg);
	SER_Handle();
	LED_Handle();
}
 800099c:	bd08      	pop	{r3, pc}
	HAL_IWDG_Refresh(&hiwdg);
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <WRK_HandleTickTime+0x20>)
 80009a0:	f002 fe35 	bl	800360e <HAL_IWDG_Refresh>
	SER_Handle();
 80009a4:	f001 fea0 	bl	80026e8 <SER_Handle>
	LED_Handle();
 80009a8:	f001 f81a 	bl	80019e0 <LED_Handle>
 80009ac:	e7f6      	b.n	800099c <WRK_HandleTickTime+0x8>
 80009ae:	bf00      	nop
 80009b0:	200001a5 	.word	0x200001a5
 80009b4:	2000002c 	.word	0x2000002c

080009b8 <WRK_HandleCopyBlocks>:
//! \brief      Copies blocks of data from one address to another
//! \details    Arranges the erase of the page to write to.
//! \param[in]  uint32_t newNrOfBlocks, uint32_t newSourceAddress, uint32_t newDestinationAddress
//! \param[out] Result  1 = OK, 2 = Error
uint8_t WRK_HandleCopyBlocks (uint32_t newNrOfBlocks, uint32_t newSourceAddress, uint32_t newDestinationAddress)
{
 80009b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009bc:	460d      	mov	r5, r1
 80009be:	4617      	mov	r7, r2
	uint8_t Result = 0;
	uint8_t DataLength;
	uint32_t CurrentSourceAddress;
	uint32_t CurrentDestinationAddress;
	Progress = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	4a3b      	ldr	r2, [pc, #236]	; (8000ab0 <WRK_HandleCopyBlocks+0xf8>)
 80009c4:	8013      	strh	r3, [r2, #0]
	ProgressOld = -1;
 80009c6:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <WRK_HandleCopyBlocks+0xfc>)
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	6011      	str	r1, [r2, #0]
	for (CurrentBlock = 0; CurrentBlock < newNrOfBlocks  ;CurrentBlock++)
 80009ce:	4a3a      	ldr	r2, [pc, #232]	; (8000ab8 <WRK_HandleCopyBlocks+0x100>)
 80009d0:	8013      	strh	r3, [r2, #0]
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d06a      	beq.n	8000aac <WRK_HandleCopyBlocks+0xf4>
 80009d6:	4606      	mov	r6, r0
	{
		HAL_IWDG_Refresh(&hiwdg);
 80009d8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8000abc <WRK_HandleCopyBlocks+0x104>
		CurrentSourceAddress = newSourceAddress + (CurrentBlock * FLA_BLOCKSIZE);
 80009dc:	4614      	mov	r4, r2
			  SER_SendReturnMessage (10,MStatErasePageError);
			  CurrentBlock = 65535;
			}
		}
		//Clear the array to zero before filling the next block
		memset(ImageData, 0, sizeof(ImageData)); //Reset the buffer
 80009de:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8000ac0 <WRK_HandleCopyBlocks+0x108>
 80009e2:	e025      	b.n	8000a30 <WRK_HandleCopyBlocks+0x78>
			if (FLA_ErasePage (CurrentDestinationAddress) != HAL_OK)
 80009e4:	4650      	mov	r0, sl
 80009e6:	f000 fc75 	bl	80012d4 <FLA_ErasePage>
 80009ea:	b360      	cbz	r0, 8000a46 <WRK_HandleCopyBlocks+0x8e>
			  SER_SendReturnMessage (10,MStatErasePageError);
 80009ec:	211c      	movs	r1, #28
 80009ee:	200a      	movs	r0, #10
 80009f0:	f001 fba0 	bl	8002134 <SER_SendReturnMessage>
			  CurrentBlock = 65535;
 80009f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f8:	8023      	strh	r3, [r4, #0]
 80009fa:	e024      	b.n	8000a46 <WRK_HandleCopyBlocks+0x8e>
		//Write the block to the destinationaddress
		FLA_WriteBlock (CurrentDestinationAddress);
		//Verify the written page
		if (FLA_VerifyBlock (CurrentDestinationAddress) == 0)
		{
			SER_SendReturnMessage (10,MStatVerifyError);
 80009fc:	211b      	movs	r1, #27
 80009fe:	200a      	movs	r0, #10
 8000a00:	f001 fb98 	bl	8002134 <SER_SendReturnMessage>
	for (CurrentBlock = 0; CurrentBlock < newNrOfBlocks  ;CurrentBlock++)
 8000a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a08:	8023      	strh	r3, [r4, #0]
 8000a0a:	e011      	b.n	8000a30 <WRK_HandleCopyBlocks+0x78>
			Progress = ((CurrentBlock + 1) * 100) / newNrOfBlocks;
			if (Progress != ProgressOld)
			{
				ProgressOld = Progress;
				if (newSourceAddress == FLA_MAINADDRESS) //Backup
					DataLength = SER_FillBuffer(10, MTypeGetBackupProgress);
 8000a0c:	2127      	movs	r1, #39	; 0x27
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f001 fc80 	bl	8002314 <SER_FillBuffer>
				else if (newSourceAddress == FLA_ROLLBACKADDRESS) //Restore
					DataLength = SER_FillBuffer(10, MTypeGetRestoreProgress);
				else
					DataLength = SER_FillBuffer(10, MTypeGetUpdateProgress);
				UartReturn = 2; //Select UART2
 8000a14:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <WRK_HandleCopyBlocks+0x10c>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	701a      	strb	r2, [r3, #0]
				SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 8000a1a:	300a      	adds	r0, #10
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	b2c0      	uxtb	r0, r0
 8000a20:	f001 fb88 	bl	8002134 <SER_SendReturnMessage>
	for (CurrentBlock = 0; CurrentBlock < newNrOfBlocks  ;CurrentBlock++)
 8000a24:	8820      	ldrh	r0, [r4, #0]
 8000a26:	3001      	adds	r0, #1
 8000a28:	b280      	uxth	r0, r0
 8000a2a:	8020      	strh	r0, [r4, #0]
 8000a2c:	42b0      	cmp	r0, r6
 8000a2e:	d235      	bcs.n	8000a9c <WRK_HandleCopyBlocks+0xe4>
		HAL_IWDG_Refresh(&hiwdg);
 8000a30:	4648      	mov	r0, r9
 8000a32:	f002 fdec 	bl	800360e <HAL_IWDG_Refresh>
		CurrentSourceAddress = newSourceAddress + (CurrentBlock * FLA_BLOCKSIZE);
 8000a36:	8823      	ldrh	r3, [r4, #0]
 8000a38:	eb05 1b83 	add.w	fp, r5, r3, lsl #6
		CurrentDestinationAddress = newDestinationAddress + (CurrentBlock * FLA_BLOCKSIZE);
 8000a3c:	eb07 1a83 	add.w	sl, r7, r3, lsl #6
		if (CurrentBlock % FLA_BLOCKSPERPAGE == 0)//new page
 8000a40:	f013 0f03 	tst.w	r3, #3
 8000a44:	d0ce      	beq.n	80009e4 <WRK_HandleCopyBlocks+0x2c>
		memset(ImageData, 0, sizeof(ImageData)); //Reset the buffer
 8000a46:	2240      	movs	r2, #64	; 0x40
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4640      	mov	r0, r8
 8000a4c:	f004 f900 	bl	8004c50 <memset>
		FLA_ReadBlock (CurrentSourceAddress);
 8000a50:	4658      	mov	r0, fp
 8000a52:	f000 fda5 	bl	80015a0 <FLA_ReadBlock>
		FLA_WriteBlock (CurrentDestinationAddress);
 8000a56:	4650      	mov	r0, sl
 8000a58:	f000 fc50 	bl	80012fc <FLA_WriteBlock>
		if (FLA_VerifyBlock (CurrentDestinationAddress) == 0)
 8000a5c:	4650      	mov	r0, sl
 8000a5e:	f000 fc8f 	bl	8001380 <FLA_VerifyBlock>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d0ca      	beq.n	80009fc <WRK_HandleCopyBlocks+0x44>
			Progress = ((CurrentBlock + 1) * 100) / newNrOfBlocks;
 8000a66:	8822      	ldrh	r2, [r4, #0]
 8000a68:	2364      	movs	r3, #100	; 0x64
 8000a6a:	fb02 3303 	mla	r3, r2, r3, r3
 8000a6e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <WRK_HandleCopyBlocks+0xf8>)
 8000a74:	8013      	strh	r3, [r2, #0]
			if (Progress != ProgressOld)
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <WRK_HandleCopyBlocks+0xfc>)
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d0d1      	beq.n	8000a24 <WRK_HandleCopyBlocks+0x6c>
				ProgressOld = Progress;
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <WRK_HandleCopyBlocks+0xfc>)
 8000a82:	6013      	str	r3, [r2, #0]
				if (newSourceAddress == FLA_MAINADDRESS) //Backup
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <WRK_HandleCopyBlocks+0x110>)
 8000a86:	429d      	cmp	r5, r3
 8000a88:	d0c0      	beq.n	8000a0c <WRK_HandleCopyBlocks+0x54>
				else if (newSourceAddress == FLA_ROLLBACKADDRESS) //Restore
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <WRK_HandleCopyBlocks+0x114>)
 8000a8c:	429d      	cmp	r5, r3
					DataLength = SER_FillBuffer(10, MTypeGetRestoreProgress);
 8000a8e:	bf0c      	ite	eq
 8000a90:	2128      	moveq	r1, #40	; 0x28
					DataLength = SER_FillBuffer(10, MTypeGetUpdateProgress);
 8000a92:	2124      	movne	r1, #36	; 0x24
 8000a94:	200a      	movs	r0, #10
 8000a96:	f001 fc3d 	bl	8002314 <SER_FillBuffer>
 8000a9a:	e7bb      	b.n	8000a14 <WRK_HandleCopyBlocks+0x5c>
			}
		}
	}
	Result = (CurrentBlock == 65535) + 1; //1 = OK, 2 = Error
 8000a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2002      	moveq	r0, #2
 8000aa6:	2001      	movne	r0, #1
	return Result;
}
 8000aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Result = (CurrentBlock == 65535) + 1; //1 = OK, 2 = Error
 8000aac:	2001      	movs	r0, #1
 8000aae:	e7fb      	b.n	8000aa8 <WRK_HandleCopyBlocks+0xf0>
 8000ab0:	200001a6 	.word	0x200001a6
 8000ab4:	200001a8 	.word	0x200001a8
 8000ab8:	2000003a 	.word	0x2000003a
 8000abc:	2000002c 	.word	0x2000002c
 8000ac0:	200001e0 	.word	0x200001e0
 8000ac4:	2000063d 	.word	0x2000063d
 8000ac8:	08005800 	.word	0x08005800
 8000acc:	0802c800 	.word	0x0802c800

08000ad0 <FLA_HandleCorrupt>:
//! \details    Checks if there is a VALID ROLLBACK partition. If so,
//! \details	copies ROLLBACK to APP partition, otherwise remains
//! \details	in bootloader and red light blinking.
//! \param      None
void FLA_HandleCorrupt (void)
{
 8000ad0:	b500      	push	{lr}
 8000ad2:	b089      	sub	sp, #36	; 0x24
	LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	9006      	str	r0, [sp, #24]
 8000ad8:	9005      	str	r0, [sp, #20]
 8000ada:	2305      	movs	r3, #5
 8000adc:	9304      	str	r3, [sp, #16]
 8000ade:	2364      	movs	r3, #100	; 0x64
 8000ae0:	9303      	str	r3, [sp, #12]
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	2332      	movs	r3, #50	; 0x32
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	9000      	str	r0, [sp, #0]
 8000aea:	4603      	mov	r3, r0
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	2102      	movs	r1, #2
 8000af0:	f000 fe04 	bl	80016fc <LED_Set>
}
 8000af4:	b009      	add	sp, #36	; 0x24
 8000af6:	f85d fb04 	ldr.w	pc, [sp], #4

08000afa <WRK_GetSoftwareVersion>:
//! \details    Makes 1 integer of the software version that can be sent by UART
//! \params		None
uint32_t WRK_GetSoftwareVersion (void)
{
	return (SW_VER_MAJOR << 12) + (SW_VER_MINOR << 8) + SW_VER_BUGFIX;
}
 8000afa:	f242 2003 	movw	r0, #8707	; 0x2203
 8000afe:	4770      	bx	lr

08000b00 <WRK_StartApplication>:
//-----------------------------------------------------------------------------
//! \brief      Starts the application
//! \details    Sets the stack pointer to the application partition
//! \param      None
void WRK_StartApplication(void)
{
 8000b00:	b500      	push	{lr}
 8000b02:	b089      	sub	sp, #36	; 0x24
	uint8_t DataLength;
	//Stay in bootloader if flag is set
	if (STAYINBOOTLOADER) return;
	//Stay in bootloader if no VALID app is present.
	if (FLA[pApplication].Version == 0)
 8000b04:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <WRK_StartApplication+0xd8>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	b35b      	cbz	r3, 8000b62 <WRK_StartApplication+0x62>
		DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
		SER_SendReturnMessage (DataLength + 10,MStatImageNotValid);
		return;
	}
	//Stay in bootloader if no valid image is found at APPLICATION memory address
	if (((*(__IO uint32_t*) FLA_MAINADDRESS) & 0x2FFE0000) != 0x20000000)
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <WRK_StartApplication+0xdc>)
 8000b0c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000b10:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <WRK_StartApplication+0xe0>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b18:	d041      	beq.n	8000b9e <WRK_StartApplication+0x9e>
	{
		//No valid application found, so unvalidate version and status
		FLA_SetStatus(pApplication,fUNDEFINED);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fb45 	bl	80011ac <FLA_SetStatus>
		FLA_SetVersion(pApplication,0);
 8000b22:	2100      	movs	r1, #0
 8000b24:	2001      	movs	r0, #1
 8000b26:	f000 fba9 	bl	800127c <FLA_SetVersion>
		//Inform the Linux
		DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000b2a:	2125      	movs	r1, #37	; 0x25
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f001 fbf1 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatImageNotValid);
 8000b32:	300a      	adds	r0, #10
 8000b34:	211a      	movs	r1, #26
 8000b36:	b2c0      	uxtb	r0, r0
 8000b38:	f001 fafc 	bl	8002134 <SER_SendReturnMessage>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	9006      	str	r0, [sp, #24]
 8000b40:	9005      	str	r0, [sp, #20]
 8000b42:	2305      	movs	r3, #5
 8000b44:	9304      	str	r3, [sp, #16]
 8000b46:	2364      	movs	r3, #100	; 0x64
 8000b48:	9303      	str	r3, [sp, #12]
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2332      	movs	r3, #50	; 0x32
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	9000      	str	r0, [sp, #0]
 8000b52:	4603      	mov	r3, r0
 8000b54:	22ff      	movs	r2, #255	; 0xff
 8000b56:	2102      	movs	r1, #2
 8000b58:	f000 fdd0 	bl	80016fc <LED_Set>
    //Set reset handler address
    uint32_t resethandler_address = *(__IO uint32_t *) (FLA_MAINADDRESS + 4);
    app_reset_handler = (void*) resethandler_address;
    //Jump to reset handler of the application
    app_reset_handler();
}
 8000b5c:	b009      	add	sp, #36	; 0x24
 8000b5e:	f85d fb04 	ldr.w	pc, [sp], #4
		FLA_SetStatus(pApplication,fUNDEFINED);
 8000b62:	2100      	movs	r1, #0
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fb21 	bl	80011ac <FLA_SetStatus>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	9006      	str	r0, [sp, #24]
 8000b6e:	9005      	str	r0, [sp, #20]
 8000b70:	2305      	movs	r3, #5
 8000b72:	9304      	str	r3, [sp, #16]
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	9303      	str	r3, [sp, #12]
 8000b78:	9302      	str	r3, [sp, #8]
 8000b7a:	2332      	movs	r3, #50	; 0x32
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	9000      	str	r0, [sp, #0]
 8000b80:	4603      	mov	r3, r0
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	2102      	movs	r1, #2
 8000b86:	f000 fdb9 	bl	80016fc <LED_Set>
		DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000b8a:	2125      	movs	r1, #37	; 0x25
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f001 fbc1 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatImageNotValid);
 8000b92:	300a      	adds	r0, #10
 8000b94:	211a      	movs	r1, #26
 8000b96:	b2c0      	uxtb	r0, r0
 8000b98:	f001 facc 	bl	8002134 <SER_SendReturnMessage>
		return;
 8000b9c:	e7de      	b.n	8000b5c <WRK_StartApplication+0x5c>
    HAL_RCC_DeInit();
 8000b9e:	f002 fd83 	bl	80036a8 <HAL_RCC_DeInit>
    HAL_SPI_MspDeInit(&hspi1);
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <WRK_StartApplication+0xe4>)
 8000ba4:	f7ff fda2 	bl	80006ec <HAL_SPI_MspDeInit>
    HAL_DeInit();
 8000ba8:	f001 ff30 	bl	8002a0c <HAL_DeInit>
    SysTick->CTRL = 0;
 8000bac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
    SysTick->LOAD = 0;
 8000bb4:	615a      	str	r2, [r3, #20]
    SysTick->VAL = 0;
 8000bb6:	619a      	str	r2, [r3, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbe:	b672      	cpsid	i
     SCB->VTOR = FLA_MAINADDRESS;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <WRK_StartApplication+0xe8>)
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <WRK_StartApplication+0xec>)
 8000bc4:	609a      	str	r2, [r3, #8]
    uint32_t msp_value = *(__IO uint32_t *)FLA_MAINADDRESS;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <WRK_StartApplication+0xdc>)
 8000bc8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000bcc:	f382 8808 	msr	MSP, r2
    uint32_t resethandler_address = *(__IO uint32_t *) (FLA_MAINADDRESS + 4);
 8000bd0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
    app_reset_handler();
 8000bd4:	4798      	blx	r3
 8000bd6:	e7c1      	b.n	8000b5c <WRK_StartApplication+0x5c>
 8000bd8:	200001b0 	.word	0x200001b0
 8000bdc:	08005000 	.word	0x08005000
 8000be0:	2ffe0000 	.word	0x2ffe0000
 8000be4:	2000003c 	.word	0x2000003c
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	08005800 	.word	0x08005800

08000bf0 <FLA_HandleRollBack>:
{
 8000bf0:	b500      	push	{lr}
 8000bf2:	b08d      	sub	sp, #52	; 0x34
	if (FLA[pRollBack].Status != fVALID) //RollBack image is not valid. Abort Roll back
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <FLA_HandleRollBack+0x124>)
 8000bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d028      	beq.n	8000c50 <FLA_HandleRollBack+0x60>
		BootloaderStatus = sUNITERROR;
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <FLA_HandleRollBack+0x128>)
 8000c00:	2214      	movs	r2, #20
 8000c02:	701a      	strb	r2, [r3, #0]
		if (FLA[pApplication].Version > 0)
 8000c04:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <FLA_HandleRollBack+0x124>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	b9eb      	cbnz	r3, 8000c46 <FLA_HandleRollBack+0x56>
		DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000c0a:	2125      	movs	r1, #37	; 0x25
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f001 fb81 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatImageNotValid);
 8000c12:	300a      	adds	r0, #10
 8000c14:	211a      	movs	r1, #26
 8000c16:	b2c0      	uxtb	r0, r0
 8000c18:	f001 fa8c 	bl	8002134 <SER_SendReturnMessage>
		WRK_StartApplication(); //Start the old application
 8000c1c:	f7ff ff70 	bl	8000b00 <WRK_StartApplication>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000c20:	2000      	movs	r0, #0
 8000c22:	9006      	str	r0, [sp, #24]
 8000c24:	9005      	str	r0, [sp, #20]
 8000c26:	2305      	movs	r3, #5
 8000c28:	9304      	str	r3, [sp, #16]
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	9303      	str	r3, [sp, #12]
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	2332      	movs	r3, #50	; 0x32
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	9000      	str	r0, [sp, #0]
 8000c36:	4603      	mov	r3, r0
 8000c38:	22ff      	movs	r2, #255	; 0xff
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	f000 fd5e 	bl	80016fc <LED_Set>
}
 8000c40:	b00d      	add	sp, #52	; 0x34
 8000c42:	f85d fb04 	ldr.w	pc, [sp], #4
			FLA_SetStatus(pApplication,fVALID);
 8000c46:	2101      	movs	r1, #1
 8000c48:	4608      	mov	r0, r1
 8000c4a:	f000 faaf 	bl	80011ac <FLA_SetStatus>
 8000c4e:	e7dc      	b.n	8000c0a <FLA_HandleRollBack+0x1a>
		DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000c50:	2125      	movs	r1, #37	; 0x25
 8000c52:	200a      	movs	r0, #10
 8000c54:	f001 fb5e 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatNone);
 8000c58:	300a      	adds	r0, #10
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b2c0      	uxtb	r0, r0
 8000c5e:	f001 fa69 	bl	8002134 <SER_SendReturnMessage>
		LED_Set(STANDBYLED, SWITCHEDON, 255, 0, 0, 50, 500, 500, 5, 0, 0); //On RED
 8000c62:	2000      	movs	r0, #0
 8000c64:	9006      	str	r0, [sp, #24]
 8000c66:	9005      	str	r0, [sp, #20]
 8000c68:	2305      	movs	r3, #5
 8000c6a:	9304      	str	r3, [sp, #16]
 8000c6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c70:	9303      	str	r3, [sp, #12]
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	2332      	movs	r3, #50	; 0x32
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	9000      	str	r0, [sp, #0]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	22ff      	movs	r2, #255	; 0xff
 8000c7e:	2101      	movs	r1, #1
 8000c80:	f000 fd3c 	bl	80016fc <LED_Set>
		LED_Handle();
 8000c84:	f000 feac 	bl	80019e0 <LED_Handle>
		Result = WRK_HandleCopyBlocks (FLA[pRollBack].NrOfBlocks, FLA_ROLLBACKADDRESS, FLA_MAINADDRESS);
 8000c88:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <FLA_HandleRollBack+0x12c>)
 8000c8a:	4925      	ldr	r1, [pc, #148]	; (8000d20 <FLA_HandleRollBack+0x130>)
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <FLA_HandleRollBack+0x124>)
 8000c8e:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
 8000c90:	f7ff fe92 	bl	80009b8 <WRK_HandleCopyBlocks>
		if (Result == 1)
 8000c94:	2801      	cmp	r0, #1
 8000c96:	d018      	beq.n	8000cca <FLA_HandleRollBack+0xda>
			FLA_SetStatus(pApplication,fCORRUPT);
 8000c98:	2105      	movs	r1, #5
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fa86 	bl	80011ac <FLA_SetStatus>
			FLA_SetVersion(pApplication,0);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 faea 	bl	800127c <FLA_SetVersion>
			LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000ca8:	2000      	movs	r0, #0
 8000caa:	9006      	str	r0, [sp, #24]
 8000cac:	9005      	str	r0, [sp, #20]
 8000cae:	2305      	movs	r3, #5
 8000cb0:	9304      	str	r3, [sp, #16]
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	9303      	str	r3, [sp, #12]
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	2332      	movs	r3, #50	; 0x32
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	9000      	str	r0, [sp, #0]
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	f000 fd1a 	bl	80016fc <LED_Set>
}
 8000cc8:	e7ba      	b.n	8000c40 <FLA_HandleRollBack+0x50>
			BootloaderStatus = sIDLE;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <FLA_HandleRollBack+0x128>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	701a      	strb	r2, [r3, #0]
			FLA_SetStatus(pApplication, fUPDATED);
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	f000 fa6b 	bl	80011ac <FLA_SetStatus>
			FLA_SetVersion(pApplication, FLA[pRollBack].Version);
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <FLA_HandleRollBack+0x124>)
 8000cd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 face 	bl	800127c <FLA_SetVersion>
			DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000ce0:	2125      	movs	r1, #37	; 0x25
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f001 fb16 	bl	8002314 <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatNone);
 8000ce8:	300a      	adds	r0, #10
 8000cea:	2100      	movs	r1, #0
 8000cec:	b2c0      	uxtb	r0, r0
 8000cee:	f001 fa21 	bl	8002134 <SER_SendReturnMessage>
			uint8_t Temp[] = "/10A291D01";
 8000cf2:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <FLA_HandleRollBack+0x134>)
 8000cf4:	ab09      	add	r3, sp, #36	; 0x24
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	c303      	stmia	r3!, {r0, r1}
 8000cfa:	f823 2b02 	strh.w	r2, [r3], #2
 8000cfe:	0c12      	lsrs	r2, r2, #16
 8000d00:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, Temp ,sizeof(Temp),100);
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	220b      	movs	r2, #11
 8000d06:	a909      	add	r1, sp, #36	; 0x24
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <FLA_HandleRollBack+0x138>)
 8000d0a:	f003 fc60 	bl	80045ce <HAL_UART_Transmit>
			WRK_StartApplication(); //Try the application
 8000d0e:	f7ff fef7 	bl	8000b00 <WRK_StartApplication>
 8000d12:	e795      	b.n	8000c40 <FLA_HandleRollBack+0x50>
 8000d14:	200001b0 	.word	0x200001b0
 8000d18:	20000038 	.word	0x20000038
 8000d1c:	08005800 	.word	0x08005800
 8000d20:	0802c800 	.word	0x0802c800
 8000d24:	08004c9c 	.word	0x08004c9c
 8000d28:	2000011c 	.word	0x2000011c

08000d2c <FLA_HandleUpdating>:
{
 8000d2c:	b500      	push	{lr}
 8000d2e:	b08d      	sub	sp, #52	; 0x34
	if (FLA[pUpdate].Status != fVALID) //Upgrade image is not valid. Abort upgrade
 8000d30:	4b88      	ldr	r3, [pc, #544]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000d32:	7f1b      	ldrb	r3, [r3, #28]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d038      	beq.n	8000daa <FLA_HandleUpdating+0x7e>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000d38:	2000      	movs	r0, #0
 8000d3a:	9006      	str	r0, [sp, #24]
 8000d3c:	9005      	str	r0, [sp, #20]
 8000d3e:	2305      	movs	r3, #5
 8000d40:	9304      	str	r3, [sp, #16]
 8000d42:	2364      	movs	r3, #100	; 0x64
 8000d44:	9303      	str	r3, [sp, #12]
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	2332      	movs	r3, #50	; 0x32
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	9000      	str	r0, [sp, #0]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	2102      	movs	r1, #2
 8000d54:	f000 fcd2 	bl	80016fc <LED_Set>
		BootloaderStatus = sUNITERROR;
 8000d58:	4b7f      	ldr	r3, [pc, #508]	; (8000f58 <FLA_HandleUpdating+0x22c>)
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	701a      	strb	r2, [r3, #0]
		if (FLA[pApplication].Version > 0)
 8000d5e:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	b9eb      	cbnz	r3, 8000da0 <FLA_HandleUpdating+0x74>
		DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000d64:	2125      	movs	r1, #37	; 0x25
 8000d66:	200a      	movs	r0, #10
 8000d68:	f001 fad4 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatImageNotValid);
 8000d6c:	300a      	adds	r0, #10
 8000d6e:	211a      	movs	r1, #26
 8000d70:	b2c0      	uxtb	r0, r0
 8000d72:	f001 f9df 	bl	8002134 <SER_SendReturnMessage>
		WRK_StartApplication(); //Start the old application
 8000d76:	f7ff fec3 	bl	8000b00 <WRK_StartApplication>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	9006      	str	r0, [sp, #24]
 8000d7e:	9005      	str	r0, [sp, #20]
 8000d80:	2305      	movs	r3, #5
 8000d82:	9304      	str	r3, [sp, #16]
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	9303      	str	r3, [sp, #12]
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	2332      	movs	r3, #50	; 0x32
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9000      	str	r0, [sp, #0]
 8000d90:	4603      	mov	r3, r0
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	2102      	movs	r1, #2
 8000d96:	f000 fcb1 	bl	80016fc <LED_Set>
}
 8000d9a:	b00d      	add	sp, #52	; 0x34
 8000d9c:	f85d fb04 	ldr.w	pc, [sp], #4
			FLA_SetStatus(pApplication,fVALID);
 8000da0:	2101      	movs	r1, #1
 8000da2:	4608      	mov	r0, r1
 8000da4:	f000 fa02 	bl	80011ac <FLA_SetStatus>
 8000da8:	e7dc      	b.n	8000d64 <FLA_HandleUpdating+0x38>
		DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000daa:	2125      	movs	r1, #37	; 0x25
 8000dac:	200a      	movs	r0, #10
 8000dae:	f001 fab1 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatNone);
 8000db2:	300a      	adds	r0, #10
 8000db4:	2100      	movs	r1, #0
 8000db6:	b2c0      	uxtb	r0, r0
 8000db8:	f001 f9bc 	bl	8002134 <SER_SendReturnMessage>
		LED_Set(STANDBYLED, SWITCHEDON, 0, 0, 255, 50, 500, 500, 5, 0, 0); //On BLUE
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	9006      	str	r0, [sp, #24]
 8000dc0:	9005      	str	r0, [sp, #20]
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	9304      	str	r3, [sp, #16]
 8000dc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dca:	9303      	str	r3, [sp, #12]
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	2332      	movs	r3, #50	; 0x32
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	23ff      	movs	r3, #255	; 0xff
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4602      	mov	r2, r0
 8000dda:	2101      	movs	r1, #1
 8000ddc:	f000 fc8e 	bl	80016fc <LED_Set>
		LED_Handle();
 8000de0:	f000 fdfe 	bl	80019e0 <LED_Handle>
		if ((FLA[pApplication].Version > 0) && (((*(__IO uint32_t*) FLA_MAINADDRESS) & 0x2FFE0000) == 0x20000000))//Application is present
 8000de4:	4b5b      	ldr	r3, [pc, #364]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	b13b      	cbz	r3, 8000dfa <FLA_HandleUpdating+0xce>
 8000dea:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <FLA_HandleUpdating+0x230>)
 8000dec:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000df0:	4b5b      	ldr	r3, [pc, #364]	; (8000f60 <FLA_HandleUpdating+0x234>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000df8:	d026      	beq.n	8000e48 <FLA_HandleUpdating+0x11c>
			Result = WRK_HandleCopyBlocks (FLA[pUpdate].NrOfBlocks, FLA_UPGRADEADDRESS, FLA_MAINADDRESS);
 8000dfa:	4a5a      	ldr	r2, [pc, #360]	; (8000f64 <FLA_HandleUpdating+0x238>)
 8000dfc:	495a      	ldr	r1, [pc, #360]	; (8000f68 <FLA_HandleUpdating+0x23c>)
 8000dfe:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000e00:	8c18      	ldrh	r0, [r3, #32]
 8000e02:	f7ff fdd9 	bl	80009b8 <WRK_HandleCopyBlocks>
			if (Result == 1)
 8000e06:	2801      	cmp	r0, #1
 8000e08:	d05c      	beq.n	8000ec4 <FLA_HandleUpdating+0x198>
				if (FLA[pRollBack].Status == fVALID)
 8000e0a:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f000 8092 	beq.w	8000f3a <FLA_HandleUpdating+0x20e>
					FLA_SetStatus(pApplication,fCORRUPT);
 8000e16:	2105      	movs	r1, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 f9c7 	bl	80011ac <FLA_SetStatus>
					FLA_SetVersion(pApplication,0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 fa2b 	bl	800127c <FLA_SetVersion>
					LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000e26:	2000      	movs	r0, #0
 8000e28:	9006      	str	r0, [sp, #24]
 8000e2a:	9005      	str	r0, [sp, #20]
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	9304      	str	r3, [sp, #16]
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	9303      	str	r3, [sp, #12]
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	2332      	movs	r3, #50	; 0x32
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	9000      	str	r0, [sp, #0]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	22ff      	movs	r2, #255	; 0xff
 8000e40:	2102      	movs	r1, #2
 8000e42:	f000 fc5b 	bl	80016fc <LED_Set>
 8000e46:	e7a8      	b.n	8000d9a <FLA_HandleUpdating+0x6e>
			FLA_SetStatus(pRollBack, fUPDATING);
 8000e48:	2102      	movs	r1, #2
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 f9ae 	bl	80011ac <FLA_SetStatus>
			Result = WRK_HandleCopyBlocks (FLA_LENGTH/FLA_BLOCKSIZE, FLA_MAINADDRESS, FLA_ROLLBACKADDRESS);
 8000e50:	4a46      	ldr	r2, [pc, #280]	; (8000f6c <FLA_HandleUpdating+0x240>)
 8000e52:	4944      	ldr	r1, [pc, #272]	; (8000f64 <FLA_HandleUpdating+0x238>)
 8000e54:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 8000e58:	f7ff fdae 	bl	80009b8 <WRK_HandleCopyBlocks>
			if (Result == 1) //Copy succeeded. Set Statuses for rollback version
 8000e5c:	2801      	cmp	r0, #1
 8000e5e:	d027      	beq.n	8000eb0 <FLA_HandleUpdating+0x184>
				FLA_SetStatus(pRollBack,fCORRUPT);
 8000e60:	2105      	movs	r1, #5
 8000e62:	2003      	movs	r0, #3
 8000e64:	f000 f9a2 	bl	80011ac <FLA_SetStatus>
				FLA_SetVersion(pRollBack,0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 fa06 	bl	800127c <FLA_SetVersion>
				LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000e70:	2000      	movs	r0, #0
 8000e72:	9006      	str	r0, [sp, #24]
 8000e74:	9005      	str	r0, [sp, #20]
 8000e76:	2305      	movs	r3, #5
 8000e78:	9304      	str	r3, [sp, #16]
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2332      	movs	r3, #50	; 0x32
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9000      	str	r0, [sp, #0]
 8000e86:	4603      	mov	r3, r0
 8000e88:	22ff      	movs	r2, #255	; 0xff
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	f000 fc36 	bl	80016fc <LED_Set>
			DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000e90:	2125      	movs	r1, #37	; 0x25
 8000e92:	200a      	movs	r0, #10
 8000e94:	f001 fa3e 	bl	8002314 <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatCreateRollBackError);
 8000e98:	300a      	adds	r0, #10
 8000e9a:	211d      	movs	r1, #29
 8000e9c:	b2c0      	uxtb	r0, r0
 8000e9e:	f001 f949 	bl	8002134 <SER_SendReturnMessage>
			if (FLA[pApplication].Version > 0)
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d14e      	bne.n	8000f48 <FLA_HandleUpdating+0x21c>
			WRK_StartApplication(); //Try to start the old application
 8000eaa:	f7ff fe29 	bl	8000b00 <WRK_StartApplication>
}
 8000eae:	e774      	b.n	8000d9a <FLA_HandleUpdating+0x6e>
				FLA_SetStatus(pRollBack, fVALID);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f97a 	bl	80011ac <FLA_SetStatus>
				FLA_SetVersion(pRollBack, FLA[pApplication].Version);
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f9dd 	bl	800127c <FLA_SetVersion>
		if (Result == 1) //Copy succeeded. Copy the application
 8000ec2:	e79a      	b.n	8000dfa <FLA_HandleUpdating+0xce>
				LED_Set(STANDBYLED, SWITCHEDON, 0, 0, 255, 50, 500, 500, 5, 0, 0); //On BLUE
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	9006      	str	r0, [sp, #24]
 8000ec8:	9005      	str	r0, [sp, #20]
 8000eca:	2305      	movs	r3, #5
 8000ecc:	9304      	str	r3, [sp, #16]
 8000ece:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ed2:	9303      	str	r3, [sp, #12]
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2332      	movs	r3, #50	; 0x32
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	23ff      	movs	r3, #255	; 0xff
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	f000 fc0a 	bl	80016fc <LED_Set>
				BootloaderStatus = sIDLE;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <FLA_HandleUpdating+0x22c>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
				FLA_SetStatus(pApplication, fUPDATED);
 8000eee:	2103      	movs	r1, #3
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 f95b 	bl	80011ac <FLA_SetStatus>
				FLA_SetVersion(pApplication, FLA[pUpdate].Version);
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <FLA_HandleUpdating+0x228>)
 8000ef8:	6999      	ldr	r1, [r3, #24]
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 f9be 	bl	800127c <FLA_SetVersion>
				HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	; 0x64
 8000f02:	f001 fddf 	bl	8002ac4 <HAL_Delay>
				DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 8000f06:	2125      	movs	r1, #37	; 0x25
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f001 fa03 	bl	8002314 <SER_FillBuffer>
				SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 8000f0e:	300a      	adds	r0, #10
 8000f10:	2101      	movs	r1, #1
 8000f12:	b2c0      	uxtb	r0, r0
 8000f14:	f001 f90e 	bl	8002134 <SER_SendReturnMessage>
				uint8_t Temp[] = "/10A22F101";
 8000f18:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <FLA_HandleUpdating+0x244>)
 8000f1a:	ab09      	add	r3, sp, #36	; 0x24
 8000f1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f1e:	c303      	stmia	r3!, {r0, r1}
 8000f20:	f823 2b02 	strh.w	r2, [r3], #2
 8000f24:	0c12      	lsrs	r2, r2, #16
 8000f26:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, Temp ,sizeof(Temp),100);
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	220b      	movs	r2, #11
 8000f2c:	a909      	add	r1, sp, #36	; 0x24
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <FLA_HandleUpdating+0x248>)
 8000f30:	f003 fb4d 	bl	80045ce <HAL_UART_Transmit>
				WRK_StartApplication(); //Try the application
 8000f34:	f7ff fde4 	bl	8000b00 <WRK_StartApplication>
 8000f38:	e72f      	b.n	8000d9a <FLA_HandleUpdating+0x6e>
					FLA_SetStatus(pApplication,fROLLBACK);
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 f935 	bl	80011ac <FLA_SetStatus>
					FLA_HandleRollBack();
 8000f42:	f7ff fe55 	bl	8000bf0 <FLA_HandleRollBack>
 8000f46:	e728      	b.n	8000d9a <FLA_HandleUpdating+0x6e>
				FLA_SetStatus(pApplication,fVALID);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	f000 f92e 	bl	80011ac <FLA_SetStatus>
 8000f50:	e7ab      	b.n	8000eaa <FLA_HandleUpdating+0x17e>
 8000f52:	bf00      	nop
 8000f54:	200001b0 	.word	0x200001b0
 8000f58:	20000038 	.word	0x20000038
 8000f5c:	08005000 	.word	0x08005000
 8000f60:	2ffe0000 	.word	0x2ffe0000
 8000f64:	08005800 	.word	0x08005800
 8000f68:	08019000 	.word	0x08019000
 8000f6c:	0802c800 	.word	0x0802c800
 8000f70:	08004ca8 	.word	0x08004ca8
 8000f74:	2000011c 	.word	0x2000011c

08000f78 <FLA_HandleUpdated>:
{
 8000f78:	b500      	push	{lr}
 8000f7a:	b089      	sub	sp, #36	; 0x24
	if (FLA[pRollBack].Status == fVALID)
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <FLA_HandleUpdated+0xdc>)
 8000f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d01a      	beq.n	8000fbc <FLA_HandleUpdated+0x44>
		FLA_SetStatus(pApplication,fCORRUPT);
 8000f86:	2105      	movs	r1, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 f90f 	bl	80011ac <FLA_SetStatus>
		FLA_SetVersion(pApplication,0);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f973 	bl	800127c <FLA_SetVersion>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8000f96:	2000      	movs	r0, #0
 8000f98:	9006      	str	r0, [sp, #24]
 8000f9a:	9005      	str	r0, [sp, #20]
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	9304      	str	r3, [sp, #16]
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	9303      	str	r3, [sp, #12]
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	2332      	movs	r3, #50	; 0x32
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	9000      	str	r0, [sp, #0]
 8000fac:	4603      	mov	r3, r0
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	f000 fba3 	bl	80016fc <LED_Set>
}
 8000fb6:	b009      	add	sp, #36	; 0x24
 8000fb8:	f85d fb04 	ldr.w	pc, [sp], #4
		LED_Set(STANDBYLED, SWITCHEDON, 255, 0, 0, 50, 500, 500, 5, 0, 0); //On RED
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	9006      	str	r0, [sp, #24]
 8000fc0:	9005      	str	r0, [sp, #20]
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	9304      	str	r3, [sp, #16]
 8000fc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fca:	9303      	str	r3, [sp, #12]
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2332      	movs	r3, #50	; 0x32
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	9000      	str	r0, [sp, #0]
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	2101      	movs	r1, #1
 8000fda:	f000 fb8f 	bl	80016fc <LED_Set>
		LED_Handle();
 8000fde:	f000 fcff 	bl	80019e0 <LED_Handle>
		Result = WRK_HandleCopyBlocks (FLA_LENGTH/FLA_BLOCKSIZE, FLA_ROLLBACKADDRESS, FLA_MAINADDRESS); //Handle retry and or roll back
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <FLA_HandleUpdated+0xe0>)
 8000fe4:	491d      	ldr	r1, [pc, #116]	; (800105c <FLA_HandleUpdated+0xe4>)
 8000fe6:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 8000fea:	f7ff fce5 	bl	80009b8 <WRK_HandleCopyBlocks>
		if (Result == 1)
 8000fee:	2801      	cmp	r0, #1
 8000ff0:	d018      	beq.n	8001024 <FLA_HandleUpdated+0xac>
			FLA_SetStatus(pApplication,fCORRUPT);
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 f8d9 	bl	80011ac <FLA_SetStatus>
			FLA_SetVersion(pApplication,0);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 f93d 	bl	800127c <FLA_SetVersion>
			LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 8001002:	2000      	movs	r0, #0
 8001004:	9006      	str	r0, [sp, #24]
 8001006:	9005      	str	r0, [sp, #20]
 8001008:	2305      	movs	r3, #5
 800100a:	9304      	str	r3, [sp, #16]
 800100c:	2364      	movs	r3, #100	; 0x64
 800100e:	9303      	str	r3, [sp, #12]
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2332      	movs	r3, #50	; 0x32
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	9000      	str	r0, [sp, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	2102      	movs	r1, #2
 800101e:	f000 fb6d 	bl	80016fc <LED_Set>
 8001022:	e7c8      	b.n	8000fb6 <FLA_HandleUpdated+0x3e>
			BootloaderStatus = sIDLE;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <FLA_HandleUpdated+0xe8>)
 8001026:	2202      	movs	r2, #2
 8001028:	701a      	strb	r2, [r3, #0]
			FLA_SetStatus(pApplication, fUPDATED);
 800102a:	2103      	movs	r1, #3
 800102c:	f000 f8be 	bl	80011ac <FLA_SetStatus>
			FLA_SetVersion(pApplication, FLA[pRollBack].Version);
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <FLA_HandleUpdated+0xdc>)
 8001032:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001034:	2001      	movs	r0, #1
 8001036:	f000 f921 	bl	800127c <FLA_SetVersion>
			DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 800103a:	2125      	movs	r1, #37	; 0x25
 800103c:	200a      	movs	r0, #10
 800103e:	f001 f969 	bl	8002314 <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatNone);
 8001042:	300a      	adds	r0, #10
 8001044:	2100      	movs	r1, #0
 8001046:	b2c0      	uxtb	r0, r0
 8001048:	f001 f874 	bl	8002134 <SER_SendReturnMessage>
			WRK_StartApplication(); //Try the application
 800104c:	f7ff fd58 	bl	8000b00 <WRK_StartApplication>
 8001050:	e7b1      	b.n	8000fb6 <FLA_HandleUpdated+0x3e>
 8001052:	bf00      	nop
 8001054:	200001b0 	.word	0x200001b0
 8001058:	08005800 	.word	0x08005800
 800105c:	0802c800 	.word	0x0802c800
 8001060:	20000038 	.word	0x20000038

08001064 <WRK_Handle>:
{
 8001064:	b500      	push	{lr}
 8001066:	b089      	sub	sp, #36	; 0x24
	BootloaderStatus = sACTIVE;
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <WRK_Handle+0x80>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
	DataLength = SER_FillBuffer(10, MTypeGetBootloaderStatus);
 800106e:	2125      	movs	r1, #37	; 0x25
 8001070:	200a      	movs	r0, #10
 8001072:	f001 f94f 	bl	8002314 <SER_FillBuffer>
	SER_SendReturnMessage (DataLength + 10,MStatNone);
 8001076:	300a      	adds	r0, #10
 8001078:	2100      	movs	r1, #0
 800107a:	b2c0      	uxtb	r0, r0
 800107c:	f001 f85a 	bl	8002134 <SER_SendReturnMessage>
	if (FLA[pApplication].Status == fCORRUPT)
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <WRK_Handle+0x84>)
 8001082:	7c1b      	ldrb	r3, [r3, #16]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d00b      	beq.n	80010a0 <WRK_Handle+0x3c>
	else if (FLA[pApplication].Status == fUPDATING)
 8001088:	2b02      	cmp	r3, #2
 800108a:	d00e      	beq.n	80010aa <WRK_Handle+0x46>
	else if (FLA[pApplication].Status == fROLLBACK)
 800108c:	2b04      	cmp	r3, #4
 800108e:	d00f      	beq.n	80010b0 <WRK_Handle+0x4c>
	else if (FLA[pApplication].Status == fUPDATED)//Application didn't start and change status to VALID, so roll back
 8001090:	2b03      	cmp	r3, #3
 8001092:	d010      	beq.n	80010b6 <WRK_Handle+0x52>
	else if (FLA[pApplication].Status == fVALID)//Normal startup
 8001094:	2b01      	cmp	r3, #1
 8001096:	d011      	beq.n	80010bc <WRK_Handle+0x58>
	else if (FLA[pApplication].Status == fUNDEFINED)//EEprom is empty at startup
 8001098:	b99b      	cbnz	r3, 80010c2 <WRK_Handle+0x5e>
		WRK_StartApplication();
 800109a:	f7ff fd31 	bl	8000b00 <WRK_StartApplication>
 800109e:	e001      	b.n	80010a4 <WRK_Handle+0x40>
		FLA_HandleCorrupt();
 80010a0:	f7ff fd16 	bl	8000ad0 <FLA_HandleCorrupt>
}
 80010a4:	b009      	add	sp, #36	; 0x24
 80010a6:	f85d fb04 	ldr.w	pc, [sp], #4
		FLA_HandleUpdating();
 80010aa:	f7ff fe3f 	bl	8000d2c <FLA_HandleUpdating>
 80010ae:	e7f9      	b.n	80010a4 <WRK_Handle+0x40>
		FLA_HandleRollBack();
 80010b0:	f7ff fd9e 	bl	8000bf0 <FLA_HandleRollBack>
 80010b4:	e7f6      	b.n	80010a4 <WRK_Handle+0x40>
		FLA_HandleUpdated();
 80010b6:	f7ff ff5f 	bl	8000f78 <FLA_HandleUpdated>
 80010ba:	e7f3      	b.n	80010a4 <WRK_Handle+0x40>
		WRK_StartApplication();
 80010bc:	f7ff fd20 	bl	8000b00 <WRK_StartApplication>
 80010c0:	e7f0      	b.n	80010a4 <WRK_Handle+0x40>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 80010c2:	2000      	movs	r0, #0
 80010c4:	9006      	str	r0, [sp, #24]
 80010c6:	9005      	str	r0, [sp, #20]
 80010c8:	2305      	movs	r3, #5
 80010ca:	9304      	str	r3, [sp, #16]
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	2332      	movs	r3, #50	; 0x32
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	9000      	str	r0, [sp, #0]
 80010d8:	4603      	mov	r3, r0
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	2102      	movs	r1, #2
 80010de:	f000 fb0d 	bl	80016fc <LED_Set>
}
 80010e2:	e7df      	b.n	80010a4 <WRK_Handle+0x40>
 80010e4:	20000038 	.word	0x20000038
 80010e8:	200001b0 	.word	0x200001b0

080010ec <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	; (8001130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001112:	f7ff fb67 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 fd77 	bl	8004c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111a:	f7ff fa3f 	bl	800059c <main>
  bx lr
 800111e:	4770      	bx	lr
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001128:	08004dc4 	.word	0x08004dc4
  ldr r2, =_sbss
 800112c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001130:	200007c8 	.word	0x200007c8

08001134 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_IRQHandler>
	...

08001138 <CalculateCRC8>:
//! \param[out]	uint8_t	crc		CRC value that is calculated
uint8_t CalculateCRC8(uint8_t *pData, uint8_t size)
{
	uint8_t crc = 0;
	uint8_t AsciiCode;
	for (uint8_t i = 0; i < size; i++)
 8001138:	b1b9      	cbz	r1, 800116a <CalculateCRC8+0x32>
{
 800113a:	b510      	push	{r4, lr}
 800113c:	4684      	mov	ip, r0
 800113e:	eb00 0e01 	add.w	lr, r0, r1
	for (uint8_t i = 0; i < size; i++)
 8001142:	4601      	mov	r1, r0
	uint8_t crc = 0;
 8001144:	2000      	movs	r0, #0
	{
		AsciiCode = *pData++;
		if (AsciiCode >= 97) AsciiCode -= 32; //make sure all letters are capitals for the crc calculation
		if ((i!=6) && (i!=7)) //Don't calculate the CRC value itself
		{
			crc = table_crc8[crc ^ AsciiCode];
 8001146:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <CalculateCRC8+0x38>)
		AsciiCode = *pData++;
 8001148:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (AsciiCode >= 97) AsciiCode -= 32; //make sure all letters are capitals for the crc calculation
 800114c:	2b60      	cmp	r3, #96	; 0x60
 800114e:	bf84      	itt	hi
 8001150:	3b20      	subhi	r3, #32
 8001152:	b2db      	uxtbhi	r3, r3
		if ((i!=6) && (i!=7)) //Don't calculate the CRC value itself
 8001154:	1fca      	subs	r2, r1, #7
 8001156:	eba2 020c 	sub.w	r2, r2, ip
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	2a01      	cmp	r2, #1
			crc = table_crc8[crc ^ AsciiCode];
 800115e:	bf84      	itt	hi
 8001160:	4043      	eorhi	r3, r0
 8001162:	5ce0      	ldrbhi	r0, [r4, r3]
	for (uint8_t i = 0; i < size; i++)
 8001164:	4571      	cmp	r1, lr
 8001166:	d1ef      	bne.n	8001148 <CalculateCRC8+0x10>
		}
	}
	return crc;
}
 8001168:	bd10      	pop	{r4, pc}
	uint8_t crc = 0;
 800116a:	4608      	mov	r0, r1
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	08004cb4 	.word	0x08004cb4

08001174 <EEP_WriteEEPROM>:
  Description:  	Used to store variables in EEprom
  Parameters:   	enuVariable newVariable, uint32_t newValue
  Return value: 	None
***************************************************************/
void EEP_WriteEEPROM (uint32_t newAddress, uint32_t newValue)
{
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	460d      	mov	r5, r1
    uint32_t Address = 0x8080000 + (4 * newAddress);
 8001178:	f100 7000 	add.w	r0, r0, #33554432	; 0x2000000
 800117c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8001180:	0084      	lsls	r4, r0, #2
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8001182:	f001 ff7f 	bl	8003084 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD,Address);
 8001186:	4621      	mov	r1, r4
 8001188:	2002      	movs	r0, #2
 800118a:	f001 ff99 	bl	80030c0 <HAL_FLASHEx_DATAEEPROM_Erase>
    HAL_FLASHEx_DATAEEPROM_Program (FLASH_TYPEPROGRAMDATA_WORD, Address, newValue);
 800118e:	462a      	mov	r2, r5
 8001190:	4621      	mov	r1, r4
 8001192:	2002      	movs	r0, #2
 8001194:	f001 ffb2 	bl	80030fc <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 8001198:	f001 ff88 	bl	80030ac <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800119c:	bd38      	pop	{r3, r4, r5, pc}

0800119e <EEP_ReadEEPROM>:
  Parameters:   	enuVariable newVariable
  Return value: 	None
***************************************************************/
uint32_t EEP_ReadEEPROM (int8_t newAddress)
{
    return (*(__IO uint32_t*) (0x08080000 + (4 * (uint32_t) newAddress)));
 800119e:	f100 7000 	add.w	r0, r0, #33554432	; 0x2000000
 80011a2:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 80011a6:	0080      	lsls	r0, r0, #2
 80011a8:	6800      	ldr	r0, [r0, #0]
}
 80011aa:	4770      	bx	lr

080011ac <FLA_SetStatus>:
//! \brief      Sets the status of the selected partition
//! \details    Sets the status and stores in EEprom
//! \param[in]	enuPartition newPartition
//! \param[in]	enuFLA newStatus
void FLA_SetStatus (enuPartition newPartition, enuFLA newStatus)
{
 80011ac:	b508      	push	{r3, lr}
	FLA[(uint8_t) newPartition].Status = newStatus;
 80011ae:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <FLA_SetStatus+0x4c>)
 80011b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80011b8:	7119      	strb	r1, [r3, #4]
	if (newPartition == pApplication)
 80011ba:	2801      	cmp	r0, #1
 80011bc:	d008      	beq.n	80011d0 <FLA_SetStatus+0x24>
		EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
	else if (newPartition == pUpdate)
 80011be:	2802      	cmp	r0, #2
 80011c0:	d00c      	beq.n	80011dc <FLA_SetStatus+0x30>
		EEP_WriteEEPROM(FLA_UPGRADESTATUS, FLA[pUpdate].Status);
	else if (newPartition == pRollBack)
 80011c2:	2803      	cmp	r0, #3
 80011c4:	d010      	beq.n	80011e8 <FLA_SetStatus+0x3c>
{
 80011c6:	f242 7310 	movw	r3, #10000	; 0x2710
		EEP_WriteEEPROM(FLA_ROLLBACKSTATUS, FLA[pRollBack].Status);
	for(uint32_t Counter = 0; Counter<10000; Counter++)
 80011ca:	3b01      	subs	r3, #1
 80011cc:	d1fd      	bne.n	80011ca <FLA_SetStatus+0x1e>
	{

	}
}
 80011ce:	bd08      	pop	{r3, pc}
		EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <FLA_SetStatus+0x4c>)
 80011d2:	7c19      	ldrb	r1, [r3, #16]
 80011d4:	201f      	movs	r0, #31
 80011d6:	f7ff ffcd 	bl	8001174 <EEP_WriteEEPROM>
 80011da:	e7f4      	b.n	80011c6 <FLA_SetStatus+0x1a>
		EEP_WriteEEPROM(FLA_UPGRADESTATUS, FLA[pUpdate].Status);
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <FLA_SetStatus+0x4c>)
 80011de:	7f19      	ldrb	r1, [r3, #28]
 80011e0:	2025      	movs	r0, #37	; 0x25
 80011e2:	f7ff ffc7 	bl	8001174 <EEP_WriteEEPROM>
 80011e6:	e7ee      	b.n	80011c6 <FLA_SetStatus+0x1a>
		EEP_WriteEEPROM(FLA_ROLLBACKSTATUS, FLA[pRollBack].Status);
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <FLA_SetStatus+0x4c>)
 80011ea:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80011ee:	2021      	movs	r0, #33	; 0x21
 80011f0:	f7ff ffc0 	bl	8001174 <EEP_WriteEEPROM>
 80011f4:	e7e7      	b.n	80011c6 <FLA_SetStatus+0x1a>
 80011f6:	bf00      	nop
 80011f8:	200001b0 	.word	0x200001b0

080011fc <FLA_RestorePartition>:
{
 80011fc:	b508      	push	{r3, lr}
	if (FLA[pRollBack].Status == fVALID)
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <FLA_RestorePartition+0x38>)
 8001200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001204:	2b01      	cmp	r3, #1
 8001206:	d004      	beq.n	8001212 <FLA_RestorePartition+0x16>
		SER_SendReturnMessage (10,MStatImageNotValid);
 8001208:	211a      	movs	r1, #26
 800120a:	200a      	movs	r0, #10
 800120c:	f000 ff92 	bl	8002134 <SER_SendReturnMessage>
}
 8001210:	bd08      	pop	{r3, pc}
		FLA_SetStatus(pApplication,fROLLBACK);
 8001212:	2104      	movs	r1, #4
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff ffc9 	bl	80011ac <FLA_SetStatus>
		DataLength = SER_FillBuffer(10, Message.MType);
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <FLA_RestorePartition+0x3c>)
 800121c:	78d9      	ldrb	r1, [r3, #3]
 800121e:	200a      	movs	r0, #10
 8001220:	f001 f878 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 8001224:	300a      	adds	r0, #10
 8001226:	2101      	movs	r1, #1
 8001228:	b2c0      	uxtb	r0, r0
 800122a:	f000 ff83 	bl	8002134 <SER_SendReturnMessage>
		HAL_NVIC_SystemReset();
 800122e:	f001 fcc7 	bl	8002bc0 <HAL_NVIC_SystemReset>
 8001232:	e7ed      	b.n	8001210 <FLA_RestorePartition+0x14>
 8001234:	200001b0 	.word	0x200001b0
 8001238:	20000534 	.word	0x20000534

0800123c <FLA_HandleUpgradeApplication>:
{
 800123c:	b508      	push	{r3, lr}
	if (FLA[pUpdate].Status == fVALID)
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <FLA_HandleUpgradeApplication+0x38>)
 8001240:	7f1b      	ldrb	r3, [r3, #28]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d004      	beq.n	8001250 <FLA_HandleUpgradeApplication+0x14>
		SER_SendReturnMessage (10,MStatImageNotValid);
 8001246:	211a      	movs	r1, #26
 8001248:	200a      	movs	r0, #10
 800124a:	f000 ff73 	bl	8002134 <SER_SendReturnMessage>
}
 800124e:	bd08      	pop	{r3, pc}
		FLA_SetStatus(pApplication,fUPDATING);
 8001250:	2102      	movs	r1, #2
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff ffaa 	bl	80011ac <FLA_SetStatus>
		DataLength = SER_FillBuffer(10, Message.MType);
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <FLA_HandleUpgradeApplication+0x3c>)
 800125a:	78d9      	ldrb	r1, [r3, #3]
 800125c:	200a      	movs	r0, #10
 800125e:	f001 f859 	bl	8002314 <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 8001262:	300a      	adds	r0, #10
 8001264:	2101      	movs	r1, #1
 8001266:	b2c0      	uxtb	r0, r0
 8001268:	f000 ff64 	bl	8002134 <SER_SendReturnMessage>
		HAL_NVIC_SystemReset();
 800126c:	f001 fca8 	bl	8002bc0 <HAL_NVIC_SystemReset>
 8001270:	e7ed      	b.n	800124e <FLA_HandleUpgradeApplication+0x12>
 8001272:	bf00      	nop
 8001274:	200001b0 	.word	0x200001b0
 8001278:	20000534 	.word	0x20000534

0800127c <FLA_SetVersion>:
//! \brief      Sets the version of the selected partition
//! \details    Sets the version and stores in EEprom
//! \param[in]	enuPartition newPartition
//! \param[in]	uint32_t newVersion
void FLA_SetVersion (enuPartition newPartition, uint32_t newVersion)
{
 800127c:	b508      	push	{r3, lr}
	FLA[(uint8_t) newPartition].Version = newVersion;
 800127e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <FLA_SetVersion+0x54>)
 8001284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (newPartition == pApplication)
 8001288:	2801      	cmp	r0, #1
 800128a:	d009      	beq.n	80012a0 <FLA_SetVersion+0x24>
		EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
	else if (newPartition == pUpdate)
 800128c:	2802      	cmp	r0, #2
 800128e:	d00c      	beq.n	80012aa <FLA_SetVersion+0x2e>
		EEP_WriteEEPROM(FLA_UPGRADEVERSION, FLA[pUpdate].Version);
	else if (newPartition == pRollBack)
 8001290:	2803      	cmp	r0, #3
 8001292:	d010      	beq.n	80012b6 <FLA_SetVersion+0x3a>
		EEP_WriteEEPROM(FLA_ROLLBACKVERSION, FLA[pRollBack].Version);
	else if (newPartition == pBootloader)
 8001294:	b1a8      	cbz	r0, 80012c2 <FLA_SetVersion+0x46>
{
 8001296:	f242 7310 	movw	r3, #10000	; 0x2710
		EEP_WriteEEPROM(FLA_BOOTLOADERVERSION, FLA[pBootloader].Version);
	for(uint32_t Counter = 0; Counter<10000; Counter++)
 800129a:	3b01      	subs	r3, #1
 800129c:	d1fd      	bne.n	800129a <FLA_SetVersion+0x1e>
	{

	}
}
 800129e:	bd08      	pop	{r3, pc}
		EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
 80012a0:	68d9      	ldr	r1, [r3, #12]
 80012a2:	201e      	movs	r0, #30
 80012a4:	f7ff ff66 	bl	8001174 <EEP_WriteEEPROM>
 80012a8:	e7f5      	b.n	8001296 <FLA_SetVersion+0x1a>
		EEP_WriteEEPROM(FLA_UPGRADEVERSION, FLA[pUpdate].Version);
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <FLA_SetVersion+0x54>)
 80012ac:	6999      	ldr	r1, [r3, #24]
 80012ae:	2022      	movs	r0, #34	; 0x22
 80012b0:	f7ff ff60 	bl	8001174 <EEP_WriteEEPROM>
 80012b4:	e7ef      	b.n	8001296 <FLA_SetVersion+0x1a>
		EEP_WriteEEPROM(FLA_ROLLBACKVERSION, FLA[pRollBack].Version);
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <FLA_SetVersion+0x54>)
 80012b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80012ba:	2020      	movs	r0, #32
 80012bc:	f7ff ff5a 	bl	8001174 <EEP_WriteEEPROM>
 80012c0:	e7e9      	b.n	8001296 <FLA_SetVersion+0x1a>
		EEP_WriteEEPROM(FLA_BOOTLOADERVERSION, FLA[pBootloader].Version);
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <FLA_SetVersion+0x54>)
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	2026      	movs	r0, #38	; 0x26
 80012c8:	f7ff ff54 	bl	8001174 <EEP_WriteEEPROM>
 80012cc:	e7e3      	b.n	8001296 <FLA_SetVersion+0x1a>
 80012ce:	bf00      	nop
 80012d0:	200001b0 	.word	0x200001b0

080012d4 <FLA_ErasePage>:
//-----------------------------------------------------------------------------
//! \brief      Erases a flash page
//! \details    Erases a flash page
//! \param[in] 	uint8_t NewAdress (FLA_FACTORYADDRESS or FLA_UPGRADEADDRESS)
HAL_StatusTypeDef FLA_ErasePage (uint32_t NewAddress)
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	b084      	sub	sp, #16
	HAL_StatusTypeDef  flashstatus;
	FLASH_EraseInitTypeDef s_eraseinit;
	uint32_t page_error = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]

	s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80012dc:	9301      	str	r3, [sp, #4]
	s_eraseinit.PageAddress = NewAddress;
 80012de:	9002      	str	r0, [sp, #8]
	s_eraseinit.NbPages     = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	9303      	str	r3, [sp, #12]
	//Unlock flash
	HAL_FLASH_Unlock();
 80012e4:	f001 fe30 	bl	8002f48 <HAL_FLASH_Unlock>
	flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80012e8:	4669      	mov	r1, sp
 80012ea:	a801      	add	r0, sp, #4
 80012ec:	f001 ffae 	bl	800324c <HAL_FLASHEx_Erase>
 80012f0:	4604      	mov	r4, r0
	//Unlock flash
	HAL_FLASH_Lock();
 80012f2:	f001 fe57 	bl	8002fa4 <HAL_FLASH_Lock>
	return flashstatus;
}
 80012f6:	4620      	mov	r0, r4
 80012f8:	b004      	add	sp, #16
 80012fa:	bd10      	pop	{r4, pc}

080012fc <FLA_WriteBlock>:
//-----------------------------------------------------------------------------
//! \brief      Writes a certain amount of data to a flash page
//! \details    Writes a certain amount of data to a flash page with the contents of Imagedata
//! \param[in] 	uint32_t NewAdress StartAddress for the first byte
HAL_StatusTypeDef FLA_WriteBlock (uint32_t NewAddress)
{
 80012fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_StatusTypeDef  flashstatus;
	uint8_t Counter;
	for (uint16_t i=0; i<FLA_BLOCKSIZE; i+=4)
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <FLA_WriteBlock+0x80>)
 8001302:	f103 0b40 	add.w	fp, r3, #64	; 0x40
{
 8001306:	4699      	mov	r9, r3
 8001308:	eba0 0a03 	sub.w	sl, r0, r3
	{
		uint32_t Value = ImageData[i] + (ImageData[i+1]<<8) + (ImageData[i+2]<<16) + (ImageData[i+3]<<24);
		HAL_FLASH_Unlock();
		flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 800130c:	2702      	movs	r7, #2
 800130e:	e005      	b.n	800131c <FLA_WriteBlock+0x20>
		while ((flashstatus != HAL_OK) && (Counter < 100))
		{
			Counter ++;
			flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
		}
		if (Counter == 100)
 8001310:	2c64      	cmp	r4, #100	; 0x64
 8001312:	d029      	beq.n	8001368 <FLA_WriteBlock+0x6c>
	for (uint16_t i=0; i<FLA_BLOCKSIZE; i+=4)
 8001314:	f109 0904 	add.w	r9, r9, #4
 8001318:	45d9      	cmp	r9, fp
 800131a:	d028      	beq.n	800136e <FLA_WriteBlock+0x72>
		uint32_t Value = ImageData[i] + (ImageData[i+1]<<8) + (ImageData[i+2]<<16) + (ImageData[i+3]<<24);
 800131c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001320:	f899 5000 	ldrb.w	r5, [r9]
 8001324:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8001328:	f899 3002 	ldrb.w	r3, [r9, #2]
 800132c:	eb05 4503 	add.w	r5, r5, r3, lsl #16
 8001330:	f899 3003 	ldrb.w	r3, [r9, #3]
 8001334:	eb05 6503 	add.w	r5, r5, r3, lsl #24
		HAL_FLASH_Unlock();
 8001338:	f001 fe06 	bl	8002f48 <HAL_FLASH_Unlock>
		flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 800133c:	eb0a 0609 	add.w	r6, sl, r9
 8001340:	462a      	mov	r2, r5
 8001342:	4631      	mov	r1, r6
 8001344:	4638      	mov	r0, r7
 8001346:	f001 fe7d 	bl	8003044 <HAL_FLASH_Program>
		while ((flashstatus != HAL_OK) && (Counter < 100))
 800134a:	2800      	cmp	r0, #0
 800134c:	d0e2      	beq.n	8001314 <FLA_WriteBlock+0x18>
		Counter = 0;
 800134e:	2400      	movs	r4, #0
			Counter ++;
 8001350:	3401      	adds	r4, #1
 8001352:	b2e4      	uxtb	r4, r4
			flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 8001354:	462a      	mov	r2, r5
 8001356:	4631      	mov	r1, r6
 8001358:	4638      	mov	r0, r7
 800135a:	f001 fe73 	bl	8003044 <HAL_FLASH_Program>
		while ((flashstatus != HAL_OK) && (Counter < 100))
 800135e:	4680      	mov	r8, r0
 8001360:	2800      	cmp	r0, #0
 8001362:	d0d5      	beq.n	8001310 <FLA_WriteBlock+0x14>
 8001364:	2c64      	cmp	r4, #100	; 0x64
 8001366:	d1f3      	bne.n	8001350 <FLA_WriteBlock+0x54>
		{
			HAL_FLASH_Lock();
 8001368:	f001 fe1c 	bl	8002fa4 <HAL_FLASH_Lock>
			return flashstatus; //Tried 100 times to write. Return error and break off
 800136c:	e003      	b.n	8001376 <FLA_WriteBlock+0x7a>
		}
	}
	HAL_FLASH_Lock();
 800136e:	f001 fe19 	bl	8002fa4 <HAL_FLASH_Lock>
	return flashstatus;
 8001372:	f04f 0800 	mov.w	r8, #0
}
 8001376:	4640      	mov	r0, r8
 8001378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800137c:	200001e0 	.word	0x200001e0

08001380 <FLA_VerifyBlock>:
//! \brief      Verifies a flash page and compares to the data buffer
//! \details    Verifies a flash page and compares to the data buffer
//! \param[in] 	uint8_t NewAdress (FLA_FACTORYADDRESS or FLA_UPGRADEADDRESS)
//! \param[out]	uint8_t ReturnValue (0 = Failed, 1 = success)
uint8_t FLA_VerifyBlock (uint32_t NewAddress)
{
 8001380:	b530      	push	{r4, r5, lr}
	uint32_t FlashContent;
	uint8_t ReturnValue = 1;

	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 8001382:	4910      	ldr	r1, [pc, #64]	; (80013c4 <FLA_VerifyBlock+0x44>)
 8001384:	4c10      	ldr	r4, [pc, #64]	; (80013c8 <FLA_VerifyBlock+0x48>)
{
 8001386:	2500      	movs	r5, #0
 8001388:	e004      	b.n	8001394 <FLA_VerifyBlock+0x14>
	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 800138a:	3504      	adds	r5, #4
 800138c:	3104      	adds	r1, #4
 800138e:	3404      	adds	r4, #4
 8001390:	2d40      	cmp	r5, #64	; 0x40
 8001392:	d012      	beq.n	80013ba <FLA_VerifyBlock+0x3a>
	{
		FlashContent = (*(__IO uint32_t*) (NewAddress + i));
 8001394:	5943      	ldr	r3, [r0, r5]
		ImageDataVerify[i] = (uint8_t) FlashContent;
 8001396:	700b      	strb	r3, [r1, #0]
		ImageDataVerify[i+1] = (uint8_t) (FlashContent >> 8);
 8001398:	0a1a      	lsrs	r2, r3, #8
 800139a:	704a      	strb	r2, [r1, #1]
		ImageDataVerify[i+2] = (uint8_t) (FlashContent >> 16);
 800139c:	0c1a      	lsrs	r2, r3, #16
 800139e:	708a      	strb	r2, [r1, #2]
		ImageDataVerify[i+3] = (uint8_t) (FlashContent >> 24);
 80013a0:	0e1b      	lsrs	r3, r3, #24
 80013a2:	70cb      	strb	r3, [r1, #3]
		for (uint8_t j=0; j<4; j++)
 80013a4:	1f23      	subs	r3, r4, #4
		ImageDataVerify[i+3] = (uint8_t) (FlashContent >> 24);
 80013a6:	460a      	mov	r2, r1
		{
			if (ImageData[i+j] != ImageDataVerify[i+j])
 80013a8:	f813 eb01 	ldrb.w	lr, [r3], #1
 80013ac:	f812 cb01 	ldrb.w	ip, [r2], #1
 80013b0:	45e6      	cmp	lr, ip
 80013b2:	d104      	bne.n	80013be <FLA_VerifyBlock+0x3e>
		for (uint8_t j=0; j<4; j++)
 80013b4:	42a3      	cmp	r3, r4
 80013b6:	d1f7      	bne.n	80013a8 <FLA_VerifyBlock+0x28>
 80013b8:	e7e7      	b.n	800138a <FLA_VerifyBlock+0xa>
				ReturnValue = 0;
				return ReturnValue;
			}
		}
	}
	return ReturnValue;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e000      	b.n	80013c0 <FLA_VerifyBlock+0x40>
				return ReturnValue;
 80013be:	2000      	movs	r0, #0
}
 80013c0:	bd30      	pop	{r4, r5, pc}
 80013c2:	bf00      	nop
 80013c4:	20000220 	.word	0x20000220
 80013c8:	200001e4 	.word	0x200001e4

080013cc <FLA_HandleSendPartitionBlock>:
{
 80013cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013d0:	b088      	sub	sp, #32
	HAL_IWDG_Refresh(&hiwdg);
 80013d2:	486e      	ldr	r0, [pc, #440]	; (800158c <FLA_HandleSendPartitionBlock+0x1c0>)
 80013d4:	f002 f91b 	bl	800360e <HAL_IWDG_Refresh>
	if (SER_GetValue (12,4)> FLA_LENGTH / FLA_BLOCKSIZE)
 80013d8:	2104      	movs	r1, #4
 80013da:	200c      	movs	r0, #12
 80013dc:	f000 ff04 	bl	80021e8 <SER_GetValue>
 80013e0:	f5b0 6f9c 	cmp.w	r0, #1248	; 0x4e0
 80013e4:	d814      	bhi.n	8001410 <FLA_HandleSendPartitionBlock+0x44>
	if (SER_GetValue (16,4) == 0)
 80013e6:	2104      	movs	r1, #4
 80013e8:	2010      	movs	r0, #16
 80013ea:	f000 fefd 	bl	80021e8 <SER_GetValue>
 80013ee:	bb10      	cbnz	r0, 8001436 <FLA_HandleSendPartitionBlock+0x6a>
		if ((SER_GetValue (20 ,2) != 0x00) || (SER_GetValue (22 ,2) != 0x80) || (SER_GetValue (24 ,2) != 0x00) || (SER_GetValue (26 ,2) != 0x20))
 80013f0:	2102      	movs	r1, #2
 80013f2:	2014      	movs	r0, #20
 80013f4:	f000 fef8 	bl	80021e8 <SER_GetValue>
 80013f8:	b928      	cbnz	r0, 8001406 <FLA_HandleSendPartitionBlock+0x3a>
 80013fa:	2102      	movs	r1, #2
 80013fc:	2016      	movs	r0, #22
 80013fe:	f000 fef3 	bl	80021e8 <SER_GetValue>
 8001402:	2880      	cmp	r0, #128	; 0x80
 8001404:	d00b      	beq.n	800141e <FLA_HandleSendPartitionBlock+0x52>
			SER_SendReturnMessage (10,MStatImageCorrupt);
 8001406:	211f      	movs	r1, #31
 8001408:	200a      	movs	r0, #10
 800140a:	f000 fe93 	bl	8002134 <SER_SendReturnMessage>
			return;
 800140e:	e003      	b.n	8001418 <FLA_HandleSendPartitionBlock+0x4c>
		SER_SendReturnMessage (10,MStatImageTooBig);
 8001410:	211e      	movs	r1, #30
 8001412:	200a      	movs	r0, #10
 8001414:	f000 fe8e 	bl	8002134 <SER_SendReturnMessage>
}
 8001418:	b008      	add	sp, #32
 800141a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((SER_GetValue (20 ,2) != 0x00) || (SER_GetValue (22 ,2) != 0x80) || (SER_GetValue (24 ,2) != 0x00) || (SER_GetValue (26 ,2) != 0x20))
 800141e:	2102      	movs	r1, #2
 8001420:	2018      	movs	r0, #24
 8001422:	f000 fee1 	bl	80021e8 <SER_GetValue>
 8001426:	2800      	cmp	r0, #0
 8001428:	d1ed      	bne.n	8001406 <FLA_HandleSendPartitionBlock+0x3a>
 800142a:	2102      	movs	r1, #2
 800142c:	201a      	movs	r0, #26
 800142e:	f000 fedb 	bl	80021e8 <SER_GetValue>
 8001432:	2820      	cmp	r0, #32
 8001434:	d1e7      	bne.n	8001406 <FLA_HandleSendPartitionBlock+0x3a>
	FLA[pUpdate].NrOfBlocks = SER_GetValue (12,4);
 8001436:	2104      	movs	r1, #4
 8001438:	200c      	movs	r0, #12
 800143a:	f000 fed5 	bl	80021e8 <SER_GetValue>
 800143e:	4601      	mov	r1, r0
 8001440:	4c53      	ldr	r4, [pc, #332]	; (8001590 <FLA_HandleSendPartitionBlock+0x1c4>)
 8001442:	8420      	strh	r0, [r4, #32]
	EEP_WriteEEPROM(FLA_UPGRADENROFBLOCKS, FLA[pUpdate].NrOfBlocks);
 8001444:	2024      	movs	r0, #36	; 0x24
 8001446:	f7ff fe95 	bl	8001174 <EEP_WriteEEPROM>
	NrOfBlocks = FLA[pUpdate].NrOfBlocks;
 800144a:	f8b4 8020 	ldrh.w	r8, [r4, #32]
	CurrentBlockOld = FLA[pUpdate].LastBlock;
 800144e:	8be2      	ldrh	r2, [r4, #30]
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <FLA_HandleSendPartitionBlock+0x1c8>)
 8001452:	801a      	strh	r2, [r3, #0]
	FLA[pUpdate].LastBlock = SER_GetValue (16,4);
 8001454:	2104      	movs	r1, #4
 8001456:	2010      	movs	r0, #16
 8001458:	f000 fec6 	bl	80021e8 <SER_GetValue>
 800145c:	4601      	mov	r1, r0
 800145e:	83e0      	strh	r0, [r4, #30]
	EEP_WriteEEPROM(FLA_UPGRADELASTBLOCK, FLA[pUpdate].LastBlock);
 8001460:	2023      	movs	r0, #35	; 0x23
 8001462:	f7ff fe87 	bl	8001174 <EEP_WriteEEPROM>
	CurrentBlock = FLA[pUpdate].LastBlock;
 8001466:	8be4      	ldrh	r4, [r4, #30]
	if (CurrentBlock == 0) //First data received
 8001468:	b164      	cbz	r4, 8001484 <FLA_HandleSendPartitionBlock+0xb8>
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 800146a:	45a0      	cmp	r8, r4
 800146c:	d905      	bls.n	800147a <FLA_HandleSendPartitionBlock+0xae>
 800146e:	46a1      	mov	r9, r4
 8001470:	4b48      	ldr	r3, [pc, #288]	; (8001594 <FLA_HandleSendPartitionBlock+0x1c8>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	1ae2      	subs	r2, r4, r3
 8001476:	2a01      	cmp	r2, #1
 8001478:	dd30      	ble.n	80014dc <FLA_HandleSendPartitionBlock+0x110>
		SER_SendReturnMessage (10,MStatBlockNrError);
 800147a:	2114      	movs	r1, #20
 800147c:	200a      	movs	r0, #10
 800147e:	f000 fe59 	bl	8002134 <SER_SendReturnMessage>
 8001482:	e7c9      	b.n	8001418 <FLA_HandleSendPartitionBlock+0x4c>
		FLA_SetVersion(pUpdate, SER_GetValue(8,4));
 8001484:	2104      	movs	r1, #4
 8001486:	2008      	movs	r0, #8
 8001488:	f000 feae 	bl	80021e8 <SER_GetValue>
 800148c:	4601      	mov	r1, r0
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fef4 	bl	800127c <FLA_SetVersion>
		FLA_SetStatus(pUpdate, fUPDATING);
 8001494:	2102      	movs	r1, #2
 8001496:	4608      	mov	r0, r1
 8001498:	f7ff fe88 	bl	80011ac <FLA_SetStatus>
		memset(ImageData, 0, FLA_BLOCKSIZE); //Clear the array to zero before filling the block
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	2100      	movs	r1, #0
 80014a0:	483d      	ldr	r0, [pc, #244]	; (8001598 <FLA_HandleSendPartitionBlock+0x1cc>)
 80014a2:	f003 fbd5 	bl	8004c50 <memset>
		CurrentBlockOld = 0;
 80014a6:	2000      	movs	r0, #0
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <FLA_HandleSendPartitionBlock+0x1c8>)
 80014aa:	8018      	strh	r0, [r3, #0]
		LED_Set(STANDBYLED, BLINKING, 0, 0, 255, 50, 1000, 1000, 5, 0, 0); //Blinking BLUE
 80014ac:	9006      	str	r0, [sp, #24]
 80014ae:	9005      	str	r0, [sp, #20]
 80014b0:	2305      	movs	r3, #5
 80014b2:	9304      	str	r3, [sp, #16]
 80014b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b8:	9303      	str	r3, [sp, #12]
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2332      	movs	r3, #50	; 0x32
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	23ff      	movs	r3, #255	; 0xff
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	4603      	mov	r3, r0
 80014c6:	4602      	mov	r2, r0
 80014c8:	2102      	movs	r1, #2
 80014ca:	f000 f917 	bl	80016fc <LED_Set>
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 80014ce:	f1b8 0f00 	cmp.w	r8, #0
 80014d2:	d0d2      	beq.n	800147a <FLA_HandleSendPartitionBlock+0xae>
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <FLA_HandleSendPartitionBlock+0x1c8>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f04f 0900 	mov.w	r9, #0
 80014dc:	429c      	cmp	r4, r3
 80014de:	d3cc      	bcc.n	800147a <FLA_HandleSendPartitionBlock+0xae>
		CurrentBlockOld = CurrentBlock;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <FLA_HandleSendPartitionBlock+0x1c8>)
 80014e2:	801c      	strh	r4, [r3, #0]
		if (FLA[pUpdate].Version == SER_GetValue(8,4))
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <FLA_HandleSendPartitionBlock+0x1c4>)
 80014e6:	699d      	ldr	r5, [r3, #24]
 80014e8:	2104      	movs	r1, #4
 80014ea:	2008      	movs	r0, #8
 80014ec:	f000 fe7c 	bl	80021e8 <SER_GetValue>
 80014f0:	4285      	cmp	r5, r0
 80014f2:	d146      	bne.n	8001582 <FLA_HandleSendPartitionBlock+0x1b6>
		CurrentAddress = FLA_UPGRADEADDRESS + (CurrentBlock * FLA_BLOCKSIZE);
 80014f4:	f509 1a00 	add.w	sl, r9, #2097152	; 0x200000
 80014f8:	f50a 6ac8 	add.w	sl, sl, #1600	; 0x640
 80014fc:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
			if (CurrentBlock % FLA_BLOCKSPERPAGE == 0)//new page
 8001500:	f014 0f03 	tst.w	r4, #3
 8001504:	d01a      	beq.n	800153c <FLA_HandleSendPartitionBlock+0x170>
			for (uint8_t i = 0; i<FLA_BLOCKSIZE; i++)
 8001506:	4e24      	ldr	r6, [pc, #144]	; (8001598 <FLA_HandleSendPartitionBlock+0x1cc>)
 8001508:	1e75      	subs	r5, r6, #1
 800150a:	363f      	adds	r6, #63	; 0x3f
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 800150c:	2414      	movs	r4, #20
				ImageData[i] = SER_GetValue (20 + (i * 2),2);
 800150e:	2702      	movs	r7, #2
 8001510:	4639      	mov	r1, r7
 8001512:	4620      	mov	r0, r4
 8001514:	f000 fe68 	bl	80021e8 <SER_GetValue>
 8001518:	f805 0f01 	strb.w	r0, [r5, #1]!
			for (uint8_t i = 0; i<FLA_BLOCKSIZE; i++)
 800151c:	3402      	adds	r4, #2
 800151e:	b2e4      	uxtb	r4, r4
 8001520:	42b5      	cmp	r5, r6
 8001522:	d1f5      	bne.n	8001510 <FLA_HandleSendPartitionBlock+0x144>
			FLA_WriteBlock (CurrentAddress);
 8001524:	4650      	mov	r0, sl
 8001526:	f7ff fee9 	bl	80012fc <FLA_WriteBlock>
			if (FLA_VerifyBlock (CurrentAddress) == 0)
 800152a:	4650      	mov	r0, sl
 800152c:	f7ff ff28 	bl	8001380 <FLA_VerifyBlock>
 8001530:	b998      	cbnz	r0, 800155a <FLA_HandleSendPartitionBlock+0x18e>
				SER_SendReturnMessage (10,MStatVerifyError);
 8001532:	211b      	movs	r1, #27
 8001534:	200a      	movs	r0, #10
 8001536:	f000 fdfd 	bl	8002134 <SER_SendReturnMessage>
				return;
 800153a:	e76d      	b.n	8001418 <FLA_HandleSendPartitionBlock+0x4c>
				if (FLA_ErasePage (CurrentAddress) != HAL_OK)
 800153c:	4650      	mov	r0, sl
 800153e:	f7ff fec9 	bl	80012d4 <FLA_ErasePage>
 8001542:	b928      	cbnz	r0, 8001550 <FLA_HandleSendPartitionBlock+0x184>
				memset(ImageData, 0, FLA_BLOCKSIZE);
 8001544:	2240      	movs	r2, #64	; 0x40
 8001546:	2100      	movs	r1, #0
 8001548:	4813      	ldr	r0, [pc, #76]	; (8001598 <FLA_HandleSendPartitionBlock+0x1cc>)
 800154a:	f003 fb81 	bl	8004c50 <memset>
 800154e:	e7da      	b.n	8001506 <FLA_HandleSendPartitionBlock+0x13a>
					SER_SendReturnMessage (10,MStatErasePageError);
 8001550:	211c      	movs	r1, #28
 8001552:	200a      	movs	r0, #10
 8001554:	f000 fdee 	bl	8002134 <SER_SendReturnMessage>
					return;
 8001558:	e75e      	b.n	8001418 <FLA_HandleSendPartitionBlock+0x4c>
				DataLength = SER_FillBuffer(10, Message.MType);
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <FLA_HandleSendPartitionBlock+0x1d0>)
 800155c:	78d9      	ldrb	r1, [r3, #3]
 800155e:	200a      	movs	r0, #10
 8001560:	f000 fed8 	bl	8002314 <SER_FillBuffer>
				SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 8001564:	300a      	adds	r0, #10
 8001566:	2101      	movs	r1, #1
 8001568:	b2c0      	uxtb	r0, r0
 800156a:	f000 fde3 	bl	8002134 <SER_SendReturnMessage>
				if (CurrentBlock == NrOfBlocks - 1) //Last block
 800156e:	f108 38ff 	add.w	r8, r8, #4294967295
 8001572:	45c8      	cmp	r8, r9
 8001574:	f47f af50 	bne.w	8001418 <FLA_HandleSendPartitionBlock+0x4c>
					FLA_SetStatus(pUpdate, fVALID);
 8001578:	2101      	movs	r1, #1
 800157a:	2002      	movs	r0, #2
 800157c:	f7ff fe16 	bl	80011ac <FLA_SetStatus>
 8001580:	e74a      	b.n	8001418 <FLA_HandleSendPartitionBlock+0x4c>
			SER_SendReturnMessage (10,MStatWrongVersion);
 8001582:	2119      	movs	r1, #25
 8001584:	200a      	movs	r0, #10
 8001586:	f000 fdd5 	bl	8002134 <SER_SendReturnMessage>
		if (FLA[pUpdate].Version == SER_GetValue(8,4))
 800158a:	e745      	b.n	8001418 <FLA_HandleSendPartitionBlock+0x4c>
 800158c:	2000002c 	.word	0x2000002c
 8001590:	200001b0 	.word	0x200001b0
 8001594:	200001ac 	.word	0x200001ac
 8001598:	200001e0 	.word	0x200001e0
 800159c:	20000534 	.word	0x20000534

080015a0 <FLA_ReadBlock>:
//! \details    Reads a flash page into Imagedata
//! \param[in] 	uint8_t NewAdress (FLA_FACTORYADDRESS or FLA_UPGRADEADDRESS)
void FLA_ReadBlock (uint32_t NewAddress)
{
	uint32_t FlashContent;
	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <FLA_ReadBlock+0x24>)
 80015a2:	f102 0c40 	add.w	ip, r2, #64	; 0x40
{
 80015a6:	4613      	mov	r3, r2
 80015a8:	1a80      	subs	r0, r0, r2
	{
		FlashContent = (*(__IO uint32_t*) (NewAddress + i));
 80015aa:	58c2      	ldr	r2, [r0, r3]
		ImageData[i] = (uint8_t) FlashContent;
 80015ac:	701a      	strb	r2, [r3, #0]
		ImageData[i+1] = (uint8_t) (FlashContent >> 8);
 80015ae:	0a11      	lsrs	r1, r2, #8
 80015b0:	7059      	strb	r1, [r3, #1]
		ImageData[i+2] = (uint8_t) (FlashContent >> 16);
 80015b2:	0c11      	lsrs	r1, r2, #16
 80015b4:	7099      	strb	r1, [r3, #2]
		ImageData[i+3] = (uint8_t) (FlashContent >> 24);
 80015b6:	0e12      	lsrs	r2, r2, #24
 80015b8:	70da      	strb	r2, [r3, #3]
	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 80015ba:	3304      	adds	r3, #4
 80015bc:	4563      	cmp	r3, ip
 80015be:	d1f4      	bne.n	80015aa <FLA_ReadBlock+0xa>
	}
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200001e0 	.word	0x200001e0

080015c8 <FLA_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initalizes the flash module
//! \details    Initalizes the flash module
//! \params		None
void FLA_Init (void)
{
 80015c8:	b510      	push	{r4, lr}
	//Read flash information from EEPROM
#ifdef BOOTLOADER
	FLA_SetVersion(pBootloader,WRK_GetSoftwareVersion());
 80015ca:	f7ff fa96 	bl	8000afa <WRK_GetSoftwareVersion>
 80015ce:	4601      	mov	r1, r0
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fe53 	bl	800127c <FLA_SetVersion>
	FLA[pApplication].Version = EEP_ReadEEPROM(FLA_APPLICATIONVERSION);
 80015d6:	201e      	movs	r0, #30
 80015d8:	f7ff fde1 	bl	800119e <EEP_ReadEEPROM>
 80015dc:	4c11      	ldr	r4, [pc, #68]	; (8001624 <FLA_Init+0x5c>)
 80015de:	60e0      	str	r0, [r4, #12]
	FLA[pApplication].Status = EEP_ReadEEPROM(FLA_APPLICATIONSTATUS);
 80015e0:	201f      	movs	r0, #31
 80015e2:	f7ff fddc 	bl	800119e <EEP_ReadEEPROM>
 80015e6:	7420      	strb	r0, [r4, #16]
	FLA[pApplication].Status = fVALID;
	//Write current application version
	EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
	EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
#endif
	FLA[pRollBack].Version = EEP_ReadEEPROM(FLA_ROLLBACKVERSION);
 80015e8:	2020      	movs	r0, #32
 80015ea:	f7ff fdd8 	bl	800119e <EEP_ReadEEPROM>
 80015ee:	6260      	str	r0, [r4, #36]	; 0x24
	FLA[pRollBack].Status = EEP_ReadEEPROM(FLA_ROLLBACKSTATUS);
 80015f0:	2021      	movs	r0, #33	; 0x21
 80015f2:	f7ff fdd4 	bl	800119e <EEP_ReadEEPROM>
 80015f6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	FLA[pUpdate].Version = EEP_ReadEEPROM(FLA_UPGRADEVERSION);
 80015fa:	2022      	movs	r0, #34	; 0x22
 80015fc:	f7ff fdcf 	bl	800119e <EEP_ReadEEPROM>
 8001600:	61a0      	str	r0, [r4, #24]
	FLA[pUpdate].LastBlock = EEP_ReadEEPROM(FLA_UPGRADELASTBLOCK);
 8001602:	2023      	movs	r0, #35	; 0x23
 8001604:	f7ff fdcb 	bl	800119e <EEP_ReadEEPROM>
 8001608:	83e0      	strh	r0, [r4, #30]
	FLA[pUpdate].NrOfBlocks = EEP_ReadEEPROM(FLA_UPGRADENROFBLOCKS);
 800160a:	2024      	movs	r0, #36	; 0x24
 800160c:	f7ff fdc7 	bl	800119e <EEP_ReadEEPROM>
 8001610:	8420      	strh	r0, [r4, #32]
	FLA[pUpdate].Status = EEP_ReadEEPROM(FLA_UPGRADESTATUS);
 8001612:	2025      	movs	r0, #37	; 0x25
 8001614:	f7ff fdc3 	bl	800119e <EEP_ReadEEPROM>
 8001618:	7720      	strb	r0, [r4, #28]
	FLA[pRollBack].NrOfBlocks = FLA_LENGTH / FLA_BLOCKSIZE;
 800161a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800161e:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
 8001620:	bd10      	pop	{r4, pc}
 8001622:	bf00      	nop
 8001624:	200001b0 	.word	0x200001b0

08001628 <LED_StorePrevious>:
//! \LED container
stcLed LED[WS2812_NUM];
stcLed LEDPREVIOUS[WS2812_NUM];

void LED_StorePrevious (uint8_t newLED)
{
 8001628:	b570      	push	{r4, r5, r6, lr}
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
	LastLED = newLED;
	if (newLED == WATERTANKLEDS) LastLED ++;
 800162a:	4686      	mov	lr, r0
 800162c:	2801      	cmp	r0, #1
 800162e:	bf38      	it	cc
 8001630:	f04f 0e01 	movcc.w	lr, #1
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
	{
		LEDPREVIOUS[i].BreathInterval = LED[i].BreathInterval;
 8001634:	4d15      	ldr	r5, [pc, #84]	; (800168c <LED_StorePrevious+0x64>)
 8001636:	4c16      	ldr	r4, [pc, #88]	; (8001690 <LED_StorePrevious+0x68>)
 8001638:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
 800163c:	eb05 0cc2 	add.w	ip, r5, r2, lsl #3
 8001640:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 8001644:	f893 6028 	ldrb.w	r6, [r3, #40]	; 0x28
 8001648:	f88c 6028 	strb.w	r6, [ip, #40]	; 0x28
		LEDPREVIOUS[i].FadeInInterval = LED[i].FadeInInterval;
 800164c:	f893 602c 	ldrb.w	r6, [r3, #44]	; 0x2c
 8001650:	f88c 602c 	strb.w	r6, [ip, #44]	; 0x2c
		LEDPREVIOUS[i].FadeOutInterval = LED[i].FadeOutInterval;
 8001654:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 8001658:	f88c 6030 	strb.w	r6, [ip, #48]	; 0x30
		LEDPREVIOUS[i].BlinkTimeOn = LED[i].BlinkTimeOn;
 800165c:	8b1e      	ldrh	r6, [r3, #24]
 800165e:	f8ac 6018 	strh.w	r6, [ip, #24]
		LEDPREVIOUS[i].BlinkTimeOff = LED[i].BlinkTimeOff;
 8001662:	8c1e      	ldrh	r6, [r3, #32]
 8001664:	f8ac 6020 	strh.w	r6, [ip, #32]
		LEDPREVIOUS[i].Effect = LED[i].Effect;
 8001668:	7c1b      	ldrb	r3, [r3, #16]
 800166a:	f88c 3010 	strb.w	r3, [ip, #16]
		LEDPREVIOUS[i].Color = LED[i].Color;
 800166e:	f854 3032 	ldr.w	r3, [r4, r2, lsl #3]
 8001672:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
		LEDPREVIOUS[i].Intensity = LED[i].Intensity;
 8001676:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 800167a:	7d1b      	ldrb	r3, [r3, #20]
 800167c:	f88c 3014 	strb.w	r3, [ip, #20]
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 8001680:	3001      	adds	r0, #1
 8001682:	b2c0      	uxtb	r0, r0
 8001684:	4570      	cmp	r0, lr
 8001686:	d9d7      	bls.n	8001638 <LED_StorePrevious+0x10>
	}
}
 8001688:	bd70      	pop	{r4, r5, r6, pc}
 800168a:	bf00      	nop
 800168c:	200003c8 	.word	0x200003c8
 8001690:	20000260 	.word	0x20000260

08001694 <LED_RestorePrevious>:
void LED_RestorePrevious (uint8_t newLED)
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
	LastLED = newLED;
	if (newLED == WATERTANKLEDS) LastLED ++;
 8001696:	4606      	mov	r6, r0
 8001698:	2801      	cmp	r0, #1
 800169a:	bf38      	it	cc
 800169c:	2601      	movcc	r6, #1
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
	{
		LED[i].BreathInterval = LEDPREVIOUS[i].BreathInterval;
 800169e:	4c15      	ldr	r4, [pc, #84]	; (80016f4 <LED_RestorePrevious+0x60>)
 80016a0:	4d15      	ldr	r5, [pc, #84]	; (80016f8 <LED_RestorePrevious+0x64>)
		LED[i].BlinkTimeOn = LEDPREVIOUS[i].BlinkTimeOn;
		LED[i].BlinkTimeOff = LEDPREVIOUS[i].BlinkTimeOff;
		LED[i].Effect = LEDPREVIOUS[i].Effect;
		LED[i].Color = LEDPREVIOUS[i].Color;
		LED[i].Intensity = LEDPREVIOUS[i].Intensity;
		LED[i].TimeCycleCounter = 0;
 80016a2:	f04f 0e00 	mov.w	lr, #0
		LED[i].BreathInterval = LEDPREVIOUS[i].BreathInterval;
 80016a6:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80016aa:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80016ae:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 80016b2:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 80016b6:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
		LED[i].FadeInInterval = LEDPREVIOUS[i].FadeInInterval;
 80016ba:	f892 702c 	ldrb.w	r7, [r2, #44]	; 0x2c
 80016be:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
		LED[i].FadeOutInterval = LEDPREVIOUS[i].FadeOutInterval;
 80016c2:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
 80016c6:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
		LED[i].BlinkTimeOn = LEDPREVIOUS[i].BlinkTimeOn;
 80016ca:	8b17      	ldrh	r7, [r2, #24]
 80016cc:	831f      	strh	r7, [r3, #24]
		LED[i].BlinkTimeOff = LEDPREVIOUS[i].BlinkTimeOff;
 80016ce:	8c17      	ldrh	r7, [r2, #32]
 80016d0:	841f      	strh	r7, [r3, #32]
		LED[i].Effect = LEDPREVIOUS[i].Effect;
 80016d2:	7c17      	ldrb	r7, [r2, #16]
 80016d4:	741f      	strb	r7, [r3, #16]
		LED[i].Color = LEDPREVIOUS[i].Color;
 80016d6:	f855 7031 	ldr.w	r7, [r5, r1, lsl #3]
 80016da:	f844 7031 	str.w	r7, [r4, r1, lsl #3]
		LED[i].Intensity = LEDPREVIOUS[i].Intensity;
 80016de:	7d12      	ldrb	r2, [r2, #20]
 80016e0:	751a      	strb	r2, [r3, #20]
		LED[i].TimeCycleCounter = 0;
 80016e2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80016e6:	f8a3 e036 	strh.w	lr, [r3, #54]	; 0x36
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 80016ea:	3001      	adds	r0, #1
 80016ec:	b2c0      	uxtb	r0, r0
 80016ee:	42b0      	cmp	r0, r6
 80016f0:	d9d9      	bls.n	80016a6 <LED_RestorePrevious+0x12>
	}
}
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	20000260 	.word	0x20000260
 80016f8:	200003c8 	.word	0x200003c8

080016fc <LED_Set>:
//! \param[in]  uint8_t newLED, enuLedEffect newEffect, uint8_t newR
//! \param[in]  uint8_t newG, uint8_t newB, uint8_t newIntensity
//! \param[in]  uint16_t newBlinkTimeOn, uint16_t newBlinkTimeOff, uint8_t newStepTime
//! \param[in]  uint16_t newTimeCycles, uint8_t newRestorePrevious
void LED_Set (uint8_t newLED, uint8_t newEffect, uint8_t newR, uint8_t newG, uint8_t newB, uint8_t newIntensity, uint16_t newBlinkTimeOn, uint16_t newBlinkTimeOff, uint8_t newStepTime, uint16_t newTimeCycles, uint8_t newRestorePrevious)
{
 80016fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001700:	b085      	sub	sp, #20
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
 8001706:	4616      	mov	r6, r2
 8001708:	469a      	mov	sl, r3
 800170a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8001714:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8001724:	f8bd b04c 	ldrh.w	fp, [sp, #76]	; 0x4c
 8001728:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800172c:	9303      	str	r3, [sp, #12]
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
	LastLED = newLED;
	if (newLED == WATERTANKLEDS) LastLED ++;
 800172e:	4607      	mov	r7, r0
 8001730:	2801      	cmp	r0, #1
 8001732:	bf38      	it	cc
 8001734:	2701      	movcc	r7, #1
	//Store previous setting if previous setting needs to be restored and TimeCycles > 0 and Effect != FADEIN or FADEOUT or SWITCHEDOFF
	//Restore previous is only done for SWITCHEDON, BLINKING and BREATHING. Others will be ignored.
	if ((newTimeCycles > 0) &&(newRestorePrevious) && (newEffect != FADEIN) && (newEffect != FADEOUT) && (newEffect != SWITCHEDOFF))
 8001736:	f1bb 0f00 	cmp.w	fp, #0
 800173a:	d008      	beq.n	800174e <LED_Set+0x52>
 800173c:	b123      	cbz	r3, 8001748 <LED_Set+0x4c>
 800173e:	1f0b      	subs	r3, r1, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d900      	bls.n	8001748 <LED_Set+0x4c>
 8001746:	b999      	cbnz	r1, 8001770 <LED_Set+0x74>
	{
		LED_StorePrevious (newLED);
	}

	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 8001748:	42a7      	cmp	r7, r4
 800174a:	f0c0 808a 	bcc.w	8001862 <LED_Set+0x166>
			LED[i].BlinkTimeOffNext = newBlinkTimeOff;
		}
		LED[i].EffectNext = newEffect;
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
		{
			LED[i].ColorNext = newR << 16 | newG << 8 | newB;
 800174e:	9900      	ldr	r1, [sp, #0]
 8001750:	ea41 230a 	orr.w	r3, r1, sl, lsl #8
 8001754:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001758:	9300      	str	r3, [sp, #0]
			LED[i].RestorePreviousNext = newRestorePrevious;
			LED[i].Counter = 0;
		}
		else
		{
			LED[i].TimeCyclesNext = 0;
 800175a:	4b43      	ldr	r3, [pc, #268]	; (8001868 <LED_Set+0x16c>)
 800175c:	2200      	movs	r2, #0
		if (((newEffect == SWITCHEDON) || (newEffect == BLINKING) || (newEffect == BREATHING)) && (newTimeCycles > 0))
 800175e:	f105 3cff 	add.w	ip, r5, #4294967295
 8001762:	fa5f fc8c 	uxtb.w	ip, ip
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 8001766:	440e      	add	r6, r1
 8001768:	4456      	add	r6, sl
 800176a:	46be      	mov	lr, r7
 800176c:	46b2      	mov	sl, r6
 800176e:	e044      	b.n	80017fa <LED_Set+0xfe>
		LED_StorePrevious (newLED);
 8001770:	f7ff ff5a 	bl	8001628 <LED_StorePrevious>
 8001774:	e7e8      	b.n	8001748 <LED_Set+0x4c>
		if (newEffect == BREATHING) LED[i].BreathIntervalNext = newStepTime;
 8001776:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800177a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800177e:	f8a1 802a 	strh.w	r8, [r1, #42]	; 0x2a
		if (newEffect == BLINKING)
 8001782:	2d02      	cmp	r5, #2
 8001784:	d143      	bne.n	800180e <LED_Set+0x112>
			LED[i].BlinkTimeOnNext = newBlinkTimeOn;
 8001786:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800178a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800178e:	9901      	ldr	r1, [sp, #4]
 8001790:	61c1      	str	r1, [r0, #28]
			LED[i].BlinkTimeOffNext = newBlinkTimeOff;
 8001792:	9e02      	ldr	r6, [sp, #8]
 8001794:	6246      	str	r6, [r0, #36]	; 0x24
		LED[i].EffectNext = newEffect;
 8001796:	4621      	mov	r1, r4
 8001798:	8245      	strh	r5, [r0, #18]
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 800179a:	f1ba 0f00 	cmp.w	sl, #0
 800179e:	d042      	beq.n	8001826 <LED_Set+0x12a>
 80017a0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80017a4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80017a8:	9f00      	ldr	r7, [sp, #0]
 80017aa:	6087      	str	r7, [r0, #8]
 80017ac:	2700      	movs	r7, #0
 80017ae:	60c7      	str	r7, [r0, #12]
		LED[i].IntensityNext = newIntensity;
 80017b0:	f8a0 9016 	strh.w	r9, [r0, #22]
		if (((newEffect == SWITCHEDON) || (newEffect == BLINKING) || (newEffect == BREATHING)) && (newTimeCycles > 0))
 80017b4:	e047      	b.n	8001846 <LED_Set+0x14a>
		if (newEffect == FADEOUT) LED[i].FadeOutIntervalNext= newStepTime;
 80017b6:	2d05      	cmp	r5, #5
 80017b8:	d1e3      	bne.n	8001782 <LED_Set+0x86>
 80017ba:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80017be:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80017c2:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
		LED[i].EffectNext = newEffect;
 80017c6:	4621      	mov	r1, r4
 80017c8:	8245      	strh	r5, [r0, #18]
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 80017ca:	f1ba 0f00 	cmp.w	sl, #0
 80017ce:	d02a      	beq.n	8001826 <LED_Set+0x12a>
 80017d0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80017d4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80017d8:	9f00      	ldr	r7, [sp, #0]
 80017da:	6087      	str	r7, [r0, #8]
 80017dc:	2700      	movs	r7, #0
 80017de:	60c7      	str	r7, [r0, #12]
		LED[i].IntensityNext = newIntensity;
 80017e0:	f8a0 9016 	strh.w	r9, [r0, #22]
			LED[i].TimeCyclesNext = 0;
 80017e4:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 80017e8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80017ec:	6402      	str	r2, [r0, #64]	; 0x40
			LED[i].RestorePreviousNext = 0;
 80017ee:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 80017f2:	3401      	adds	r4, #1
 80017f4:	b2e4      	uxtb	r4, r4
 80017f6:	45a6      	cmp	lr, r4
 80017f8:	d333      	bcc.n	8001862 <LED_Set+0x166>
		if (newEffect == BREATHING) LED[i].BreathIntervalNext = newStepTime;
 80017fa:	2d03      	cmp	r5, #3
 80017fc:	d0bb      	beq.n	8001776 <LED_Set+0x7a>
		if (newEffect == FADEIN) LED[i].FadeInIntervalNext= newStepTime;
 80017fe:	2d04      	cmp	r5, #4
 8001800:	d1d9      	bne.n	80017b6 <LED_Set+0xba>
 8001802:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8001806:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800180a:	f8a1 802e 	strh.w	r8, [r1, #46]	; 0x2e
		LED[i].EffectNext = newEffect;
 800180e:	4621      	mov	r1, r4
 8001810:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8001814:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001818:	8245      	strh	r5, [r0, #18]
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 800181a:	f1ba 0f00 	cmp.w	sl, #0
 800181e:	d002      	beq.n	8001826 <LED_Set+0x12a>
			LED[i].ColorNext = newR << 16 | newG << 8 | newB;
 8001820:	9f00      	ldr	r7, [sp, #0]
 8001822:	2600      	movs	r6, #0
 8001824:	e004      	b.n	8001830 <LED_Set+0x134>
			LED[i].ColorNext = LED[i].Color;
 8001826:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 800182a:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
 800182e:	4616      	mov	r6, r2
 8001830:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 8001834:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001838:	6087      	str	r7, [r0, #8]
 800183a:	60c6      	str	r6, [r0, #12]
		LED[i].IntensityNext = newIntensity;
 800183c:	f8a0 9016 	strh.w	r9, [r0, #22]
		if (((newEffect == SWITCHEDON) || (newEffect == BLINKING) || (newEffect == BREATHING)) && (newTimeCycles > 0))
 8001840:	f1bc 0f02 	cmp.w	ip, #2
 8001844:	d8ce      	bhi.n	80017e4 <LED_Set+0xe8>
 8001846:	f1bb 0f00 	cmp.w	fp, #0
 800184a:	d0cb      	beq.n	80017e4 <LED_Set+0xe8>
			LED[i].TimeCyclesNext = newTimeCycles;
 800184c:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 8001850:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001854:	f8c0 b040 	str.w	fp, [r0, #64]	; 0x40
			LED[i].RestorePreviousNext = newRestorePrevious;
 8001858:	9e03      	ldr	r6, [sp, #12]
 800185a:	f8a0 6046 	strh.w	r6, [r0, #70]	; 0x46
			LED[i].Counter = 0;
 800185e:	8682      	strh	r2, [r0, #52]	; 0x34
 8001860:	e7c7      	b.n	80017f2 <LED_Set+0xf6>
		}
	}
}
 8001862:	b005      	add	sp, #20
 8001864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001868:	20000260 	.word	0x20000260

0800186c <LED_SetNext>:
void LED_SetNext (uint8_t newLED)
{
 800186c:	b430      	push	{r4, r5}
	if (LED[newLED].EffectNext == -1)
 800186e:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <LED_SetNext+0x104>)
 8001874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001878:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 800187c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001880:	d017      	beq.n	80018b2 <LED_SetNext+0x46>
		LED[newLED].FadeOutIntervalNext = -1;
		LED[newLED].TimeCyclesNext = -1;
		LED[newLED].RestorePreviousNext = -1;
		return;
	}
	else if (LED[newLED].EffectNext  == BREATHING)
 8001882:	2903      	cmp	r1, #3
 8001884:	d02a      	beq.n	80018dc <LED_SetNext+0x70>
	{
		LED[newLED].BreathInterval = LED[newLED].BreathIntervalNext;
		LED[newLED].BreathIntervalNext = -1;
	}
	else if (LED[newLED].EffectNext == FADEIN)
 8001886:	2904      	cmp	r1, #4
 8001888:	d058      	beq.n	800193c <LED_SetNext+0xd0>
	{
		LED[newLED].FadeInInterval = LED[newLED].FadeInIntervalNext;
		LED[newLED].FadeInIntervalNext = -1;
	}
	else if (LED[newLED].EffectNext == FADEOUT)
 800188a:	2905      	cmp	r1, #5
 800188c:	d062      	beq.n	8001954 <LED_SetNext+0xe8>
	{
		LED[newLED].FadeOutInterval = LED[newLED].FadeOutIntervalNext;
		LED[newLED].FadeOutIntervalNext = -1;
		LED[newLED].FadeIntensity = 255;
	}
	else if (LED[newLED].EffectNext == BLINKING)
 800188e:	2902      	cmp	r1, #2
 8001890:	d12f      	bne.n	80018f2 <LED_SetNext+0x86>
	{
		LED[newLED].BlinkTimeOn = LED[newLED].BlinkTimeOnNext;
 8001892:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001896:	4a36      	ldr	r2, [pc, #216]	; (8001970 <LED_SetNext+0x104>)
 8001898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	831a      	strh	r2, [r3, #24]
		LED[newLED].BlinkTimeOnNext = -1;
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	61da      	str	r2, [r3, #28]
		LED[newLED].BlinkTimeOff = LED[newLED].BlinkTimeOffNext ;
 80018a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80018a8:	841c      	strh	r4, [r3, #32]
		LED[newLED].BlinkTimeOffNext = -1;
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
		LED[newLED].Counter = 0;
 80018ac:	2200      	movs	r2, #0
 80018ae:	869a      	strh	r2, [r3, #52]	; 0x34
 80018b0:	e01f      	b.n	80018f2 <LED_SetNext+0x86>
		LED[newLED].ColorNext = -1;
 80018b2:	492f      	ldr	r1, [pc, #188]	; (8001970 <LED_SetNext+0x104>)
 80018b4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80018b8:	f04f 34ff 	mov.w	r4, #4294967295
 80018bc:	f04f 35ff 	mov.w	r5, #4294967295
 80018c0:	e9c3 4502 	strd	r4, r5, [r3, #8]
		LED[newLED].IntensityNext = -1;
 80018c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c8:	82da      	strh	r2, [r3, #22]
		LED[newLED].BlinkTimeOnNext = -1;
 80018ca:	61dc      	str	r4, [r3, #28]
		LED[newLED].BlinkTimeOffNext = -1;
 80018cc:	625c      	str	r4, [r3, #36]	; 0x24
		LED[newLED].BreathIntervalNext = -1;
 80018ce:	855a      	strh	r2, [r3, #42]	; 0x2a
		LED[newLED].FadeInIntervalNext = -1;
 80018d0:	85da      	strh	r2, [r3, #46]	; 0x2e
		LED[newLED].FadeOutIntervalNext = -1;
 80018d2:	865a      	strh	r2, [r3, #50]	; 0x32
		LED[newLED].TimeCyclesNext = -1;
 80018d4:	641c      	str	r4, [r3, #64]	; 0x40
		LED[newLED].RestorePreviousNext = -1;
 80018d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		return;
 80018da:	e02d      	b.n	8001938 <LED_SetNext+0xcc>
		LED[newLED].BreathInterval = LED[newLED].BreathIntervalNext;
 80018dc:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80018e0:	4a23      	ldr	r2, [pc, #140]	; (8001970 <LED_SetNext+0x104>)
 80018e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80018e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80018e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		LED[newLED].BreathIntervalNext = -1;
 80018ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f0:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
	LED[newLED].Effect = LED[newLED].EffectNext ;
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <LED_SetNext+0x104>)
 80018f4:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
 80018f8:	eb02 03cc 	add.w	r3, r2, ip, lsl #3
 80018fc:	7419      	strb	r1, [r3, #16]
	LED[newLED].EffectNext = -1;
 80018fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001902:	8259      	strh	r1, [r3, #18]
	LED[newLED].Color = LED[newLED].ColorNext ;
 8001904:	689c      	ldr	r4, [r3, #8]
 8001906:	f842 403c 	str.w	r4, [r2, ip, lsl #3]
	LED[newLED].ColorNext = -1;
 800190a:	f04f 34ff 	mov.w	r4, #4294967295
 800190e:	f04f 35ff 	mov.w	r5, #4294967295
 8001912:	e9c3 4502 	strd	r4, r5, [r3, #8]
	LED[newLED].Intensity = LED[newLED].IntensityNext ;
 8001916:	8adc      	ldrh	r4, [r3, #22]
 8001918:	751c      	strb	r4, [r3, #20]
	LED[newLED].IntensityNext = -1;
 800191a:	82d9      	strh	r1, [r3, #22]
	LED[newLED].TimeCycles = LED[newLED].TimeCyclesNext;
 800191c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800191e:	879c      	strh	r4, [r3, #60]	; 0x3c
	LED[newLED].TimeCyclesNext = -1;
 8001920:	f04f 34ff 	mov.w	r4, #4294967295
 8001924:	641c      	str	r4, [r3, #64]	; 0x40
	LED[newLED].RestorePrevious = LED[newLED].RestorePreviousNext;
 8001926:	f8b3 c046 	ldrh.w	ip, [r3, #70]	; 0x46
 800192a:	f883 c044 	strb.w	ip, [r3, #68]	; 0x44
	LED[newLED].RestorePreviousNext = -1;
 800192e:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
	LED[newLED].TimeCycleCounter = 0;
 8001932:	4618      	mov	r0, r3
 8001934:	2300      	movs	r3, #0
 8001936:	86c3      	strh	r3, [r0, #54]	; 0x36
}
 8001938:	bc30      	pop	{r4, r5}
 800193a:	4770      	bx	lr
		LED[newLED].FadeInInterval = LED[newLED].FadeInIntervalNext;
 800193c:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LED_SetNext+0x104>)
 8001942:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001946:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001948:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		LED[newLED].FadeInIntervalNext = -1;
 800194c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001950:	85da      	strh	r2, [r3, #46]	; 0x2e
 8001952:	e7ce      	b.n	80018f2 <LED_SetNext+0x86>
		LED[newLED].FadeOutInterval = LED[newLED].FadeOutIntervalNext;
 8001954:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <LED_SetNext+0x104>)
 800195a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800195e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		LED[newLED].FadeOutIntervalNext = -1;
 8001964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001968:	865a      	strh	r2, [r3, #50]	; 0x32
		LED[newLED].FadeIntensity = 255;
 800196a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800196e:	e7c0      	b.n	80018f2 <LED_SetNext+0x86>
 8001970:	20000260 	.word	0x20000260

08001974 <LED_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the LED module
//! \details    Set all LED off
//! \params     None
void LED_Init(void)
{
 8001974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WS2812_CloseAll();
 8001978:	f001 f83a 	bl	80029f0 <WS2812_CloseAll>
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <LED_Init+0x68>)
 800197e:	f503 78b4 	add.w	r8, r3, #360	; 0x168
	{
		LED[i].Effect = SWITCHEDOFF;
 8001982:	2100      	movs	r1, #0
		LED[i].EffectNext = NONE;
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
		LED[i].Color = 0;
		LED[i].ColorNext = -1;
 8001988:	f04f 34ff 	mov.w	r4, #4294967295
 800198c:	f04f 35ff 	mov.w	r5, #4294967295
		LED[i].Intensity = 0;
		LED[i].IntensityNext = -1;
		LED[i].BlinkTimeOn = 500;
 8001990:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
		LED[i].BlinkTimeOnNext = -1;
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
		LED[i].BlinkTimeOff = 500;
		LED[i].BlinkTimeOffNext = -1;
		LED[i].BreathInterval = 5;
 8001998:	2705      	movs	r7, #5
		LED[i].BreathIntervalNext = -1;
		LED[i].FadeInInterval = 10;
 800199a:	260a      	movs	r6, #10
		LED[i].FadeInIntervalNext = -1;
		LED[i].FadeOutInterval = 20;
 800199c:	f04f 0e14 	mov.w	lr, #20
		LED[i].Effect = SWITCHEDOFF;
 80019a0:	7419      	strb	r1, [r3, #16]
		LED[i].EffectNext = NONE;
 80019a2:	825a      	strh	r2, [r3, #18]
		LED[i].Color = 0;
 80019a4:	6019      	str	r1, [r3, #0]
		LED[i].ColorNext = -1;
 80019a6:	e9c3 4502 	strd	r4, r5, [r3, #8]
		LED[i].Intensity = 0;
 80019aa:	7519      	strb	r1, [r3, #20]
		LED[i].IntensityNext = -1;
 80019ac:	82da      	strh	r2, [r3, #22]
		LED[i].BlinkTimeOn = 500;
 80019ae:	f8a3 c018 	strh.w	ip, [r3, #24]
		LED[i].BlinkTimeOnNext = -1;
 80019b2:	61d8      	str	r0, [r3, #28]
		LED[i].BlinkTimeOff = 500;
 80019b4:	f8a3 c020 	strh.w	ip, [r3, #32]
		LED[i].BlinkTimeOffNext = -1;
 80019b8:	6258      	str	r0, [r3, #36]	; 0x24
		LED[i].BreathInterval = 5;
 80019ba:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
		LED[i].BreathIntervalNext = -1;
 80019be:	855a      	strh	r2, [r3, #42]	; 0x2a
		LED[i].FadeInInterval = 10;
 80019c0:	f883 602c 	strb.w	r6, [r3, #44]	; 0x2c
		LED[i].FadeInIntervalNext = -1;
 80019c4:	85da      	strh	r2, [r3, #46]	; 0x2e
		LED[i].FadeOutInterval = 20;
 80019c6:	f883 e030 	strb.w	lr, [r3, #48]	; 0x30
		LED[i].FadeOutIntervalNext = -1;
 80019ca:	865a      	strh	r2, [r3, #50]	; 0x32
		LED[i].TimeCycles = 0;
 80019cc:	8799      	strh	r1, [r3, #60]	; 0x3c
		LED[i].RestorePrevious = 0;
 80019ce:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 80019d2:	3348      	adds	r3, #72	; 0x48
 80019d4:	4543      	cmp	r3, r8
 80019d6:	d1e3      	bne.n	80019a0 <LED_Init+0x2c>
	}
}
 80019d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019dc:	20000260 	.word	0x20000260

080019e0 <LED_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the LED control
//! \details    Calculates the intensity of the LED and sets if needed
//! \params		None
void LED_Handle (void)
{
 80019e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t NeedsUpdate = 0;


	for (uint8_t i = 0; i < WS2812_NUM;i++)
 80019e4:	2500      	movs	r5, #0
	{
		NeedsUpdate= 0;
		if (i==1) i=2;
		if (LED[i].Color != LED[i].ColorOld)
 80019e6:	4eae      	ldr	r6, [pc, #696]	; (8001ca0 <LED_Handle+0x2c0>)
			{
				if (LED[i].FadeIntensity > 0)
				{
					LED[i].FadeIntensity --;
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 80019e8:	4fae      	ldr	r7, [pc, #696]	; (8001ca4 <LED_Handle+0x2c4>)
									if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 80019ea:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8001ca8 <LED_Handle+0x2c8>
 80019ee:	e09a      	b.n	8001b26 <LED_Handle+0x146>
		else if (LED[i].Intensity != LED[i].IntensityOld)
 80019f0:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80019f4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80019f8:	7d1a      	ldrb	r2, [r3, #20]
 80019fa:	7d5b      	ldrb	r3, [r3, #21]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d006      	beq.n	8001a0e <LED_Handle+0x2e>
			LED[i].IntensityOld = LED[i].Intensity;
 8001a00:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001a04:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a08:	755a      	strb	r2, [r3, #21]
			NeedsUpdate = 1;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	e09c      	b.n	8001b48 <LED_Handle+0x168>
		else if (LED[i].Effect != LED[i].EffectOld)
 8001a0e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001a12:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a16:	7c1a      	ldrb	r2, [r3, #16]
 8001a18:	7c5b      	ldrb	r3, [r3, #17]
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d016      	beq.n	8001a4c <LED_Handle+0x6c>
			LED[i].Counter = 0;
 8001a1e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001a22:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a26:	2100      	movs	r1, #0
 8001a28:	8699      	strh	r1, [r3, #52]	; 0x34
			LED[i].BreathIntensity = 0;
 8001a2a:	8719      	strh	r1, [r3, #56]	; 0x38
			if (LED[i].Effect == FADEOUT) LED[i].FadeIntensity = 255;
 8001a2c:	2a05      	cmp	r2, #5
			LED[i].FadeIntensity = 0;
 8001a2e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001a32:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
			if (LED[i].Effect == FADEOUT) LED[i].FadeIntensity = 255;
 8001a36:	bf08      	it	eq
 8001a38:	21ff      	moveq	r1, #255	; 0xff
 8001a3a:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
			LED[i].EffectOld = LED[i].Effect;
 8001a3e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001a42:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a46:	745a      	strb	r2, [r3, #17]
			NeedsUpdate = 1;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	e07d      	b.n	8001b48 <LED_Handle+0x168>
		NeedsUpdate= 0;
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	e07b      	b.n	8001b48 <LED_Handle+0x168>
			if (LED[i].Counter >= LED[i].BlinkTimeOn + LED[i].BlinkTimeOff) //Needs to switch off
 8001a50:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001a54:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a58:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001a5a:	8b18      	ldrh	r0, [r3, #24]
 8001a5c:	8c1b      	ldrh	r3, [r3, #32]
 8001a5e:	4403      	add	r3, r0
 8001a60:	4299      	cmp	r1, r3
 8001a62:	f2c0 8090 	blt.w	8001b86 <LED_Handle+0x1a6>
				if (LED[i].TimeCycles > 0)
 8001a66:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001a6a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a6e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001a70:	b303      	cbz	r3, 8001ab4 <LED_Handle+0xd4>
					if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 8001a72:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001a76:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001a7a:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d319      	bcc.n	8001ab4 <LED_Handle+0xd4>
						if (LED[i].RestorePrevious)
 8001a80:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001a84:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a8c:	b163      	cbz	r3, 8001aa8 <LED_Handle+0xc8>
							if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 8001a8e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001a92:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8001a96:	7c1b      	ldrb	r3, [r3, #16]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d909      	bls.n	8001ab4 <LED_Handle+0xd4>
							LED_RestorePrevious(i);
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f7ff fdf7 	bl	8001694 <LED_RestorePrevious>
 8001aa6:	e005      	b.n	8001ab4 <LED_Handle+0xd4>
							LED[i].Effect = SWITCHEDOFF;
 8001aa8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001aac:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	741a      	strb	r2, [r3, #16]
				LED[i].Counter = 0;
 8001ab4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ab8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001abc:	2200      	movs	r2, #0
 8001abe:	869a      	strh	r2, [r3, #52]	; 0x34
				NeedsUpdate = 1;
 8001ac0:	2201      	movs	r2, #1
			LED[i].Counter ++;
 8001ac2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ac6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001aca:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001acc:	3101      	adds	r1, #1
 8001ace:	8699      	strh	r1, [r3, #52]	; 0x34
		if (NeedsUpdate)
 8001ad0:	b30a      	cbz	r2, 8001b16 <LED_Handle+0x136>
			if (LED[i].Effect == SWITCHEDOFF)
 8001ad2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ad6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001ada:	7c1b      	ldrb	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 820c 	bne.w	8001efa <LED_Handle+0x51a>
				if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 8001ae2:	2d00      	cmp	r5, #0
 8001ae4:	f000 8203 	beq.w	8001eee <LED_Handle+0x50e>
				WS2812_Set(i, LED[i].Color,0);
 8001ae8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001aec:	2200      	movs	r2, #0
 8001aee:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 8001af2:	4628      	mov	r0, r5
 8001af4:	f000 feb4 	bl	8002860 <WS2812_Set>
				}
			}
			WS2812_Show();
 8001af8:	f000 ff6e 	bl	80029d8 <WS2812_Show>
			LED[i].EffectOld = LED[i].Effect;
 8001afc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001b00:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001b04:	7c1a      	ldrb	r2, [r3, #16]
 8001b06:	745a      	strb	r2, [r3, #17]
			LED[i].IntensityOld = LED[i].Intensity;
 8001b08:	7d1a      	ldrb	r2, [r3, #20]
 8001b0a:	755a      	strb	r2, [r3, #21]
			LED[i].ColorOld = LED[i].Color;
 8001b0c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8001b10:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
 8001b14:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < WS2812_NUM;i++)
 8001b16:	3501      	adds	r5, #1
 8001b18:	b2ed      	uxtb	r5, r5
 8001b1a:	2d04      	cmp	r5, #4
 8001b1c:	f200 82f2 	bhi.w	8002104 <LED_Handle+0x724>
		if (i==1) i=2;
 8001b20:	2d01      	cmp	r5, #1
 8001b22:	bf08      	it	eq
 8001b24:	2502      	moveq	r5, #2
		if (LED[i].Color != LED[i].ColorOld)
 8001b26:	462c      	mov	r4, r5
 8001b28:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001b2c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8001b30:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 8001b34:	6852      	ldr	r2, [r2, #4]
 8001b36:	4293      	cmp	r3, r2
 8001b38:	f43f af5a 	beq.w	80019f0 <LED_Handle+0x10>
			LED[i].ColorOld = LED[i].Color;
 8001b3c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001b40:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001b44:	6053      	str	r3, [r2, #4]
			NeedsUpdate = 1;
 8001b46:	2201      	movs	r2, #1
		if (LED[i].Effect == BLINKING)
 8001b48:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001b4c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001b50:	7c1b      	ldrb	r3, [r3, #16]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	f43f af7c 	beq.w	8001a50 <LED_Handle+0x70>
		else if (LED[i].Effect == BREATHING)
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d050      	beq.n	8001bfe <LED_Handle+0x21e>
		else if (LED[i].Effect == FADEIN)
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	f000 80a5 	beq.w	8001cac <LED_Handle+0x2cc>
		else if (LED[i].Effect == FADEOUT)
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	f000 80f7 	beq.w	8001d56 <LED_Handle+0x376>
		else if (LED[i].Effect == SWITCHEDOFF)
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 8142 	bne.w	8001df2 <LED_Handle+0x412>
			if (LED[i].EffectNext > SWITCHEDOFF)
 8001b6e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001b72:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001b76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f300 812f 	bgt.w	8001dde <LED_Handle+0x3fe>
		if (NeedsUpdate)
 8001b80:	2a00      	cmp	r2, #0
 8001b82:	d1ae      	bne.n	8001ae2 <LED_Handle+0x102>
 8001b84:	e7c7      	b.n	8001b16 <LED_Handle+0x136>
			else if (LED[i].Counter == LED[i].BlinkTimeOn) //Needs to switch on
 8001b86:	4281      	cmp	r1, r0
 8001b88:	d003      	beq.n	8001b92 <LED_Handle+0x1b2>
				NeedsUpdate = 1;
 8001b8a:	2900      	cmp	r1, #0
 8001b8c:	bf08      	it	eq
 8001b8e:	2201      	moveq	r2, #1
 8001b90:	e797      	b.n	8001ac2 <LED_Handle+0xe2>
				if (LED[i].TimeCycles > 0)
 8001b92:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001b96:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001b9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b9c:	b36b      	cbz	r3, 8001bfa <LED_Handle+0x21a>
					if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 8001b9e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001ba2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001ba6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d81e      	bhi.n	8001bea <LED_Handle+0x20a>
						if (LED[i].RestorePrevious)
 8001bac:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001bb0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bb8:	b17b      	cbz	r3, 8001bda <LED_Handle+0x1fa>
							if  ((LEDPREVIOUS[i].Effect == BREATHING) || (LEDPREVIOUS[i].Effect == FADEIN))
 8001bba:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001bbe:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8001bc2:	7c1b      	ldrb	r3, [r3, #16]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d901      	bls.n	8001bd0 <LED_Handle+0x1f0>
				NeedsUpdate = 1;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	e778      	b.n	8001ac2 <LED_Handle+0xe2>
								LED_RestorePrevious(i);
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f7ff fd5f 	bl	8001694 <LED_RestorePrevious>
				NeedsUpdate = 1;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	e773      	b.n	8001ac2 <LED_Handle+0xe2>
							LED[i].Effect = SWITCHEDOFF;
 8001bda:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001bde:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001be2:	2200      	movs	r2, #0
 8001be4:	741a      	strb	r2, [r3, #16]
				NeedsUpdate = 1;
 8001be6:	2201      	movs	r2, #1
 8001be8:	e76b      	b.n	8001ac2 <LED_Handle+0xe2>
						LED[i].TimeCycleCounter ++;
 8001bea:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001bee:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001bf2:	3201      	adds	r2, #1
 8001bf4:	86da      	strh	r2, [r3, #54]	; 0x36
				NeedsUpdate = 1;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	e763      	b.n	8001ac2 <LED_Handle+0xe2>
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	e761      	b.n	8001ac2 <LED_Handle+0xe2>
			LED[i].Counter ++;
 8001bfe:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8001c02:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8001c06:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	868b      	strh	r3, [r1, #52]	; 0x34
			if (LED[i].Counter >= LED[i].BreathInterval)
 8001c0e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8001c12:	4299      	cmp	r1, r3
 8001c14:	f200 826e 	bhi.w	80020f4 <LED_Handle+0x714>
				LED[i].Counter = 0;
 8001c18:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001c1c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001c20:	2200      	movs	r2, #0
 8001c22:	869a      	strh	r2, [r3, #52]	; 0x34
				LED[i].BreathIntensity ++;
 8001c24:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001c28:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001c2c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	8713      	strh	r3, [r2, #56]	; 0x38
				if (LED[i].BreathIntensity > 510)
 8001c34:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001c38:	f240 8114 	bls.w	8001e64 <LED_Handle+0x484>
					if ((LED[i].EffectNext != SWITCHEDON) && (LED[i].EffectNext != FADEOUT))
 8001c3c:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d002      	beq.n	8001c4e <LED_Handle+0x26e>
						LED_SetNext (i);
 8001c48:	4628      	mov	r0, r5
 8001c4a:	f7ff fe0f 	bl	800186c <LED_SetNext>
					LED[i].BreathIntensity = 0;
 8001c4e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001c52:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001c56:	2200      	movs	r2, #0
 8001c58:	871a      	strh	r2, [r3, #56]	; 0x38
					if (LED[i].TimeCycles > 0)
 8001c5a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 81ed 	beq.w	800203c <LED_Handle+0x65c>
						if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 8001c62:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001c66:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001c6a:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	f200 81ac 	bhi.w	8001fca <LED_Handle+0x5ea>
							if (LED[i].RestorePrevious)
 8001c72:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001c76:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 819c 	beq.w	8001fbc <LED_Handle+0x5dc>
								if  ((LEDPREVIOUS[i].Effect == BREATHING) || (LEDPREVIOUS[i].Effect == FADEIN))
 8001c84:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001c88:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8001c8c:	7c1b      	ldrb	r3, [r3, #16]
 8001c8e:	3b03      	subs	r3, #3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f200 81d2 	bhi.w	800203c <LED_Handle+0x65c>
									LED_RestorePrevious(i);
 8001c98:	4628      	mov	r0, r5
 8001c9a:	f7ff fcfb 	bl	8001694 <LED_RestorePrevious>
 8001c9e:	e0e1      	b.n	8001e64 <LED_Handle+0x484>
 8001ca0:	20000260 	.word	0x20000260
 8001ca4:	80808081 	.word	0x80808081
 8001ca8:	200003c8 	.word	0x200003c8
			if (LED[i].FadeIntensity < 255)
 8001cac:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001cb0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001cb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cb8:	2bff      	cmp	r3, #255	; 0xff
 8001cba:	d035      	beq.n	8001d28 <LED_Handle+0x348>
				LED[i].Counter ++;
 8001cbc:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8001cc0:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8001cc4:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	868b      	strh	r3, [r1, #52]	; 0x34
				if (LED[i].Counter >= LED[i].FadeInInterval)
 8001ccc:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8001cd0:	4299      	cmp	r1, r3
 8001cd2:	f200 820b 	bhi.w	80020ec <LED_Handle+0x70c>
					LED[i].Counter = 0;
 8001cd6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001cda:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	869a      	strh	r2, [r3, #52]	; 0x34
				if (LED[i].FadeIntensity < 255)
 8001ce2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ce6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001cea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
					LED[i].FadeIntensity ++;
 8001cee:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001cf2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 8001cfc:	2d00      	cmp	r5, #0
 8001cfe:	f000 81d9 	beq.w	80020b4 <LED_Handle+0x6d4>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 8001d02:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001d06:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8001d0a:	7d0a      	ldrb	r2, [r1, #20]
 8001d0c:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 8001d10:	fb01 f202 	mul.w	r2, r1, r2
 8001d14:	fba7 1202 	umull	r1, r2, r7, r2
 8001d18:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8001d1c:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 8001d20:	4628      	mov	r0, r5
 8001d22:	f000 fd9d 	bl	8002860 <WS2812_Set>
 8001d26:	e6e7      	b.n	8001af8 <LED_Handle+0x118>
				LED[i].Effect = SWITCHEDON;
 8001d28:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001d2c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001d30:	2101      	movs	r1, #1
 8001d32:	7419      	strb	r1, [r3, #16]
		if (NeedsUpdate)
 8001d34:	2a00      	cmp	r2, #0
 8001d36:	f43f aeee 	beq.w	8001b16 <LED_Handle+0x136>
				if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 8001d3a:	2d00      	cmp	r5, #0
 8001d3c:	f000 80fe 	beq.w	8001f3c <LED_Handle+0x55c>
				WS2812_Set(i, LED[i].Color,LED[i].Intensity);
 8001d40:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001d44:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8001d48:	7d12      	ldrb	r2, [r2, #20]
 8001d4a:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f000 fd86 	bl	8002860 <WS2812_Set>
 8001d54:	e6d0      	b.n	8001af8 <LED_Handle+0x118>
			if (LED[i].FadeIntensity > 0)
 8001d56:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001d5a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001d5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d62:	b3ab      	cbz	r3, 8001dd0 <LED_Handle+0x3f0>
				LED[i].Counter ++;
 8001d64:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8001d68:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8001d6c:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	868b      	strh	r3, [r1, #52]	; 0x34
				if (LED[i].Counter >= LED[i].FadeOutInterval)
 8001d74:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001d78:	4299      	cmp	r1, r3
 8001d7a:	f200 81bf 	bhi.w	80020fc <LED_Handle+0x71c>
					LED[i].Counter = 0;
 8001d7e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001d82:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001d86:	2200      	movs	r2, #0
 8001d88:	869a      	strh	r2, [r3, #52]	; 0x34
				if (LED[i].FadeIntensity > 0)
 8001d8a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001d8e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001d92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
					LED[i].FadeIntensity --;
 8001d96:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001d9a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 8001da4:	2d00      	cmp	r5, #0
 8001da6:	f000 8193 	beq.w	80020d0 <LED_Handle+0x6f0>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 8001daa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001dae:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8001db2:	7d0a      	ldrb	r2, [r1, #20]
 8001db4:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 8001db8:	fb01 f202 	mul.w	r2, r1, r2
 8001dbc:	fba7 1202 	umull	r1, r2, r7, r2
 8001dc0:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8001dc4:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f000 fd49 	bl	8002860 <WS2812_Set>
 8001dce:	e693      	b.n	8001af8 <LED_Handle+0x118>
				LED[i].Effect = SWITCHEDOFF;
 8001dd0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001dd4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001dd8:	2100      	movs	r1, #0
 8001dda:	7419      	strb	r1, [r3, #16]
 8001ddc:	e6d0      	b.n	8001b80 <LED_Handle+0x1a0>
				LED_SetNext(i);
 8001dde:	4628      	mov	r0, r5
 8001de0:	f7ff fd44 	bl	800186c <LED_SetNext>
				LED[i].BreathIntensity = 0; // Make sure breathing is starting with breathing up
 8001de4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001de8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001dec:	2200      	movs	r2, #0
 8001dee:	871a      	strh	r2, [r3, #56]	; 0x38
		if (NeedsUpdate)
 8001df0:	e66f      	b.n	8001ad2 <LED_Handle+0xf2>
		else if (LED[i].Effect == SWITCHEDON)
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d003      	beq.n	8001dfe <LED_Handle+0x41e>
		if (NeedsUpdate)
 8001df6:	2a00      	cmp	r2, #0
 8001df8:	f43f ae8d 	beq.w	8001b16 <LED_Handle+0x136>
 8001dfc:	e67c      	b.n	8001af8 <LED_Handle+0x118>
			if (LED[i].TimeCycles > 0)
 8001dfe:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e02:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001e06:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05e      	beq.n	8001eca <LED_Handle+0x4ea>
				if (LED[i].TimeCycleCounter > LED[i].TimeCycles)
 8001e0c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8001e10:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8001e14:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8001e16:	428b      	cmp	r3, r1
 8001e18:	d250      	bcs.n	8001ebc <LED_Handle+0x4dc>
					if (LED[i].RestorePrevious)
 8001e1a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e1e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d13b      	bne.n	8001ea2 <LED_Handle+0x4c2>
						LED[i].Effect = SWITCHEDOFF;
 8001e2a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e2e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001e32:	2200      	movs	r2, #0
 8001e34:	741a      	strb	r2, [r3, #16]
			if (LED[i].EffectNext > SWITCHEDOFF)
 8001e36:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	f77f ae51 	ble.w	8001ae2 <LED_Handle+0x102>
				LED_SetNext(i);
 8001e40:	4628      	mov	r0, r5
 8001e42:	f7ff fd13 	bl	800186c <LED_SetNext>
				if (LED[i].Effect == BREATHING)
 8001e46:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e4a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001e4e:	7c1b      	ldrb	r3, [r3, #16]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	f47f ae3e 	bne.w	8001ad2 <LED_Handle+0xf2>
					LED[i].BreathIntensity = 255; //Make sure breathing starts with breathing down
 8001e56:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e5a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
				LED[i].BreathIntensity ++;
 8001e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e62:	871a      	strh	r2, [r3, #56]	; 0x38
				if (LED[i].BreathIntensity <= 255)
 8001e64:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e68:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001e6c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	f240 80b2 	bls.w	8001fd8 <LED_Handle+0x5f8>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));//Also other water tank LED
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	f000 8105 	beq.w	8002084 <LED_Handle+0x6a4>
					WS2812_Set(i, LED[i].Color,(uint8_t) ((uint32_t) LED[i].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));
 8001e7a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e7e:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8001e82:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
 8001e84:	f5c2 72ff 	rsb	r2, r2, #510	; 0x1fe
 8001e88:	7d09      	ldrb	r1, [r1, #20]
 8001e8a:	fb01 f202 	mul.w	r2, r1, r2
 8001e8e:	fba7 1202 	umull	r1, r2, r7, r2
 8001e92:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8001e96:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f000 fce0 	bl	8002860 <WS2812_Set>
 8001ea0:	e62a      	b.n	8001af8 <LED_Handle+0x118>
						LED_RestorePrevious(i);
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	f7ff fbf6 	bl	8001694 <LED_RestorePrevious>
			if (LED[i].EffectNext > SWITCHEDOFF)
 8001ea8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001eac:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001eb0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f77f ae0c 	ble.w	8001ad2 <LED_Handle+0xf2>
 8001eba:	e7c1      	b.n	8001e40 <LED_Handle+0x460>
					LED[i].TimeCycleCounter ++;
 8001ebc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ec0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001ec4:	3101      	adds	r1, #1
 8001ec6:	86d9      	strh	r1, [r3, #54]	; 0x36
 8001ec8:	e005      	b.n	8001ed6 <LED_Handle+0x4f6>
				LED[i].TimeCycleCounter = 0;
 8001eca:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ece:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	86d9      	strh	r1, [r3, #54]	; 0x36
			if (LED[i].EffectNext > SWITCHEDOFF)
 8001ed6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001eda:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001ede:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	dcac      	bgt.n	8001e40 <LED_Handle+0x460>
		if (NeedsUpdate)
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	f47f af27 	bne.w	8001d3a <LED_Handle+0x35a>
 8001eec:	e613      	b.n	8001b16 <LED_Handle+0x136>
				if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 8001eee:	2200      	movs	r2, #0
 8001ef0:	6831      	ldr	r1, [r6, #0]
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 fcb4 	bl	8002860 <WS2812_Set>
 8001ef8:	e5f6      	b.n	8001ae8 <LED_Handle+0x108>
			else if (LED[i].Effect == SWITCHEDON)
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f43f af1d 	beq.w	8001d3a <LED_Handle+0x35a>
			else if (LED[i].Effect == BLINKING)
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d149      	bne.n	8001f98 <LED_Handle+0x5b8>
				if (LED[i].Counter >= LED[i].BlinkTimeOn) //Is on, needs to switch off
 8001f04:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f08:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001f0c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8001f0e:	8b1b      	ldrh	r3, [r3, #24]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d323      	bcc.n	8001f5c <LED_Handle+0x57c>
					if ((LED[i].EffectNext == SWITCHEDON) || (LED[i].EffectNext == FADEOUT))
 8001f14:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f18:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001f1c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d00f      	beq.n	8001f48 <LED_Handle+0x568>
						if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 8001f28:	b195      	cbz	r5, 8001f50 <LED_Handle+0x570>
						WS2812_Set(i, LED[i].Color,0);
 8001f2a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 8001f34:	4628      	mov	r0, r5
 8001f36:	f000 fc93 	bl	8002860 <WS2812_Set>
 8001f3a:	e5dd      	b.n	8001af8 <LED_Handle+0x118>
				if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 8001f3c:	7d32      	ldrb	r2, [r6, #20]
 8001f3e:	6831      	ldr	r1, [r6, #0]
 8001f40:	2001      	movs	r0, #1
 8001f42:	f000 fc8d 	bl	8002860 <WS2812_Set>
 8001f46:	e6fb      	b.n	8001d40 <LED_Handle+0x360>
						LED_SetNext (i);
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f7ff fc8f 	bl	800186c <LED_SetNext>
 8001f4e:	e5d3      	b.n	8001af8 <LED_Handle+0x118>
						if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 8001f50:	2200      	movs	r2, #0
 8001f52:	6831      	ldr	r1, [r6, #0]
 8001f54:	2001      	movs	r0, #1
 8001f56:	f000 fc83 	bl	8002860 <WS2812_Set>
 8001f5a:	e7e6      	b.n	8001f2a <LED_Handle+0x54a>
					if (((LED[i].EffectNext != SWITCHEDON) || (LED[i].EffectNext != FADEOUT)) && (LED[i].EffectNext >=0))
 8001f5c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f60:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001f64:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da0b      	bge.n	8001f84 <LED_Handle+0x5a4>
						if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 8001f6c:	b175      	cbz	r5, 8001f8c <LED_Handle+0x5ac>
						WS2812_Set(i, LED[i].Color,LED[i].Intensity);
 8001f6e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f72:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8001f76:	7d12      	ldrb	r2, [r2, #20]
 8001f78:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f000 fc6f 	bl	8002860 <WS2812_Set>
 8001f82:	e5b9      	b.n	8001af8 <LED_Handle+0x118>
						LED_SetNext (i);
 8001f84:	4628      	mov	r0, r5
 8001f86:	f7ff fc71 	bl	800186c <LED_SetNext>
 8001f8a:	e5b5      	b.n	8001af8 <LED_Handle+0x118>
						if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 8001f8c:	7d32      	ldrb	r2, [r6, #20]
 8001f8e:	6831      	ldr	r1, [r6, #0]
 8001f90:	2001      	movs	r0, #1
 8001f92:	f000 fc65 	bl	8002860 <WS2812_Set>
 8001f96:	e7ea      	b.n	8001f6e <LED_Handle+0x58e>
			else if (LED[i].Effect == BREATHING)
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	f43f ae43 	beq.w	8001c24 <LED_Handle+0x244>
			else if (LED[i].Effect == FADEIN)
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d07e      	beq.n	80020a0 <LED_Handle+0x6c0>
			else if (LED[i].Effect == FADEOUT)
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	f47f ada8 	bne.w	8001af8 <LED_Handle+0x118>
				if (LED[i].FadeIntensity > 0)
 8001fa8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001fac:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001fb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f43f ad9f 	beq.w	8001af8 <LED_Handle+0x118>
 8001fba:	e6ec      	b.n	8001d96 <LED_Handle+0x3b6>
								LED[i].Effect = SWITCHEDOFF;
 8001fbc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001fc0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	741a      	strb	r2, [r3, #16]
 8001fc8:	e038      	b.n	800203c <LED_Handle+0x65c>
							LED[i].TimeCycleCounter ++;
 8001fca:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001fce:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001fd2:	3201      	adds	r2, #1
 8001fd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fd6:	e031      	b.n	800203c <LED_Handle+0x65c>
					if (LED[i].BreathIntensity == 255) //LED at max intensity. If Next is SWITCHED ON or FadeOut, switch to next
 8001fd8:	d130      	bne.n	800203c <LED_Handle+0x65c>
						if (LED[i].TimeCycles > 0)
 8001fda:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001fde:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001fe2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001fe4:	b303      	cbz	r3, 8002028 <LED_Handle+0x648>
							if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 8001fe6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001fea:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001fee:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d319      	bcc.n	8002028 <LED_Handle+0x648>
								if (LED[i].RestorePrevious)
 8001ff4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ff8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002000:	b163      	cbz	r3, 800201c <LED_Handle+0x63c>
									if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 8002002:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002006:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800200a:	7c1b      	ldrb	r3, [r3, #16]
 800200c:	3b03      	subs	r3, #3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d909      	bls.n	8002028 <LED_Handle+0x648>
									LED_RestorePrevious(i);
 8002014:	4628      	mov	r0, r5
 8002016:	f7ff fb3d 	bl	8001694 <LED_RestorePrevious>
 800201a:	e005      	b.n	8002028 <LED_Handle+0x648>
									LED[i].Effect = SWITCHEDOFF;
 800201c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002020:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002024:	2200      	movs	r2, #0
 8002026:	741a      	strb	r2, [r3, #16]
						if ((LED[i].EffectNext == SWITCHEDON) || (LED[i].EffectNext == FADEOUT))
 8002028:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800202c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002030:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	2b01      	cmp	r3, #1
 800203a:	d012      	beq.n	8002062 <LED_Handle+0x682>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].BreathIntensity) / 255);//Also other water tank LED
 800203c:	b1ad      	cbz	r5, 800206a <LED_Handle+0x68a>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].BreathIntensity) / 255);
 800203e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002042:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8002046:	7d0a      	ldrb	r2, [r1, #20]
 8002048:	8f09      	ldrh	r1, [r1, #56]	; 0x38
 800204a:	fb01 f202 	mul.w	r2, r1, r2
 800204e:	fba7 1202 	umull	r1, r2, r7, r2
 8002052:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8002056:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800205a:	4628      	mov	r0, r5
 800205c:	f000 fc00 	bl	8002860 <WS2812_Set>
 8002060:	e54a      	b.n	8001af8 <LED_Handle+0x118>
							LED_SetNext (i);
 8002062:	4628      	mov	r0, r5
 8002064:	f7ff fc02 	bl	800186c <LED_SetNext>
 8002068:	e7e8      	b.n	800203c <LED_Handle+0x65c>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].BreathIntensity) / 255);//Also other water tank LED
 800206a:	7d32      	ldrb	r2, [r6, #20]
 800206c:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 800206e:	fb03 f202 	mul.w	r2, r3, r2
 8002072:	fba7 3202 	umull	r3, r2, r7, r2
 8002076:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800207a:	6831      	ldr	r1, [r6, #0]
 800207c:	2001      	movs	r0, #1
 800207e:	f000 fbef 	bl	8002860 <WS2812_Set>
 8002082:	e7dc      	b.n	800203e <LED_Handle+0x65e>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));//Also other water tank LED
 8002084:	7d32      	ldrb	r2, [r6, #20]
 8002086:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	fba7 3203 	umull	r3, r2, r7, r3
 8002092:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8002096:	6831      	ldr	r1, [r6, #0]
 8002098:	2001      	movs	r0, #1
 800209a:	f000 fbe1 	bl	8002860 <WS2812_Set>
 800209e:	e6ec      	b.n	8001e7a <LED_Handle+0x49a>
				if (LED[i].FadeIntensity < 255)
 80020a0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80020a4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80020a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020ac:	2bff      	cmp	r3, #255	; 0xff
 80020ae:	f43f ad23 	beq.w	8001af8 <LED_Handle+0x118>
 80020b2:	e61c      	b.n	8001cee <LED_Handle+0x30e>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 80020b4:	7d32      	ldrb	r2, [r6, #20]
 80020b6:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
 80020ba:	fb03 f202 	mul.w	r2, r3, r2
 80020be:	fba7 3202 	umull	r3, r2, r7, r2
 80020c2:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 80020c6:	6831      	ldr	r1, [r6, #0]
 80020c8:	2001      	movs	r0, #1
 80020ca:	f000 fbc9 	bl	8002860 <WS2812_Set>
 80020ce:	e618      	b.n	8001d02 <LED_Handle+0x322>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 80020d0:	7d32      	ldrb	r2, [r6, #20]
 80020d2:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
 80020d6:	fb03 f202 	mul.w	r2, r3, r2
 80020da:	fba7 3202 	umull	r3, r2, r7, r2
 80020de:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 80020e2:	6831      	ldr	r1, [r6, #0]
 80020e4:	2001      	movs	r0, #1
 80020e6:	f000 fbbb 	bl	8002860 <WS2812_Set>
 80020ea:	e65e      	b.n	8001daa <LED_Handle+0x3ca>
		if (NeedsUpdate)
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	f43f ad12 	beq.w	8001b16 <LED_Handle+0x136>
 80020f2:	e5f6      	b.n	8001ce2 <LED_Handle+0x302>
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	f43f ad0e 	beq.w	8001b16 <LED_Handle+0x136>
 80020fa:	e593      	b.n	8001c24 <LED_Handle+0x244>
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	f43f ad0a 	beq.w	8001b16 <LED_Handle+0x136>
 8002102:	e642      	b.n	8001d8a <LED_Handle+0x3aa>
		}
	}
}
 8002104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002108 <SER_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initiates the serial unit
//! \details    Sets up Message buffer. Starts UART
//! \param      None
void SER_Init (void)
{
 8002108:	b510      	push	{r4, lr}
	Message.RxBuffer ='\000';
 800210a:	4c07      	ldr	r4, [pc, #28]	; (8002128 <SER_Init+0x20>)
 800210c:	2300      	movs	r3, #0
 800210e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_DMA(&huart3, &Message.RxBuffer, 1);
 8002110:	2201      	movs	r2, #1
 8002112:	4621      	mov	r1, r4
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <SER_Init+0x24>)
 8002116:	f002 fd5b 	bl	8004bd0 <HAL_UART_Receive_DMA>
	//__HAL_UART_ENABLE_IT(&huart3,UART_IT_IDLE);
	HAL_UART_Receive_DMA(&huart2, &Message.RxBuffer, 1);
 800211a:	2201      	movs	r2, #1
 800211c:	4621      	mov	r1, r4
 800211e:	4804      	ldr	r0, [pc, #16]	; (8002130 <SER_Init+0x28>)
 8002120:	f002 fd56 	bl	8004bd0 <HAL_UART_Receive_DMA>
}
 8002124:	bd10      	pop	{r4, pc}
 8002126:	bf00      	nop
 8002128:	20000534 	.word	0x20000534
 800212c:	20000160 	.word	0x20000160
 8002130:	2000011c 	.word	0x2000011c

08002134 <SER_SendReturnMessage>:
//! \brief      Sends a return message to the corresponding UART
//! \details    Calculates CRC, fills the buffer and sends the buffer
//! \param[in]  uint8_t newLength	Length of the message
//! \param[in]  uint8_t newStatus	Status of the return message
void SER_SendReturnMessage (uint8_t newLength, uint8_t newStatus)
{
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4604      	mov	r4, r0
 8002138:	460d      	mov	r5, r1
	uint8_t newCRC;
	//Fill length in data buffer
	Message.RxData[2]=UTL_Dec2Asc(newLength / 16);
 800213a:	0900      	lsrs	r0, r0, #4
 800213c:	f000 fb85 	bl	800284a <UTL_Dec2Asc>
 8002140:	4e23      	ldr	r6, [pc, #140]	; (80021d0 <SER_SendReturnMessage+0x9c>)
 8002142:	72f0      	strb	r0, [r6, #11]
	Message.RxData[3]=UTL_Dec2Asc(newLength % 16);
 8002144:	f004 000f 	and.w	r0, r4, #15
 8002148:	f000 fb7f 	bl	800284a <UTL_Dec2Asc>
 800214c:	7330      	strb	r0, [r6, #12]
	//Fill status in data buffer
	if (newLength > 8)
 800214e:	2c08      	cmp	r4, #8
 8002150:	d825      	bhi.n	800219e <SER_SendReturnMessage+0x6a>
	{
		Message.RxData[8]=UTL_Dec2Asc(newStatus / 16);
		Message.RxData[9]=UTL_Dec2Asc(newStatus % 16);
	}
	//Calculate CRC and store it in data buffer
	newCRC = CalculateCRC8(Message.RxData, newLength);
 8002152:	4e1f      	ldr	r6, [pc, #124]	; (80021d0 <SER_SendReturnMessage+0x9c>)
 8002154:	4621      	mov	r1, r4
 8002156:	f106 0009 	add.w	r0, r6, #9
 800215a:	f7fe ffed 	bl	8001138 <CalculateCRC8>
 800215e:	4605      	mov	r5, r0
	Message.RxData[6]= UTL_Dec2Asc(newCRC / 16);
 8002160:	f3c0 1007 	ubfx	r0, r0, #4, #8
 8002164:	f000 fb71 	bl	800284a <UTL_Dec2Asc>
 8002168:	73f0      	strb	r0, [r6, #15]
	Message.RxData[7]= UTL_Dec2Asc(newCRC % 16);
 800216a:	f005 000f 	and.w	r0, r5, #15
 800216e:	f000 fb6c 	bl	800284a <UTL_Dec2Asc>
 8002172:	7430      	strb	r0, [r6, #16]
	//Send data

	if (UartReturn==2)
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <SER_SendReturnMessage+0xa0>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d01a      	beq.n	80021b2 <SER_SendReturnMessage+0x7e>
		HAL_UART_Transmit(&huart2, Message.RxData,newLength,100);
	else if (UartReturn==3)
 800217c:	2b03      	cmp	r3, #3
 800217e:	d020      	beq.n	80021c2 <SER_SendReturnMessage+0x8e>
		HAL_UART_Transmit(&huart3, Message.RxData,newLength,100);
	//Empty data buffer
	Message.Length = 0;
 8002180:	4813      	ldr	r0, [pc, #76]	; (80021d0 <SER_SendReturnMessage+0x9c>)
 8002182:	2400      	movs	r4, #0
 8002184:	7084      	strb	r4, [r0, #2]
	Message.MType = 0;
 8002186:	70c4      	strb	r4, [r0, #3]
	Message.Counter = 0;
 8002188:	80c4      	strh	r4, [r0, #6]
	Message.CRCValue = 0;
 800218a:	7104      	strb	r4, [r0, #4]
	Message.RxBuffer = 0;
 800218c:	f800 4b09 	strb.w	r4, [r0], #9
	memset(Message.RxData, 0, sizeof(Message.RxData));
 8002190:	22ff      	movs	r2, #255	; 0xff
 8002192:	4621      	mov	r1, r4
 8002194:	f002 fd5c 	bl	8004c50 <memset>
	SER_Busy = 0;
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <SER_SendReturnMessage+0xa4>)
 800219a:	701c      	strb	r4, [r3, #0]
}
 800219c:	bd70      	pop	{r4, r5, r6, pc}
		Message.RxData[8]=UTL_Dec2Asc(newStatus / 16);
 800219e:	0928      	lsrs	r0, r5, #4
 80021a0:	f000 fb53 	bl	800284a <UTL_Dec2Asc>
 80021a4:	7470      	strb	r0, [r6, #17]
		Message.RxData[9]=UTL_Dec2Asc(newStatus % 16);
 80021a6:	f005 000f 	and.w	r0, r5, #15
 80021aa:	f000 fb4e 	bl	800284a <UTL_Dec2Asc>
 80021ae:	74b0      	strb	r0, [r6, #18]
 80021b0:	e7cf      	b.n	8002152 <SER_SendReturnMessage+0x1e>
		HAL_UART_Transmit(&huart2, Message.RxData,newLength,100);
 80021b2:	2364      	movs	r3, #100	; 0x64
 80021b4:	4622      	mov	r2, r4
 80021b6:	f106 0109 	add.w	r1, r6, #9
 80021ba:	4808      	ldr	r0, [pc, #32]	; (80021dc <SER_SendReturnMessage+0xa8>)
 80021bc:	f002 fa07 	bl	80045ce <HAL_UART_Transmit>
 80021c0:	e7de      	b.n	8002180 <SER_SendReturnMessage+0x4c>
		HAL_UART_Transmit(&huart3, Message.RxData,newLength,100);
 80021c2:	2364      	movs	r3, #100	; 0x64
 80021c4:	4622      	mov	r2, r4
 80021c6:	4906      	ldr	r1, [pc, #24]	; (80021e0 <SER_SendReturnMessage+0xac>)
 80021c8:	4806      	ldr	r0, [pc, #24]	; (80021e4 <SER_SendReturnMessage+0xb0>)
 80021ca:	f002 fa00 	bl	80045ce <HAL_UART_Transmit>
 80021ce:	e7d7      	b.n	8002180 <SER_SendReturnMessage+0x4c>
 80021d0:	20000534 	.word	0x20000534
 80021d4:	2000063d 	.word	0x2000063d
 80021d8:	2000063c 	.word	0x2000063c
 80021dc:	2000011c 	.word	0x2000011c
 80021e0:	2000053d 	.word	0x2000053d
 80021e4:	20000160 	.word	0x20000160

080021e8 <SER_GetValue>:
//! \param[in]  uint8_t newUart			Uart number
//! \param[in]  uint8_t newStartByte	Start byte of the hex string
//! \param[in]  uint8_t newLength		Length of the hex string [2 or 4 bytes]
//! \param[out]	uint16_t ReturnValue
uint16_t SER_GetValue (uint8_t newStartByte, uint8_t newLength)
{
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t returnValue = 0;
	if (newLength == 1)
 80021ea:	2901      	cmp	r1, #1
 80021ec:	d005      	beq.n	80021fa <SER_GetValue+0x12>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]);
	else if (newLength == 2)
 80021ee:	2902      	cmp	r1, #2
 80021f0:	d00a      	beq.n	8002208 <SER_GetValue+0x20>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]);
	else if (newLength == 4)//4 bytes
 80021f2:	2904      	cmp	r1, #4
 80021f4:	d015      	beq.n	8002222 <SER_GetValue+0x3a>
	uint16_t returnValue = 0;
 80021f6:	2000      	movs	r0, #0
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 4096 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]) * 256 + UTL_Asc2Dec(Message.RxData[newStartByte + 2]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 3]);
	return returnValue;
}
 80021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]);
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <SER_GetValue+0x6c>)
 80021fc:	4418      	add	r0, r3
 80021fe:	7a40      	ldrb	r0, [r0, #9]
 8002200:	f000 fb0c 	bl	800281c <UTL_Asc2Dec>
 8002204:	b280      	uxth	r0, r0
 8002206:	e7f7      	b.n	80021f8 <SER_GetValue+0x10>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]);
 8002208:	4c12      	ldr	r4, [pc, #72]	; (8002254 <SER_GetValue+0x6c>)
 800220a:	4404      	add	r4, r0
 800220c:	7a60      	ldrb	r0, [r4, #9]
 800220e:	f000 fb05 	bl	800281c <UTL_Asc2Dec>
 8002212:	4605      	mov	r5, r0
 8002214:	7aa0      	ldrb	r0, [r4, #10]
 8002216:	f000 fb01 	bl	800281c <UTL_Asc2Dec>
 800221a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800221e:	b280      	uxth	r0, r0
 8002220:	e7ea      	b.n	80021f8 <SER_GetValue+0x10>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 4096 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]) * 256 + UTL_Asc2Dec(Message.RxData[newStartByte + 2]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 3]);
 8002222:	4c0c      	ldr	r4, [pc, #48]	; (8002254 <SER_GetValue+0x6c>)
 8002224:	4404      	add	r4, r0
 8002226:	7a60      	ldrb	r0, [r4, #9]
 8002228:	f000 faf8 	bl	800281c <UTL_Asc2Dec>
 800222c:	4607      	mov	r7, r0
 800222e:	7aa0      	ldrb	r0, [r4, #10]
 8002230:	f000 faf4 	bl	800281c <UTL_Asc2Dec>
 8002234:	4606      	mov	r6, r0
 8002236:	7ae0      	ldrb	r0, [r4, #11]
 8002238:	f000 faf0 	bl	800281c <UTL_Asc2Dec>
 800223c:	4605      	mov	r5, r0
 800223e:	7b20      	ldrb	r0, [r4, #12]
 8002240:	f000 faec 	bl	800281c <UTL_Asc2Dec>
 8002244:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8002248:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 800224c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002250:	b280      	uxth	r0, r0
 8002252:	e7d1      	b.n	80021f8 <SER_GetValue+0x10>
 8002254:	20000534 	.word	0x20000534

08002258 <SER_FillData>:
//! \details    Fills the buffer with converted characters
//! \param[in]  uint8_t newPosition		Position in the array
//! \Param[in]	uint8_t newByteCount	1 byte = 2 hex positions
//! \Param[in]	uint64_t newValue
void SER_FillData (uint8_t newPosition, uint8_t newByteCount, uint64_t newValue)
{
 8002258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225c:	b083      	sub	sp, #12
 800225e:	9000      	str	r0, [sp, #0]
 8002260:	9201      	str	r2, [sp, #4]
 8002262:	461f      	mov	r7, r3
	uint64_t CompareValue;
	if (newByteCount == 1) CompareValue = 0xF0;
	if (newByteCount == 2) CompareValue = 0xF000;
 8002264:	2902      	cmp	r1, #2
 8002266:	d04b      	beq.n	8002300 <SER_FillData+0xa8>
	if (newByteCount == 4) CompareValue = 0xF0000000;
 8002268:	2904      	cmp	r1, #4
 800226a:	d105      	bne.n	8002278 <SER_FillData+0x20>
	if (newByteCount == 8) CompareValue = 0xF000000000000000;

	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 800226c:	ea4f 0841 	mov.w	r8, r1, lsl #1
	if (newByteCount == 4) CompareValue = 0xF0000000;
 8002270:	f04f 4970 	mov.w	r9, #4026531840	; 0xf0000000
 8002274:	2600      	movs	r6, #0
 8002276:	e007      	b.n	8002288 <SER_FillData+0x30>
	if (newByteCount == 8) CompareValue = 0xF000000000000000;
 8002278:	2908      	cmp	r1, #8
 800227a:	d13d      	bne.n	80022f8 <SER_FillData+0xa0>
 800227c:	f04f 0900 	mov.w	r9, #0
 8002280:	f04f 4670 	mov.w	r6, #4026531840	; 0xf0000000
	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 8002284:	f04f 0810 	mov.w	r8, #16
 8002288:	2400      	movs	r4, #0
 800228a:	4620      	mov	r0, r4
	{
		Message.RxData[newPosition + i] = UTL_Dec2Asc(((newValue & (CompareValue >> i*4)) >> (4 * ((newByteCount * 2) - 1 - i))));
 800228c:	f108 3bff 	add.w	fp, r8, #4294967295
 8002290:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8002310 <SER_FillData+0xb8>
 8002294:	9b00      	ldr	r3, [sp, #0]
 8002296:	181d      	adds	r5, r3, r0
 8002298:	0083      	lsls	r3, r0, #2
 800229a:	f1c3 0c20 	rsb	ip, r3, #32
 800229e:	f1a3 0120 	sub.w	r1, r3, #32
 80022a2:	fa29 f203 	lsr.w	r2, r9, r3
 80022a6:	fa06 fc0c 	lsl.w	ip, r6, ip
 80022aa:	ea42 020c 	orr.w	r2, r2, ip
 80022ae:	fa26 f101 	lsr.w	r1, r6, r1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	fa26 f303 	lsr.w	r3, r6, r3
 80022b8:	9901      	ldr	r1, [sp, #4]
 80022ba:	400a      	ands	r2, r1
 80022bc:	403b      	ands	r3, r7
 80022be:	ebab 0000 	sub.w	r0, fp, r0
 80022c2:	0080      	lsls	r0, r0, #2
 80022c4:	f1c0 0c20 	rsb	ip, r0, #32
 80022c8:	f1a0 0120 	sub.w	r1, r0, #32
 80022cc:	fa22 f000 	lsr.w	r0, r2, r0
 80022d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80022d4:	ea40 000c 	orr.w	r0, r0, ip
 80022d8:	fa23 f101 	lsr.w	r1, r3, r1
 80022dc:	4308      	orrs	r0, r1
 80022de:	b2c0      	uxtb	r0, r0
 80022e0:	f000 fab3 	bl	800284a <UTL_Dec2Asc>
 80022e4:	4455      	add	r5, sl
 80022e6:	7268      	strb	r0, [r5, #9]
	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 80022e8:	3401      	adds	r4, #1
 80022ea:	b2e4      	uxtb	r4, r4
 80022ec:	4620      	mov	r0, r4
 80022ee:	4544      	cmp	r4, r8
 80022f0:	dbd0      	blt.n	8002294 <SER_FillData+0x3c>
	}
}
 80022f2:	b003      	add	sp, #12
 80022f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022f8:	f04f 09f0 	mov.w	r9, #240	; 0xf0
 80022fc:	2600      	movs	r6, #0
 80022fe:	e002      	b.n	8002306 <SER_FillData+0xae>
	if (newByteCount == 2) CompareValue = 0xF000;
 8002300:	f44f 4970 	mov.w	r9, #61440	; 0xf000
 8002304:	2600      	movs	r6, #0
	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 8002306:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800230a:	2900      	cmp	r1, #0
 800230c:	d1bc      	bne.n	8002288 <SER_FillData+0x30>
 800230e:	e7f0      	b.n	80022f2 <SER_FillData+0x9a>
 8002310:	20000534 	.word	0x20000534

08002314 <SER_FillBuffer>:

uint8_t SER_FillBuffer (uint8_t newPosition, uint16_t MType)
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002316:	b083      	sub	sp, #12
 8002318:	4604      	mov	r4, r0
 800231a:	460d      	mov	r5, r1
	volatile uint8_t Counter = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t ReturnValue = 0;
	if (MType == MTypeSendPartitionBlock)
 8002322:	2921      	cmp	r1, #33	; 0x21
 8002324:	d07b      	beq.n	800241e <SER_FillBuffer+0x10a>
		SER_FillData(newPosition, 2, (uint32_t) FLA[pUpdate].Version);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
	}
	if ((MType == MTypeGetPartitionInfo) || (MType == MTypeUpgradeApplication) || (MType == MTypeSetPartitionStatus))
 8002326:	f1a1 0322 	sub.w	r3, r1, #34	; 0x22
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d901      	bls.n	8002334 <SER_FillBuffer+0x20>
 8002330:	2926      	cmp	r1, #38	; 0x26
 8002332:	d163      	bne.n	80023fc <SER_FillBuffer+0xe8>
	{
		SER_FillData(newPosition, 2, (uint32_t) FLA[pApplication].Version);
 8002334:	4f75      	ldr	r7, [pc, #468]	; (800250c <SER_FillBuffer+0x1f8>)
 8002336:	2600      	movs	r6, #0
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4633      	mov	r3, r6
 800233c:	2102      	movs	r1, #2
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff ff8a 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pApplication].Status);
 8002344:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002348:	3004      	adds	r0, #4
 800234a:	b2c0      	uxtb	r0, r0
 800234c:	f88d 0007 	strb.w	r0, [sp, #7]
 8002350:	4420      	add	r0, r4
 8002352:	7c3a      	ldrb	r2, [r7, #16]
 8002354:	4633      	mov	r3, r6
 8002356:	2102      	movs	r1, #2
 8002358:	b2c0      	uxtb	r0, r0
 800235a:	f7ff ff7d 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pRollBack].Version);
 800235e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002362:	3004      	adds	r0, #4
 8002364:	b2c0      	uxtb	r0, r0
 8002366:	f88d 0007 	strb.w	r0, [sp, #7]
 800236a:	4420      	add	r0, r4
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	4633      	mov	r3, r6
 8002370:	2102      	movs	r1, #2
 8002372:	b2c0      	uxtb	r0, r0
 8002374:	f7ff ff70 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pRollBack].Status);
 8002378:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800237c:	3004      	adds	r0, #4
 800237e:	b2c0      	uxtb	r0, r0
 8002380:	f88d 0007 	strb.w	r0, [sp, #7]
 8002384:	4420      	add	r0, r4
 8002386:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800238a:	4633      	mov	r3, r6
 800238c:	2102      	movs	r1, #2
 800238e:	b2c0      	uxtb	r0, r0
 8002390:	f7ff ff62 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Version);
 8002394:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002398:	3004      	adds	r0, #4
 800239a:	b2c0      	uxtb	r0, r0
 800239c:	f88d 0007 	strb.w	r0, [sp, #7]
 80023a0:	4420      	add	r0, r4
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4633      	mov	r3, r6
 80023a6:	2102      	movs	r1, #2
 80023a8:	b2c0      	uxtb	r0, r0
 80023aa:	f7ff ff55 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
 80023ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80023b2:	3004      	adds	r0, #4
 80023b4:	b2c0      	uxtb	r0, r0
 80023b6:	f88d 0007 	strb.w	r0, [sp, #7]
 80023ba:	4420      	add	r0, r4
 80023bc:	8bfa      	ldrh	r2, [r7, #30]
 80023be:	4633      	mov	r3, r6
 80023c0:	2102      	movs	r1, #2
 80023c2:	b2c0      	uxtb	r0, r0
 80023c4:	f7ff ff48 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
 80023c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80023cc:	3004      	adds	r0, #4
 80023ce:	b2c0      	uxtb	r0, r0
 80023d0:	f88d 0007 	strb.w	r0, [sp, #7]
 80023d4:	4420      	add	r0, r4
 80023d6:	8c3a      	ldrh	r2, [r7, #32]
 80023d8:	4633      	mov	r3, r6
 80023da:	2102      	movs	r1, #2
 80023dc:	b2c0      	uxtb	r0, r0
 80023de:	f7ff ff3b 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
 80023e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80023e6:	3004      	adds	r0, #4
 80023e8:	b2c0      	uxtb	r0, r0
 80023ea:	f88d 0007 	strb.w	r0, [sp, #7]
 80023ee:	4420      	add	r0, r4
 80023f0:	7f3a      	ldrb	r2, [r7, #28]
 80023f2:	4633      	mov	r3, r6
 80023f4:	2102      	movs	r1, #2
 80023f6:	b2c0      	uxtb	r0, r0
 80023f8:	f7ff ff2e 	bl	8002258 <SER_FillData>
	}
#ifdef BOOTLOADER
	if ((MType == MTypeGetBackupProgress)||(MType == MTypeGetRestoreProgress))
 80023fc:	f1a5 0327 	sub.w	r3, r5, #39	; 0x27
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d939      	bls.n	800247a <SER_FillBuffer+0x166>
		Message.RxData[0] = '/';
		Message.RxData[1] = '1';
		SER_FillData(4, 1, (uint32_t) MType);
		SER_FillData(newPosition, 2, (uint32_t) Progress);
	}
	if (MType == MTypeGetUpdateProgress)
 8002406:	2d24      	cmp	r5, #36	; 0x24
 8002408:	d04b      	beq.n	80024a2 <SER_FillBuffer+0x18e>
		Message.RxData[0] = '/';
		Message.RxData[1] = '1';
		SER_FillData(4, 1, (uint32_t) MType);
		SER_FillData(newPosition, 2, (uint32_t) Progress);
	}
	if (MType == MTypeGetBootloaderStatus)
 800240a:	2d25      	cmp	r5, #37	; 0x25
 800240c:	d05c      	beq.n	80024c8 <SER_FillBuffer+0x1b4>
			SER_FillData(newPosition + Counter, 2, (uint64_t) CON.CardMemory[i]);
			if (TAGDATACOUNT - i > 1) Counter += 4;
		}
	}
#endif
	ReturnValue = (Counter+=4);
 800240e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002412:	3004      	adds	r0, #4
 8002414:	b2c0      	uxtb	r0, r0
 8002416:	f88d 0007 	strb.w	r0, [sp, #7]
	return ReturnValue;
}
 800241a:	b003      	add	sp, #12
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SER_FillData(newPosition, 2, (uint32_t) FLA[pUpdate].Version);
 800241e:	4f3b      	ldr	r7, [pc, #236]	; (800250c <SER_FillBuffer+0x1f8>)
 8002420:	461e      	mov	r6, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	2102      	movs	r1, #2
 8002426:	f7ff ff17 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
 800242a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800242e:	3004      	adds	r0, #4
 8002430:	b2c0      	uxtb	r0, r0
 8002432:	f88d 0007 	strb.w	r0, [sp, #7]
 8002436:	4420      	add	r0, r4
 8002438:	8bfa      	ldrh	r2, [r7, #30]
 800243a:	4633      	mov	r3, r6
 800243c:	2102      	movs	r1, #2
 800243e:	b2c0      	uxtb	r0, r0
 8002440:	f7ff ff0a 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
 8002444:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002448:	3004      	adds	r0, #4
 800244a:	b2c0      	uxtb	r0, r0
 800244c:	f88d 0007 	strb.w	r0, [sp, #7]
 8002450:	4420      	add	r0, r4
 8002452:	8c3a      	ldrh	r2, [r7, #32]
 8002454:	4633      	mov	r3, r6
 8002456:	2102      	movs	r1, #2
 8002458:	b2c0      	uxtb	r0, r0
 800245a:	f7ff fefd 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
 800245e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002462:	3004      	adds	r0, #4
 8002464:	b2c0      	uxtb	r0, r0
 8002466:	f88d 0007 	strb.w	r0, [sp, #7]
 800246a:	4420      	add	r0, r4
 800246c:	7f3a      	ldrb	r2, [r7, #28]
 800246e:	4633      	mov	r3, r6
 8002470:	2102      	movs	r1, #2
 8002472:	b2c0      	uxtb	r0, r0
 8002474:	f7ff fef0 	bl	8002258 <SER_FillData>
	if ((MType == MTypeGetBackupProgress)||(MType == MTypeGetRestoreProgress))
 8002478:	e7c7      	b.n	800240a <SER_FillBuffer+0xf6>
		Message.RxData[0] = '/';
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <SER_FillBuffer+0x1fc>)
 800247c:	222f      	movs	r2, #47	; 0x2f
 800247e:	725a      	strb	r2, [r3, #9]
		Message.RxData[1] = '1';
 8002480:	2231      	movs	r2, #49	; 0x31
 8002482:	729a      	strb	r2, [r3, #10]
		SER_FillData(4, 1, (uint32_t) MType);
 8002484:	2600      	movs	r6, #0
 8002486:	462a      	mov	r2, r5
 8002488:	4633      	mov	r3, r6
 800248a:	2101      	movs	r1, #1
 800248c:	2004      	movs	r0, #4
 800248e:	f7ff fee3 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition, 2, (uint32_t) Progress);
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <SER_FillBuffer+0x200>)
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	4633      	mov	r3, r6
 8002498:	2102      	movs	r1, #2
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff fedc 	bl	8002258 <SER_FillData>
	if (MType == MTypeGetBootloaderStatus)
 80024a0:	e7b5      	b.n	800240e <SER_FillBuffer+0xfa>
		Message.RxData[0] = '/';
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <SER_FillBuffer+0x1fc>)
 80024a4:	222f      	movs	r2, #47	; 0x2f
 80024a6:	725a      	strb	r2, [r3, #9]
		Message.RxData[1] = '1';
 80024a8:	2231      	movs	r2, #49	; 0x31
 80024aa:	729a      	strb	r2, [r3, #10]
		SER_FillData(4, 1, (uint32_t) MType);
 80024ac:	2224      	movs	r2, #36	; 0x24
 80024ae:	2300      	movs	r3, #0
 80024b0:	2101      	movs	r1, #1
 80024b2:	2004      	movs	r0, #4
 80024b4:	f7ff fed0 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition, 2, (uint32_t) Progress);
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <SER_FillBuffer+0x200>)
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	2102      	movs	r1, #2
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff fec9 	bl	8002258 <SER_FillData>
	if (MType == MTypeGetBootloaderStatus)
 80024c6:	e7a2      	b.n	800240e <SER_FillBuffer+0xfa>
		Message.RxData[0] = '/';
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <SER_FillBuffer+0x1fc>)
 80024ca:	222f      	movs	r2, #47	; 0x2f
 80024cc:	725a      	strb	r2, [r3, #9]
		Message.RxData[1] = '1';
 80024ce:	2231      	movs	r2, #49	; 0x31
 80024d0:	729a      	strb	r2, [r3, #10]
		SER_FillData(4, 1, (uint32_t) MType);
 80024d2:	2225      	movs	r2, #37	; 0x25
 80024d4:	2300      	movs	r3, #0
 80024d6:	2101      	movs	r1, #1
 80024d8:	2004      	movs	r0, #4
 80024da:	f7ff febd 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition, 2, (uint32_t) BootloaderStatus);
 80024de:	2500      	movs	r5, #0
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <SER_FillBuffer+0x204>)
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	462b      	mov	r3, r5
 80024e6:	2102      	movs	r1, #2
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff feb5 	bl	8002258 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pApplication].Status);
 80024ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80024f2:	3004      	adds	r0, #4
 80024f4:	b2c0      	uxtb	r0, r0
 80024f6:	f88d 0007 	strb.w	r0, [sp, #7]
 80024fa:	4420      	add	r0, r4
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <SER_FillBuffer+0x1f8>)
 80024fe:	7c1a      	ldrb	r2, [r3, #16]
 8002500:	462b      	mov	r3, r5
 8002502:	2102      	movs	r1, #2
 8002504:	b2c0      	uxtb	r0, r0
 8002506:	f7ff fea7 	bl	8002258 <SER_FillData>
 800250a:	e780      	b.n	800240e <SER_FillBuffer+0xfa>
 800250c:	200001b0 	.word	0x200001b0
 8002510:	20000534 	.word	0x20000534
 8002514:	200001a6 	.word	0x200001a6
 8002518:	20000038 	.word	0x20000038

0800251c <SER_ProcessMessage>:
//! \param      None
void SER_ProcessMessage (void)
{
	uint8_t DataLength;

	if	((Message.Counter > 0) &&(Message.Counter == Message.Length))  //Message received completely
 800251c:	4b6d      	ldr	r3, [pc, #436]	; (80026d4 <SER_ProcessMessage+0x1b8>)
 800251e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002522:	2b00      	cmp	r3, #0
 8002524:	dd03      	ble.n	800252e <SER_ProcessMessage+0x12>
 8002526:	4a6b      	ldr	r2, [pc, #428]	; (80026d4 <SER_ProcessMessage+0x1b8>)
 8002528:	7891      	ldrb	r1, [r2, #2]
 800252a:	428b      	cmp	r3, r1
 800252c:	d000      	beq.n	8002530 <SER_ProcessMessage+0x14>
 800252e:	4770      	bx	lr
{
 8002530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002534:	b08b      	sub	sp, #44	; 0x2c
	{
		SER_Busy = 1;
 8002536:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <SER_ProcessMessage+0x1bc>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
		//Check CRC
#ifndef BOOTLOADER
		WRK_ResetAction(); //Cancel the current action in case this is pending as the return message is scrambled.
#endif
		CalculatedCRC = CalculateCRC8(Message.RxData, Message.Length);
 800253c:	4c65      	ldr	r4, [pc, #404]	; (80026d4 <SER_ProcessMessage+0x1b8>)
 800253e:	f104 0009 	add.w	r0, r4, #9
 8002542:	f7fe fdf9 	bl	8001138 <CalculateCRC8>
 8002546:	4b65      	ldr	r3, [pc, #404]	; (80026dc <SER_ProcessMessage+0x1c0>)
 8002548:	7018      	strb	r0, [r3, #0]
		if (CalculatedCRC != Message.CRCValue) //Invalid CRC.
 800254a:	7923      	ldrb	r3, [r4, #4]
 800254c:	4283      	cmp	r3, r0
 800254e:	d11c      	bne.n	800258a <SER_ProcessMessage+0x6e>
		{
			SER_SendReturnMessage (10,MStatCRCError);
		}
		else if (Message.UARTVersion != UARTVERSION)
 8002550:	4b60      	ldr	r3, [pc, #384]	; (80026d4 <SER_ProcessMessage+0x1b8>)
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d11f      	bne.n	8002598 <SER_ProcessMessage+0x7c>
			Message.Counter = 0;
			WRK_SetAction (Message.MType);
		}
#endif
		//Commands accepted by all
		else if (Message.MType == MTypeSendPartitionBlock) //Application upgrade is being sent
 8002558:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <SER_ProcessMessage+0x1b8>)
 800255a:	78db      	ldrb	r3, [r3, #3]
 800255c:	2b21      	cmp	r3, #33	; 0x21
 800255e:	d020      	beq.n	80025a2 <SER_ProcessMessage+0x86>
		{
			FLA_HandleSendPartitionBlock();
		}
		else if (Message.MType == MTypeUpgradeApplication)
 8002560:	2b22      	cmp	r3, #34	; 0x22
 8002562:	d021      	beq.n	80025a8 <SER_ProcessMessage+0x8c>
		{
			FLA_HandleUpgradeApplication();
		}
		else if (Message.MType == MTypeRestorePartition)
 8002564:	2b29      	cmp	r3, #41	; 0x29
 8002566:	d022      	beq.n	80025ae <SER_ProcessMessage+0x92>
		{
			FLA_RestorePartition();
		}
		else if (Message.MType == MTypeGetPartitionInfo) //Get image info in flash
 8002568:	2b23      	cmp	r3, #35	; 0x23
 800256a:	d023      	beq.n	80025b4 <SER_ProcessMessage+0x98>
#ifdef BOOTLOADER
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
#endif

		}
		else if (Message.MType == MTypeSetPartitionStatus) //Application upgrade is being sent
 800256c:	2b26      	cmp	r3, #38	; 0x26
 800256e:	d03b      	beq.n	80025e8 <SER_ProcessMessage+0xcc>
		{
			FLA_SetStatus(pUpdate,(enuFLA) SER_GetValue (10,2));
			DataLength = SER_FillBuffer(10, Message.MType);
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
		}
		else if (Message.MType == MTypeSetLED)
 8002570:	2b41      	cmp	r3, #65	; 0x41
 8002572:	d04c      	beq.n	800260e <SER_ProcessMessage+0xf2>
				CON.CardMemory[i] = SER_GetValue (8 + (i * 2),2);
			}
			SER_SendReturnMessage (10,MStatSuccess);
		}
#endif
		else if (Message.MType == MTypeSetDummyMode)
 8002574:	2b42      	cmp	r3, #66	; 0x42
 8002576:	f000 809c 	beq.w	80026b2 <SER_ProcessMessage+0x196>
			WRK_SetDummyMode(WRK_DUMMYMODESCALE,SER_GetValue (18,2));
#endif
			SER_SendReturnMessage (10,MStatSuccess);
			NVIC_SystemReset();
		}
		else if (Message.MType == MTypeSetMachineParameters)
 800257a:	2b39      	cmp	r3, #57	; 0x39
#ifdef GRINDER
			ADJ_SetParameter(ADJ_P,SER_GetValue (12,4));
			ADJ_SetParameter(ADJ_I,SER_GetValue (16,4));
			ADJ_SetParameter(ADJ_D,SER_GetValue (20,4));
#endif
			SER_SendReturnMessage (10,MStatSuccess);
 800257c:	bf0c      	ite	eq
 800257e:	2101      	moveq	r1, #1
		//Work module initiates the return message by calling SER_SetStatus
		//The Linux system should wait for the return message before sending a new message
		//If another message is received before SER_SetStatus is called, the current action is canceled.
		else //Message type is unknown
		{
			SER_SendReturnMessage (10,MStatUnknownType);
 8002580:	2112      	movne	r1, #18
 8002582:	200a      	movs	r0, #10
 8002584:	f7ff fdd6 	bl	8002134 <SER_SendReturnMessage>
		}
	}
}
 8002588:	e003      	b.n	8002592 <SER_ProcessMessage+0x76>
			SER_SendReturnMessage (10,MStatCRCError);
 800258a:	2111      	movs	r1, #17
 800258c:	200a      	movs	r0, #10
 800258e:	f7ff fdd1 	bl	8002134 <SER_SendReturnMessage>
}
 8002592:	b00b      	add	sp, #44	; 0x2c
 8002594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SER_SendReturnMessage (10,MStatUARTVersionError);
 8002598:	2115      	movs	r1, #21
 800259a:	200a      	movs	r0, #10
 800259c:	f7ff fdca 	bl	8002134 <SER_SendReturnMessage>
 80025a0:	e7f7      	b.n	8002592 <SER_ProcessMessage+0x76>
			FLA_HandleSendPartitionBlock();
 80025a2:	f7fe ff13 	bl	80013cc <FLA_HandleSendPartitionBlock>
 80025a6:	e7f4      	b.n	8002592 <SER_ProcessMessage+0x76>
			FLA_HandleUpgradeApplication();
 80025a8:	f7fe fe48 	bl	800123c <FLA_HandleUpgradeApplication>
 80025ac:	e7f1      	b.n	8002592 <SER_ProcessMessage+0x76>
			FLA_RestorePartition();
 80025ae:	f7fe fe25 	bl	80011fc <FLA_RestorePartition>
 80025b2:	e7ee      	b.n	8002592 <SER_ProcessMessage+0x76>
			DataLength = SER_FillBuffer(10, Message.MType);
 80025b4:	2123      	movs	r1, #35	; 0x23
 80025b6:	200a      	movs	r0, #10
 80025b8:	f7ff feac 	bl	8002314 <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 80025bc:	300a      	adds	r0, #10
 80025be:	2101      	movs	r1, #1
 80025c0:	b2c0      	uxtb	r0, r0
 80025c2:	f7ff fdb7 	bl	8002134 <SER_SendReturnMessage>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 50, 100, 100, 5, 0, 0); //Blinking fast RED
 80025c6:	2000      	movs	r0, #0
 80025c8:	9006      	str	r0, [sp, #24]
 80025ca:	9005      	str	r0, [sp, #20]
 80025cc:	2305      	movs	r3, #5
 80025ce:	9304      	str	r3, [sp, #16]
 80025d0:	2364      	movs	r3, #100	; 0x64
 80025d2:	9303      	str	r3, [sp, #12]
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	2332      	movs	r3, #50	; 0x32
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	9000      	str	r0, [sp, #0]
 80025dc:	4603      	mov	r3, r0
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	2102      	movs	r1, #2
 80025e2:	f7ff f88b 	bl	80016fc <LED_Set>
 80025e6:	e7d4      	b.n	8002592 <SER_ProcessMessage+0x76>
			FLA_SetStatus(pUpdate,(enuFLA) SER_GetValue (10,2));
 80025e8:	2102      	movs	r1, #2
 80025ea:	200a      	movs	r0, #10
 80025ec:	f7ff fdfc 	bl	80021e8 <SER_GetValue>
 80025f0:	b2c1      	uxtb	r1, r0
 80025f2:	2002      	movs	r0, #2
 80025f4:	f7fe fdda 	bl	80011ac <FLA_SetStatus>
			DataLength = SER_FillBuffer(10, Message.MType);
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <SER_ProcessMessage+0x1b8>)
 80025fa:	78d9      	ldrb	r1, [r3, #3]
 80025fc:	200a      	movs	r0, #10
 80025fe:	f7ff fe89 	bl	8002314 <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 8002602:	300a      	adds	r0, #10
 8002604:	2101      	movs	r1, #1
 8002606:	b2c0      	uxtb	r0, r0
 8002608:	f7ff fd94 	bl	8002134 <SER_SendReturnMessage>
 800260c:	e7c1      	b.n	8002592 <SER_ProcessMessage+0x76>
			LED_Set(SER_GetValue (12,1), SER_GetValue (13,1), SER_GetValue (14,2), SER_GetValue (16,2), SER_GetValue (18,2), SER_GetValue (20,2), SER_GetValue (22,4), SER_GetValue (26,4), SER_GetValue (30,2), SER_GetValue (32,4), SER_GetValue (36,2));
 800260e:	2101      	movs	r1, #1
 8002610:	200c      	movs	r0, #12
 8002612:	f7ff fde9 	bl	80021e8 <SER_GetValue>
 8002616:	4607      	mov	r7, r0
 8002618:	2101      	movs	r1, #1
 800261a:	200d      	movs	r0, #13
 800261c:	f7ff fde4 	bl	80021e8 <SER_GetValue>
 8002620:	4680      	mov	r8, r0
 8002622:	2102      	movs	r1, #2
 8002624:	200e      	movs	r0, #14
 8002626:	f7ff fddf 	bl	80021e8 <SER_GetValue>
 800262a:	4681      	mov	r9, r0
 800262c:	2102      	movs	r1, #2
 800262e:	2010      	movs	r0, #16
 8002630:	f7ff fdda 	bl	80021e8 <SER_GetValue>
 8002634:	4682      	mov	sl, r0
 8002636:	2102      	movs	r1, #2
 8002638:	2012      	movs	r0, #18
 800263a:	f7ff fdd5 	bl	80021e8 <SER_GetValue>
 800263e:	4683      	mov	fp, r0
 8002640:	2102      	movs	r1, #2
 8002642:	2014      	movs	r0, #20
 8002644:	f7ff fdd0 	bl	80021e8 <SER_GetValue>
 8002648:	9008      	str	r0, [sp, #32]
 800264a:	2104      	movs	r1, #4
 800264c:	2016      	movs	r0, #22
 800264e:	f7ff fdcb 	bl	80021e8 <SER_GetValue>
 8002652:	4604      	mov	r4, r0
 8002654:	2104      	movs	r1, #4
 8002656:	201a      	movs	r0, #26
 8002658:	f7ff fdc6 	bl	80021e8 <SER_GetValue>
 800265c:	4605      	mov	r5, r0
 800265e:	2102      	movs	r1, #2
 8002660:	201e      	movs	r0, #30
 8002662:	f7ff fdc1 	bl	80021e8 <SER_GetValue>
 8002666:	9009      	str	r0, [sp, #36]	; 0x24
 8002668:	2104      	movs	r1, #4
 800266a:	2020      	movs	r0, #32
 800266c:	f7ff fdbc 	bl	80021e8 <SER_GetValue>
 8002670:	4606      	mov	r6, r0
 8002672:	2102      	movs	r1, #2
 8002674:	2024      	movs	r0, #36	; 0x24
 8002676:	f7ff fdb7 	bl	80021e8 <SER_GetValue>
 800267a:	b2c0      	uxtb	r0, r0
 800267c:	9006      	str	r0, [sp, #24]
 800267e:	9605      	str	r6, [sp, #20]
 8002680:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8002684:	9304      	str	r3, [sp, #16]
 8002686:	9503      	str	r5, [sp, #12]
 8002688:	9402      	str	r4, [sp, #8]
 800268a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	fa5f f38b 	uxtb.w	r3, fp
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	fa5f f38a 	uxtb.w	r3, sl
 800269a:	fa5f f289 	uxtb.w	r2, r9
 800269e:	fa5f f188 	uxtb.w	r1, r8
 80026a2:	b2f8      	uxtb	r0, r7
 80026a4:	f7ff f82a 	bl	80016fc <LED_Set>
			SER_SendReturnMessage (10,MStatSuccess);
 80026a8:	2101      	movs	r1, #1
 80026aa:	200a      	movs	r0, #10
 80026ac:	f7ff fd42 	bl	8002134 <SER_SendReturnMessage>
 80026b0:	e76f      	b.n	8002592 <SER_ProcessMessage+0x76>
			SER_SendReturnMessage (10,MStatSuccess);
 80026b2:	2101      	movs	r1, #1
 80026b4:	200a      	movs	r0, #10
 80026b6:	f7ff fd3d 	bl	8002134 <SER_SendReturnMessage>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026ba:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <SER_ProcessMessage+0x1c4>)
 80026c0:	68ca      	ldr	r2, [r1, #12]
 80026c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <SER_ProcessMessage+0x1c8>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60cb      	str	r3, [r1, #12]
 80026cc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026d0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80026d2:	e7fd      	b.n	80026d0 <SER_ProcessMessage+0x1b4>
 80026d4:	20000534 	.word	0x20000534
 80026d8:	2000063c 	.word	0x2000063c
 80026dc:	20000530 	.word	0x20000530
 80026e0:	e000ed00 	.word	0xe000ed00
 80026e4:	05fa0004 	.word	0x05fa0004

080026e8 <SER_Handle>:
{
 80026e8:	b510      	push	{r4, lr}
	SER_ProcessMessage();
 80026ea:	f7ff ff17 	bl	800251c <SER_ProcessMessage>
	if(HAL_UART_GetError(&huart2))
 80026ee:	4810      	ldr	r0, [pc, #64]	; (8002730 <SER_Handle+0x48>)
 80026f0:	f002 fa30 	bl	8004b54 <HAL_UART_GetError>
 80026f4:	b920      	cbnz	r0, 8002700 <SER_Handle+0x18>
	if(HAL_UART_GetError(&huart3))
 80026f6:	480f      	ldr	r0, [pc, #60]	; (8002734 <SER_Handle+0x4c>)
 80026f8:	f002 fa2c 	bl	8004b54 <HAL_UART_GetError>
 80026fc:	b960      	cbnz	r0, 8002718 <SER_Handle+0x30>
}
 80026fe:	bd10      	pop	{r4, pc}
		HAL_UART_DMAStop(&huart2);
 8002700:	4c0b      	ldr	r4, [pc, #44]	; (8002730 <SER_Handle+0x48>)
 8002702:	4620      	mov	r0, r4
 8002704:	f001 ffd5 	bl	80046b2 <HAL_UART_DMAStop>
		MX_USART2_UART_Init();
 8002708:	f7fe f86e 	bl	80007e8 <MX_USART2_UART_Init>
		HAL_UART_Receive_DMA(&huart2, &Message.RxBuffer, 1);
 800270c:	2201      	movs	r2, #1
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <SER_Handle+0x50>)
 8002710:	4620      	mov	r0, r4
 8002712:	f002 fa5d 	bl	8004bd0 <HAL_UART_Receive_DMA>
 8002716:	e7ee      	b.n	80026f6 <SER_Handle+0xe>
		HAL_UART_DMAStop(&huart3);
 8002718:	4c06      	ldr	r4, [pc, #24]	; (8002734 <SER_Handle+0x4c>)
 800271a:	4620      	mov	r0, r4
 800271c:	f001 ffc9 	bl	80046b2 <HAL_UART_DMAStop>
		MX_USART2_UART_Init();
 8002720:	f7fe f862 	bl	80007e8 <MX_USART2_UART_Init>
		HAL_UART_Receive_DMA(&huart3, &Message.RxBuffer, 1);
 8002724:	2201      	movs	r2, #1
 8002726:	4904      	ldr	r1, [pc, #16]	; (8002738 <SER_Handle+0x50>)
 8002728:	4620      	mov	r0, r4
 800272a:	f002 fa51 	bl	8004bd0 <HAL_UART_Receive_DMA>
}
 800272e:	e7e6      	b.n	80026fe <SER_Handle+0x16>
 8002730:	2000011c 	.word	0x2000011c
 8002734:	20000160 	.word	0x20000160
 8002738:	20000534 	.word	0x20000534

0800273c <HAL_UART_RxCpltCallback>:
//! \details    Checks the length of the message and limits to MDataMax
//! \details    Fills the rest of the data buffer until the length of the message is received
//! \param      None
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (SER_Busy) return;
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_UART_RxCpltCallback+0xcc>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d160      	bne.n	8002806 <HAL_UART_RxCpltCallback+0xca>
{
 8002744:	b510      	push	{r4, lr}
	uint8_t CurrentValue;
	if(huart->Instance == USART2)  //Received from debugging interface
 8002746:	6803      	ldr	r3, [r0, #0]
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_UART_RxCpltCallback+0xd0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d023      	beq.n	8002796 <HAL_UART_RxCpltCallback+0x5a>
	{
		UartReturn = 2;
	}
	else if(huart->Instance == USART3)  //Received from linux system
 800274e:	4a30      	ldr	r2, [pc, #192]	; (8002810 <HAL_UART_RxCpltCallback+0xd4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d024      	beq.n	800279e <HAL_UART_RxCpltCallback+0x62>
	{
		UartReturn = 3;
	}

	CurrentValue = UTL_Asc2Dec(Message.RxBuffer);
 8002754:	4c2f      	ldr	r4, [pc, #188]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 8002756:	7820      	ldrb	r0, [r4, #0]
 8002758:	f000 f860 	bl	800281c <UTL_Asc2Dec>
	Message.RxData[Message.Counter] = Message.RxBuffer;
 800275c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8002760:	7822      	ldrb	r2, [r4, #0]
 8002762:	441c      	add	r4, r3
 8002764:	7262      	strb	r2, [r4, #9]
	if (Message.RxBuffer == 0x2f) //Start byte. Reset Rx counter
 8002766:	2a2f      	cmp	r2, #47	; 0x2f
 8002768:	d01d      	beq.n	80027a6 <HAL_UART_RxCpltCallback+0x6a>
	{
		Message.Counter = 1;
	}
	else if (Message.Counter == 1) //UART protocol
 800276a:	2b01      	cmp	r3, #1
 800276c:	d01f      	beq.n	80027ae <HAL_UART_RxCpltCallback+0x72>
	{
		Message.UARTVersion = CurrentValue;
		Message.Counter = 2;
	}
	else if (Message.Counter == 2) //Length MSB received
 800276e:	2b02      	cmp	r3, #2
 8002770:	d022      	beq.n	80027b8 <HAL_UART_RxCpltCallback+0x7c>
	{
		Message.Length = CurrentValue * 16;
		Message.Counter = 3;
	}
	else if (Message.Counter == 3) //Length LSB received
 8002772:	2b03      	cmp	r3, #3
 8002774:	d026      	beq.n	80027c4 <HAL_UART_RxCpltCallback+0x88>
		Message.Length += CurrentValue;
		if (Message.Length > MLengthMax)
			Message.Length = MLengthMax; //Prevent buffer overflow
		Message.Counter = 4;
	}
	else if	(Message.Counter == 4) //Message type MSB received
 8002776:	2b04      	cmp	r3, #4
 8002778:	d02b      	beq.n	80027d2 <HAL_UART_RxCpltCallback+0x96>
	{
		Message.MType = CurrentValue * 16;
		Message.Counter = 5;
	}
	else if	(Message.Counter == 5) //Message type LSB received
 800277a:	2b05      	cmp	r3, #5
 800277c:	d02f      	beq.n	80027de <HAL_UART_RxCpltCallback+0xa2>
	{
		Message.MType += CurrentValue;
		Message.Counter = 6;
	}
	else if	(Message.Counter == 6) //CRC MSB received
 800277e:	2b06      	cmp	r3, #6
 8002780:	d034      	beq.n	80027ec <HAL_UART_RxCpltCallback+0xb0>
	{
		Message.CRCValue = CurrentValue * 16;
		Message.Counter = 7;
	}
	else if	(Message.Counter == 7) //CRC LSB received
 8002782:	2b07      	cmp	r3, #7
 8002784:	d038      	beq.n	80027f8 <HAL_UART_RxCpltCallback+0xbc>
	{
		Message.CRCValue += CurrentValue;
		Message.Counter = 8;
	}
	else if	(Message.Counter < Message.Length) //Any byte received
 8002786:	4a23      	ldr	r2, [pc, #140]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 8002788:	7892      	ldrb	r2, [r2, #2]
 800278a:	4293      	cmp	r3, r2
 800278c:	da0e      	bge.n	80027ac <HAL_UART_RxCpltCallback+0x70>
	{
		Message.Counter ++;
 800278e:	3301      	adds	r3, #1
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 8002792:	80d3      	strh	r3, [r2, #6]
 8002794:	e00a      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
		UartReturn = 2;
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_UART_RxCpltCallback+0xdc>)
 8002798:	2202      	movs	r2, #2
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e7da      	b.n	8002754 <HAL_UART_RxCpltCallback+0x18>
		UartReturn = 3;
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_UART_RxCpltCallback+0xdc>)
 80027a0:	2203      	movs	r2, #3
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e7d6      	b.n	8002754 <HAL_UART_RxCpltCallback+0x18>
		Message.Counter = 1;
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	80da      	strh	r2, [r3, #6]
	}
}
 80027ac:	bd10      	pop	{r4, pc}
		Message.UARTVersion = CurrentValue;
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027b0:	7058      	strb	r0, [r3, #1]
		Message.Counter = 2;
 80027b2:	2202      	movs	r2, #2
 80027b4:	80da      	strh	r2, [r3, #6]
 80027b6:	e7f9      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
		Message.Length = CurrentValue * 16;
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027ba:	0100      	lsls	r0, r0, #4
 80027bc:	7098      	strb	r0, [r3, #2]
		Message.Counter = 3;
 80027be:	2203      	movs	r2, #3
 80027c0:	80da      	strh	r2, [r3, #6]
 80027c2:	e7f3      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
		Message.Length += CurrentValue;
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027c6:	789a      	ldrb	r2, [r3, #2]
 80027c8:	4410      	add	r0, r2
 80027ca:	7098      	strb	r0, [r3, #2]
		Message.Counter = 4;
 80027cc:	2204      	movs	r2, #4
 80027ce:	80da      	strh	r2, [r3, #6]
 80027d0:	e7ec      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
		Message.MType = CurrentValue * 16;
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027d4:	0100      	lsls	r0, r0, #4
 80027d6:	70d8      	strb	r0, [r3, #3]
		Message.Counter = 5;
 80027d8:	2205      	movs	r2, #5
 80027da:	80da      	strh	r2, [r3, #6]
 80027dc:	e7e6      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
		Message.MType += CurrentValue;
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027e0:	78da      	ldrb	r2, [r3, #3]
 80027e2:	4410      	add	r0, r2
 80027e4:	70d8      	strb	r0, [r3, #3]
		Message.Counter = 6;
 80027e6:	2206      	movs	r2, #6
 80027e8:	80da      	strh	r2, [r3, #6]
 80027ea:	e7df      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
		Message.CRCValue = CurrentValue * 16;
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027ee:	0100      	lsls	r0, r0, #4
 80027f0:	7118      	strb	r0, [r3, #4]
		Message.Counter = 7;
 80027f2:	2207      	movs	r2, #7
 80027f4:	80da      	strh	r2, [r3, #6]
 80027f6:	e7d9      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
		Message.CRCValue += CurrentValue;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_UART_RxCpltCallback+0xd8>)
 80027fa:	791a      	ldrb	r2, [r3, #4]
 80027fc:	4410      	add	r0, r2
 80027fe:	7118      	strb	r0, [r3, #4]
		Message.Counter = 8;
 8002800:	2208      	movs	r2, #8
 8002802:	80da      	strh	r2, [r3, #6]
 8002804:	e7d2      	b.n	80027ac <HAL_UART_RxCpltCallback+0x70>
 8002806:	4770      	bx	lr
 8002808:	2000063c 	.word	0x2000063c
 800280c:	40004400 	.word	0x40004400
 8002810:	40004800 	.word	0x40004800
 8002814:	20000534 	.word	0x20000534
 8002818:	2000063d 	.word	0x2000063d

0800281c <UTL_Asc2Dec>:
//! \brief      Returns the integer value of a hex string
//! \details    converts the hex string to an integer
//! \param[in]  uint8_t newValue		Hex string [1 byte]
//! \param[out]	uint8_t ReturnValue
uint8_t UTL_Asc2Dec (uint8_t newValue)
{
 800281c:	4603      	mov	r3, r0
	if (newValue >= '0' && newValue <= '9') return newValue - '0';
 800281e:	3830      	subs	r0, #48	; 0x30
 8002820:	b2c0      	uxtb	r0, r0
 8002822:	2809      	cmp	r0, #9
 8002824:	d90a      	bls.n	800283c <UTL_Asc2Dec+0x20>
	if (newValue >= 'A' && newValue <= 'F') return newValue - ('A' - 10);
 8002826:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	2a05      	cmp	r2, #5
 800282e:	d906      	bls.n	800283e <UTL_Asc2Dec+0x22>
	if (newValue >= 'a' && newValue <= 'f') return newValue - ('a' - 10);
 8002830:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	2a05      	cmp	r2, #5
 8002838:	d904      	bls.n	8002844 <UTL_Asc2Dec+0x28>
	return 0xFF;
 800283a:	20ff      	movs	r0, #255	; 0xff
}
 800283c:	4770      	bx	lr
	if (newValue >= 'A' && newValue <= 'F') return newValue - ('A' - 10);
 800283e:	3b37      	subs	r3, #55	; 0x37
 8002840:	b2d8      	uxtb	r0, r3
 8002842:	4770      	bx	lr
	if (newValue >= 'a' && newValue <= 'f') return newValue - ('a' - 10);
 8002844:	3b57      	subs	r3, #87	; 0x57
 8002846:	b2d8      	uxtb	r0, r3
 8002848:	4770      	bx	lr

0800284a <UTL_Dec2Asc>:
//! \brief      Returns the ascii code of an integer
//! \details    converts an integer to a ascii character
//! \param[in]  uint8_t newValue
//! \param[out] uint8_t returnValue
uint8_t UTL_Dec2Asc (uint8_t newValue)
{
 800284a:	4602      	mov	r2, r0
	uint8_t returnValue = newValue + 48;
 800284c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002850:	b2d8      	uxtb	r0, r3
	if (returnValue > 57) //More than 9, so A,B,C,D,E or F
 8002852:	2839      	cmp	r0, #57	; 0x39
		returnValue += 7;
 8002854:	bf84      	itt	hi
 8002856:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
 800285a:	b2c0      	uxtbhi	r0, r0
	return returnValue;
}
 800285c:	4770      	bx	lr
	...

08002860 <WS2812_Set>:
//! \details    Calculates and sets the color
//! \param[in]  uint8_t num		number of the LED in the array
//! \param[in]  uint32_t RGB	Color number
//! \param[in]  uint8_t intensity	Intensity of the LED (0 - 255)
void WS2812_Set( uint8_t num, uint32_t RGB, uint8_t intensity )
{
 8002860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002864:	b098      	sub	sp, #96	; 0x60
    uint8_t i;
    uint16_t R = ((RGB >> 16) & 0xff) * intensity / 255;
    uint16_t G = ((RGB >> 8) & 0xff) * intensity / 255;
    uint16_t B = ((uint8_t) RGB) * intensity / 255;
 8002866:	b2cc      	uxtb	r4, r1
 8002868:	fb02 f404 	mul.w	r4, r2, r4
 800286c:	4e31      	ldr	r6, [pc, #196]	; (8002934 <WS2812_Set+0xd4>)
 800286e:	fb86 5304 	smull	r5, r3, r6, r4
 8002872:	4423      	add	r3, r4
 8002874:	11dd      	asrs	r5, r3, #7
    uint32_t TempR[8], TempG[8], TempB[8];
    BB = B;
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <WS2812_Set+0xd8>)
 8002878:	701d      	strb	r5, [r3, #0]
    uint16_t R = ((RGB >> 16) & 0xff) * intensity / 255;
 800287a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800287e:	fb02 f404 	mul.w	r4, r2, r4
 8002882:	fba6 3404 	umull	r3, r4, r6, r4
 8002886:	09e4      	lsrs	r4, r4, #7
    uint16_t G = ((RGB >> 8) & 0xff) * intensity / 255;
 8002888:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800288c:	fb02 f301 	mul.w	r3, r2, r1
 8002890:	fba6 2303 	umull	r2, r3, r6, r3
 8002894:	09db      	lsrs	r3, r3, #7
    RGB = R << 16 | G << 8 | B; //Colors corrected for intensity
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800289c:	432b      	orrs	r3, r5
    //MSB First
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800289e:	aa07      	add	r2, sp, #28
 80028a0:	ac0f      	add	r4, sp, #60	; 0x3c
 80028a2:	a917      	add	r1, sp, #92	; 0x5c
 80028a4:	46ec      	mov	ip, sp
	{
		(RGB & 0x00010000) != 0 ? (TempR[7-i] = WS2812_HIG) : (TempR[7-i] = WS2812_LOW);
 80028a6:	f44f 077e 	mov.w	r7, #16646144	; 0xfe0000
 80028aa:	4e24      	ldr	r6, [pc, #144]	; (800293c <WS2812_Set+0xdc>)
 80028ac:	e000      	b.n	80028b0 <WS2812_Set+0x50>
 80028ae:	462a      	mov	r2, r5
 80028b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028b4:	bf14      	ite	ne
 80028b6:	600e      	strne	r6, [r1, #0]
 80028b8:	600f      	streq	r7, [r1, #0]
		(RGB & 0x00000100) != 0 ? (TempG[7-i] = WS2812_HIG) : (TempG[7-i] = WS2812_LOW);
 80028ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028be:	bf14      	ite	ne
 80028c0:	6026      	strne	r6, [r4, #0]
 80028c2:	6027      	streq	r7, [r4, #0]
		(RGB & 0x00000001) != 0 ? (TempB[7-i] = WS2812_HIG) : (TempB[7-i] = WS2812_LOW);
 80028c4:	f013 0f01 	tst.w	r3, #1
 80028c8:	bf14      	ite	ne
 80028ca:	6016      	strne	r6, [r2, #0]
 80028cc:	6017      	streq	r7, [r2, #0]
    for( i = 0; i < 8; ++i,RGB>>=1 )
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	1f15      	subs	r5, r2, #4
 80028d2:	3c04      	subs	r4, #4
 80028d4:	3904      	subs	r1, #4
 80028d6:	4562      	cmp	r2, ip
 80028d8:	d1e9      	bne.n	80028ae <WS2812_Set+0x4e>
 80028da:	af0f      	add	r7, sp, #60	; 0x3c
 80028dc:	f10d 0e1c 	add.w	lr, sp, #28
 80028e0:	f1ad 0c04 	sub.w	ip, sp, #4
 80028e4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <WS2812_Set+0xe0>)
 80028ea:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
 80028ee:	2000      	movs	r0, #0
 80028f0:	f108 0804 	add.w	r8, r8, #4
 80028f4:	e002      	b.n	80028fc <WS2812_Set+0x9c>
	}

	for (uint8_t j = 0; j<8;j++)
 80028f6:	3003      	adds	r0, #3
 80028f8:	2818      	cmp	r0, #24
 80028fa:	d018      	beq.n	800292e <WS2812_Set+0xce>
	{
		for (i = 0; i < 3; i++)
		{
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[j] >> (16-8*i);
 80028fc:	f857 6f04 	ldr.w	r6, [r7, #4]!
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[j] >> (16-8*i);
 8002900:	f85e 5f04 	ldr.w	r5, [lr, #4]!
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[j] >> (16-8*i);
 8002904:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 8002908:	eb08 0200 	add.w	r2, r8, r0
 800290c:	2310      	movs	r3, #16
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[j] >> (16-8*i);
 800290e:	fa26 f103 	lsr.w	r1, r6, r3
 8002912:	7611      	strb	r1, [r2, #24]
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[j] >> (16-8*i);
 8002914:	fa25 f103 	lsr.w	r1, r5, r3
 8002918:	f802 1b01 	strb.w	r1, [r2], #1
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[j] >> (16-8*i);
 800291c:	fa24 f103 	lsr.w	r1, r4, r3
 8002920:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
		for (i = 0; i < 3; i++)
 8002924:	3b08      	subs	r3, #8
 8002926:	f113 0f08 	cmn.w	r3, #8
 800292a:	d1f0      	bne.n	800290e <WS2812_Set+0xae>
 800292c:	e7e3      	b.n	80028f6 <WS2812_Set+0x96>
		}
	}
}
 800292e:	b018      	add	sp, #96	; 0x60
 8002930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002934:	80808081 	.word	0x80808081
 8002938:	2000063e 	.word	0x2000063e
 800293c:	00fffc00 	.word	0x00fffc00
 8002940:	20000640 	.word	0x20000640

08002944 <WS2812_OneSet>:
//! \brief      Sets an LED in the array to a certain value
//! \details    Calculates and sets the color
//! \param[in]  uint8_t num		number of the LED in the array
//! \param[in]  uint32_t RGB	Color number
void WS2812_OneSet( uint8_t num, uint32_t RGB )
{
 8002944:	b530      	push	{r4, r5, lr}
 8002946:	b099      	sub	sp, #100	; 0x64
 8002948:	4686      	mov	lr, r0
    uint8_t i;
    uint32_t TempR[8], TempG[8], TempB[8];

    //MSB First
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800294a:	f10d 0c20 	add.w	ip, sp, #32
{
 800294e:	ac10      	add	r4, sp, #64	; 0x40
 8002950:	4662      	mov	r2, ip
 8002952:	466b      	mov	r3, sp
    {
        (RGB & 0x00010000) != 0 ? (TempR[i] = WS2812_HIG) : (TempR[i] = WS2812_LOW);
 8002954:	f44f 057e 	mov.w	r5, #16646144	; 0xfe0000
 8002958:	481d      	ldr	r0, [pc, #116]	; (80029d0 <WS2812_OneSet+0x8c>)
 800295a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800295e:	bf14      	ite	ne
 8002960:	6020      	strne	r0, [r4, #0]
 8002962:	6025      	streq	r5, [r4, #0]
        (RGB & 0x00000100) != 0 ? (TempG[i] = WS2812_HIG) : (TempG[i] = WS2812_LOW);
 8002964:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002968:	bf14      	ite	ne
 800296a:	6010      	strne	r0, [r2, #0]
 800296c:	6015      	streq	r5, [r2, #0]
        (RGB & 0x00000001) != 0 ? (TempB[i] = WS2812_HIG) : (TempB[i] = WS2812_LOW);
 800296e:	f011 0f01 	tst.w	r1, #1
 8002972:	bf14      	ite	ne
 8002974:	6018      	strne	r0, [r3, #0]
 8002976:	601d      	streq	r5, [r3, #0]
    for( i = 0; i < 8; ++i,RGB>>=1 )
 8002978:	0849      	lsrs	r1, r1, #1
 800297a:	3304      	adds	r3, #4
 800297c:	3204      	adds	r2, #4
 800297e:	3404      	adds	r4, #4
 8002980:	4563      	cmp	r3, ip
 8002982:	d1ea      	bne.n	800295a <WS2812_OneSet+0x16>
 8002984:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8002988:	4d12      	ldr	r5, [pc, #72]	; (80029d4 <WS2812_OneSet+0x90>)
 800298a:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
 800298e:	2400      	movs	r4, #0
 8002990:	3504      	adds	r5, #4
 8002992:	e002      	b.n	800299a <WS2812_OneSet+0x56>
    }

	for (uint8_t j = 0; j<8;j++)
 8002994:	3403      	adds	r4, #3
 8002996:	2c18      	cmp	r4, #24
 8002998:	d018      	beq.n	80029cc <WS2812_OneSet+0x88>
	{
		for (i = 0; i < 3; i++)
 800299a:	192a      	adds	r2, r5, r4
{
 800299c:	46ee      	mov	lr, sp
 800299e:	f10d 0c20 	add.w	ip, sp, #32
 80029a2:	a810      	add	r0, sp, #64	; 0x40
 80029a4:	2310      	movs	r3, #16
		{
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[i] >> (16-8*i);
 80029a6:	f850 1b04 	ldr.w	r1, [r0], #4
 80029aa:	40d9      	lsrs	r1, r3
 80029ac:	7611      	strb	r1, [r2, #24]
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[i] >> (16-8*i);
 80029ae:	f85c 1b04 	ldr.w	r1, [ip], #4
 80029b2:	40d9      	lsrs	r1, r3
 80029b4:	f802 1b01 	strb.w	r1, [r2], #1
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[i] >> (16-8*i);
 80029b8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80029bc:	40d9      	lsrs	r1, r3
 80029be:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
		for (i = 0; i < 3; i++)
 80029c2:	3b08      	subs	r3, #8
 80029c4:	f113 0f08 	cmn.w	r3, #8
 80029c8:	d1ed      	bne.n	80029a6 <WS2812_OneSet+0x62>
 80029ca:	e7e3      	b.n	8002994 <WS2812_OneSet+0x50>
		}
	}
}
 80029cc:	b019      	add	sp, #100	; 0x64
 80029ce:	bd30      	pop	{r4, r5, pc}
 80029d0:	00fffc00 	.word	0x00fffc00
 80029d4:	20000640 	.word	0x20000640

080029d8 <WS2812_Show>:


void WS2812_Show(void)
{
 80029d8:	b508      	push	{r3, lr}
#if (LED_SPI == 2)
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)&g_ws2812.Col[0].Buff, 72*WS2812_NUM);
#elif (LED_SPI == 1)
    HAL_SPI_Transmit_IT(&hspi1, (uint8_t*)&g_ws2812.Col[0].Buff, 72);
 80029da:	2248      	movs	r2, #72	; 0x48
 80029dc:	4902      	ldr	r1, [pc, #8]	; (80029e8 <WS2812_Show+0x10>)
 80029de:	4803      	ldr	r0, [pc, #12]	; (80029ec <WS2812_Show+0x14>)
 80029e0:	f001 fbac 	bl	800413c <HAL_SPI_Transmit_IT>
#endif
}
 80029e4:	bd08      	pop	{r3, pc}
 80029e6:	bf00      	nop
 80029e8:	20000644 	.word	0x20000644
 80029ec:	2000003c 	.word	0x2000003c

080029f0 <WS2812_CloseAll>:

void WS2812_CloseAll(void)
{
 80029f0:	b538      	push	{r3, r4, r5, lr}
 80029f2:	2400      	movs	r4, #0
    uint16_t i;

    for (i = 0; i < WS2812_NUM; ++i)
    {
        WS2812_OneSet(i, 0);
 80029f4:	4625      	mov	r5, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	b2e0      	uxtb	r0, r4
 80029fa:	f7ff ffa3 	bl	8002944 <WS2812_OneSet>
    for (i = 0; i < WS2812_NUM; ++i)
 80029fe:	3401      	adds	r4, #1
 8002a00:	2c05      	cmp	r4, #5
 8002a02:	d1f8      	bne.n	80029f6 <WS2812_CloseAll+0x6>
    }
    WS2812_Show();
 8002a04:	f7ff ffe8 	bl	80029d8 <WS2812_Show>
}
 8002a08:	bd38      	pop	{r3, r4, r5, pc}

08002a0a <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_DeInit>:
{
 8002a0c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_DeInit+0x20>)
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	619a      	str	r2, [r3, #24]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002a16:	2400      	movs	r4, #0
 8002a18:	619c      	str	r4, [r3, #24]
  __HAL_RCC_APB2_FORCE_RESET();
 8002a1a:	615a      	str	r2, [r3, #20]
  __HAL_RCC_APB2_RELEASE_RESET();
 8002a1c:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB_FORCE_RESET();
 8002a1e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB_RELEASE_RESET();
 8002a20:	611c      	str	r4, [r3, #16]
  HAL_MspDeInit();
 8002a22:	f7ff fff2 	bl	8002a0a <HAL_MspDeInit>
}
 8002a26:	4620      	mov	r0, r4
 8002a28:	bd10      	pop	{r4, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_InitTick+0x44>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b90b      	cbnz	r3, 8002a3a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002a38:	4770      	bx	lr
{
 8002a3a:	b510      	push	{r4, lr}
 8002a3c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_InitTick+0x48>)
 8002a48:	6810      	ldr	r0, [r2, #0]
 8002a4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a4e:	f000 f8c9 	bl	8002be4 <HAL_SYSTICK_Config>
 8002a52:	b968      	cbnz	r0, 8002a70 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a54:	2c0f      	cmp	r4, #15
 8002a56:	d901      	bls.n	8002a5c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002a58:	2001      	movs	r0, #1
 8002a5a:	e00a      	b.n	8002a72 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4621      	mov	r1, r4
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f000 f854 	bl	8002b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <HAL_InitTick+0x4c>)
 8002a6a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002a70:	2001      	movs	r0, #1
}
 8002a72:	bd10      	pop	{r4, pc}
 8002a74:	20000004 	.word	0x20000004
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000008 	.word	0x20000008

08002a80 <HAL_Init>:
{
 8002a80:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a82:	2003      	movs	r0, #3
 8002a84:	f000 f832 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a88:	200f      	movs	r0, #15
 8002a8a:	f7ff ffd1 	bl	8002a30 <HAL_InitTick>
 8002a8e:	b110      	cbz	r0, 8002a96 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002a90:	2401      	movs	r4, #1
}
 8002a92:	4620      	mov	r0, r4
 8002a94:	bd10      	pop	{r4, pc}
 8002a96:	4604      	mov	r4, r0
    HAL_MspInit();
 8002a98:	f7fd fe48 	bl	800072c <HAL_MspInit>
 8002a9c:	e7f9      	b.n	8002a92 <HAL_Init+0x12>
	...

08002aa0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002aa0:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <HAL_IncTick+0x10>)
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_IncTick+0x14>)
 8002aa6:	6809      	ldr	r1, [r1, #0]
 8002aa8:	440b      	add	r3, r1
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	200007ac 	.word	0x200007ac
 8002ab4:	20000004 	.word	0x20000004

08002ab8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ab8:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <HAL_GetTick+0x8>)
 8002aba:	6818      	ldr	r0, [r3, #0]
}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200007ac 	.word	0x200007ac

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fff6 	bl	8002ab8 <HAL_GetTick>
 8002acc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002ad2:	d002      	beq.n	8002ada <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_Delay+0x24>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	f7ff ffed 	bl	8002ab8 <HAL_GetTick>
 8002ade:	1b40      	subs	r0, r0, r5
 8002ae0:	42a0      	cmp	r0, r4
 8002ae2:	d3fa      	bcc.n	8002ada <HAL_Delay+0x16>
  {
  }
}
 8002ae4:	bd38      	pop	{r3, r4, r5, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002aee:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002af0:	0203      	lsls	r3, r0, #8
 8002af2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002afa:	0412      	lsls	r2, r2, #16
 8002afc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b08:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_NVIC_SetPriority+0x64>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1a:	f1c3 0c07 	rsb	ip, r3, #7
 8002b1e:	f1bc 0f04 	cmp.w	ip, #4
 8002b22:	bf28      	it	cs
 8002b24:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b28:	f103 0e04 	add.w	lr, r3, #4
 8002b2c:	f1be 0f06 	cmp.w	lr, #6
 8002b30:	bf8c      	ite	hi
 8002b32:	3b03      	subhi	r3, #3
 8002b34:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b36:	f04f 3eff 	mov.w	lr, #4294967295
 8002b3a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b3e:	ea21 010c 	bic.w	r1, r1, ip
 8002b42:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	fa0e f303 	lsl.w	r3, lr, r3
 8002b48:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	db09      	blt.n	8002b66 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	0109      	lsls	r1, r1, #4
 8002b54:	b2c9      	uxtb	r1, r1
 8002b56:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b5a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b5e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b62:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	f000 000f 	and.w	r0, r0, #15
 8002b6a:	0109      	lsls	r1, r1, #4
 8002b6c:	b2c9      	uxtb	r1, r1
 8002b6e:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <HAL_NVIC_SetPriority+0x68>)
 8002b70:	5419      	strb	r1, [r3, r0]
 8002b72:	e7f6      	b.n	8002b62 <HAL_NVIC_SetPriority+0x52>
 8002b74:	e000ed00 	.word	0xe000ed00
 8002b78:	e000ed14 	.word	0xe000ed14

08002b7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	db08      	blt.n	8002b92 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b80:	0942      	lsrs	r2, r0, #5
 8002b82:	f000 001f 	and.w	r0, r0, #31
 8002b86:	2301      	movs	r3, #1
 8002b88:	fa03 f000 	lsl.w	r0, r3, r0
 8002b8c:	4b01      	ldr	r3, [pc, #4]	; (8002b94 <HAL_NVIC_EnableIRQ+0x18>)
 8002b8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	db0d      	blt.n	8002bb8 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9c:	0943      	lsrs	r3, r0, #5
 8002b9e:	f000 001f 	and.w	r0, r0, #31
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	fa02 f000 	lsl.w	r0, r2, r0
 8002ba8:	3320      	adds	r3, #32
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_NVIC_DisableIRQ+0x24>)
 8002bac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8002bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bb4:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8002bc0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bc4:	4905      	ldr	r1, [pc, #20]	; (8002bdc <HAL_NVIC_SystemReset+0x1c>)
 8002bc6:	68ca      	ldr	r2, [r1, #12]
 8002bc8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_NVIC_SystemReset+0x20>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60cb      	str	r3, [r1, #12]
 8002bd2:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002bd6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002bd8:	e7fd      	b.n	8002bd6 <HAL_NVIC_SystemReset+0x16>
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00
 8002be0:	05fa0004 	.word	0x05fa0004

08002be4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	3801      	subs	r0, #1
 8002be6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bea:	d20b      	bcs.n	8002c04 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002bf0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <HAL_SYSTICK_Config+0x24>)
 8002bf4:	21f0      	movs	r1, #240	; 0xf0
 8002bf6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	2207      	movs	r2, #7
 8002c00:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c02:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c04:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d03a      	beq.n	8002c86 <HAL_DMA_Init+0x7a>
{
 8002c10:	b410      	push	{r4}
 8002c12:	4602      	mov	r2, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c14:	6800      	ldr	r0, [r0, #0]
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_DMA_Init+0x80>)
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	d829      	bhi.n	8002c70 <HAL_DMA_Init+0x64>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_DMA_Init+0x84>)
 8002c1e:	4403      	add	r3, r0
 8002c20:	491c      	ldr	r1, [pc, #112]	; (8002c94 <HAL_DMA_Init+0x88>)
 8002c22:	fba1 1303 	umull	r1, r3, r1, r3
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_DMA_Init+0x8c>)
 8002c2e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c36:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002c38:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002c3c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c40:	6853      	ldr	r3, [r2, #4]
 8002c42:	6894      	ldr	r4, [r2, #8]
 8002c44:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c46:	68d4      	ldr	r4, [r2, #12]
 8002c48:	4323      	orrs	r3, r4
 8002c4a:	6914      	ldr	r4, [r2, #16]
 8002c4c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4e:	6954      	ldr	r4, [r2, #20]
 8002c50:	4323      	orrs	r3, r4
 8002c52:	6994      	ldr	r4, [r2, #24]
 8002c54:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c56:	69d4      	ldr	r4, [r2, #28]
 8002c58:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002c5a:	430b      	orrs	r3, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c5c:	6003      	str	r3, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c68:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8002c6c:	bc10      	pop	{r4}
 8002c6e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_DMA_Init+0x90>)
 8002c72:	4403      	add	r3, r0
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <HAL_DMA_Init+0x88>)
 8002c76:	fba1 1303 	umull	r1, r3, r1, r3
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_DMA_Init+0x94>)
 8002c82:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002c84:	e7d4      	b.n	8002c30 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 8002c86:	2001      	movs	r0, #1
}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40026407 	.word	0x40026407
 8002c90:	bffd9ff8 	.word	0xbffd9ff8
 8002c94:	cccccccd 	.word	0xcccccccd
 8002c98:	40026000 	.word	0x40026000
 8002c9c:	bffd9bf8 	.word	0xbffd9bf8
 8002ca0:	40026400 	.word	0x40026400

08002ca4 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ca4:	f890 c020 	ldrb.w	ip, [r0, #32]
 8002ca8:	f1bc 0f01 	cmp.w	ip, #1
 8002cac:	d04a      	beq.n	8002d44 <HAL_DMA_Start_IT+0xa0>
 8002cae:	f04f 0c01 	mov.w	ip, #1
 8002cb2:	f880 c020 	strb.w	ip, [r0, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cb6:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 8002cba:	fa5f fc8c 	uxtb.w	ip, ip
 8002cbe:	f1bc 0f01 	cmp.w	ip, #1
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cca:	2002      	movs	r0, #2
 8002ccc:	4770      	bx	lr
{
 8002cce:	b430      	push	{r4, r5}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	2402      	movs	r4, #2
 8002cd2:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd6:	2400      	movs	r4, #0
 8002cd8:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002cda:	6805      	ldr	r5, [r0, #0]
 8002cdc:	682c      	ldr	r4, [r5, #0]
 8002cde:	f024 0401 	bic.w	r4, r4, #1
 8002ce2:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ce4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ce6:	f004 0c1c 	and.w	ip, r4, #28
 8002cea:	2401      	movs	r4, #1
 8002cec:	fa04 f40c 	lsl.w	r4, r4, ip
 8002cf0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002cf2:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cf4:	6804      	ldr	r4, [r0, #0]
 8002cf6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cf8:	6843      	ldr	r3, [r0, #4]
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d012      	beq.n	8002d24 <HAL_DMA_Start_IT+0x80>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002cfe:	6803      	ldr	r3, [r0, #0]
 8002d00:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002d02:	6803      	ldr	r3, [r0, #0]
 8002d04:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002d06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d08:	b18b      	cbz	r3, 8002d2e <HAL_DMA_Start_IT+0x8a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0a:	6802      	ldr	r2, [r0, #0]
 8002d0c:	6813      	ldr	r3, [r2, #0]
 8002d0e:	f043 030e 	orr.w	r3, r3, #14
 8002d12:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002d14:	6802      	ldr	r2, [r0, #0]
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2000      	movs	r0, #0
}
 8002d20:	bc30      	pop	{r4, r5}
 8002d22:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002d24:	6803      	ldr	r3, [r0, #0]
 8002d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002d28:	6803      	ldr	r3, [r0, #0]
 8002d2a:	60d9      	str	r1, [r3, #12]
 8002d2c:	e7eb      	b.n	8002d06 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d2e:	6802      	ldr	r2, [r0, #0]
 8002d30:	6813      	ldr	r3, [r2, #0]
 8002d32:	f023 0304 	bic.w	r3, r3, #4
 8002d36:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d38:	6802      	ldr	r2, [r0, #0]
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	f043 030a 	orr.w	r3, r3, #10
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e7e7      	b.n	8002d14 <HAL_DMA_Start_IT+0x70>
  __HAL_LOCK(hdma);
 8002d44:	2002      	movs	r0, #2
}
 8002d46:	4770      	bx	lr

08002d48 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d48:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d006      	beq.n	8002d60 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d52:	2304      	movs	r3, #4
 8002d54:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002d56:	2300      	movs	r3, #0
 8002d58:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d60:	6802      	ldr	r2, [r0, #0]
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	f023 030e 	bic.w	r3, r3, #14
 8002d68:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	6802      	ldr	r2, [r0, #0]
 8002d6c:	6813      	ldr	r3, [r2, #0]
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d74:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002d76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d78:	f003 031c 	and.w	r3, r3, #28
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002d84:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f880 3020 	strb.w	r3, [r0, #32]
    return status;
 8002d8e:	4618      	mov	r0, r3
}
 8002d90:	4770      	bx	lr

08002d92 <HAL_DMA_Abort_IT>:
{
 8002d92:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d94:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d003      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9e:	2304      	movs	r3, #4
 8002da0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002da2:	2001      	movs	r0, #1
}
 8002da4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da6:	6802      	ldr	r2, [r0, #0]
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	f023 030e 	bic.w	r3, r3, #14
 8002dae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002db0:	6802      	ldr	r2, [r0, #0]
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dba:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002dbc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002dbe:	f003 031c 	and.w	r3, r3, #28
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002dca:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002dd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dd6:	b113      	cbz	r3, 8002dde <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8002dd8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2000      	movs	r0, #0
 8002ddc:	e7e2      	b.n	8002da4 <HAL_DMA_Abort_IT+0x12>
 8002dde:	2000      	movs	r0, #0
 8002de0:	e7e0      	b.n	8002da4 <HAL_DMA_Abort_IT+0x12>

08002de2 <HAL_DMA_IRQHandler>:
{
 8002de2:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002de4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002de6:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002de8:	6804      	ldr	r4, [r0, #0]
 8002dea:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002dee:	f003 031c 	and.w	r3, r3, #28
 8002df2:	2204      	movs	r2, #4
 8002df4:	409a      	lsls	r2, r3
 8002df6:	420a      	tst	r2, r1
 8002df8:	d015      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x44>
 8002dfa:	f015 0f04 	tst.w	r5, #4
 8002dfe:	d012      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x44>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f013 0f20 	tst.w	r3, #32
 8002e06:	d103      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	f023 0304 	bic.w	r3, r3, #4
 8002e0e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e10:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002e12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e14:	f003 021c 	and.w	r2, r3, #28
 8002e18:	2304      	movs	r3, #4
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002e1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e20:	b103      	cbz	r3, 8002e24 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8002e22:	4798      	blx	r3
}
 8002e24:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e26:	2202      	movs	r2, #2
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	420a      	tst	r2, r1
 8002e2c:	d01c      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x86>
 8002e2e:	f015 0f02 	tst.w	r5, #2
 8002e32:	d019      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	f013 0f20 	tst.w	r3, #32
 8002e3a:	d106      	bne.n	8002e4a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	f023 030a 	bic.w	r3, r3, #10
 8002e42:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e4a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002e4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e4e:	f003 021c 	and.w	r2, r3, #28
 8002e52:	2302      	movs	r3, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002e5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0df      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002e64:	4798      	blx	r3
 8002e66:	e7dd      	b.n	8002e24 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e68:	2208      	movs	r2, #8
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	420b      	tst	r3, r1
 8002e70:	d0d8      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x42>
 8002e72:	f015 0f08 	tst.w	r5, #8
 8002e76:	d0d5      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	f023 030e 	bic.w	r3, r3, #14
 8002e7e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e80:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002e82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e84:	f003 031c 	and.w	r3, r3, #28
 8002e88:	2201      	movs	r2, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e90:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002e92:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002e96:	2300      	movs	r3, #0
 8002e98:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002e9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0c0      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002ea2:	4798      	blx	r3
  return;
 8002ea4:	e7be      	b.n	8002e24 <HAL_DMA_IRQHandler+0x42>
	...

08002ea8 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <FLASH_SetErrorCode+0x98>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002eb0:	d006      	beq.n	8002ec0 <FLASH_SetErrorCode+0x18>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002eb2:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <FLASH_SetErrorCode+0x9c>)
 8002eb4:	6953      	ldr	r3, [r2, #20]
 8002eb6:	f043 0302 	orr.w	r3, r3, #2
 8002eba:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <FLASH_SetErrorCode+0x98>)
 8002ec2:	6992      	ldr	r2, [r2, #24]
 8002ec4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002ec8:	d006      	beq.n	8002ed8 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002eca:	491e      	ldr	r1, [pc, #120]	; (8002f44 <FLASH_SetErrorCode+0x9c>)
 8002ecc:	694a      	ldr	r2, [r1, #20]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002ed8:	4a19      	ldr	r2, [pc, #100]	; (8002f40 <FLASH_SetErrorCode+0x98>)
 8002eda:	6992      	ldr	r2, [r2, #24]
 8002edc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002ee0:	d006      	beq.n	8002ef0 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002ee2:	4918      	ldr	r1, [pc, #96]	; (8002f44 <FLASH_SetErrorCode+0x9c>)
 8002ee4:	694a      	ldr	r2, [r1, #20]
 8002ee6:	f042 0204 	orr.w	r2, r2, #4
 8002eea:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <FLASH_SetErrorCode+0x98>)
 8002ef2:	6992      	ldr	r2, [r2, #24]
 8002ef4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002ef8:	d006      	beq.n	8002f08 <FLASH_SetErrorCode+0x60>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002efa:	4912      	ldr	r1, [pc, #72]	; (8002f44 <FLASH_SetErrorCode+0x9c>)
 8002efc:	694a      	ldr	r2, [r1, #20]
 8002efe:	f042 0210 	orr.w	r2, r2, #16
 8002f02:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 8002f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <FLASH_SetErrorCode+0x98>)
 8002f0a:	6992      	ldr	r2, [r2, #24]
 8002f0c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002f10:	d006      	beq.n	8002f20 <FLASH_SetErrorCode+0x78>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 8002f12:	490c      	ldr	r1, [pc, #48]	; (8002f44 <FLASH_SetErrorCode+0x9c>)
 8002f14:	694a      	ldr	r2, [r1, #20]
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 8002f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <FLASH_SetErrorCode+0x98>)
 8002f22:	6992      	ldr	r2, [r2, #24]
 8002f24:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002f28:	d006      	beq.n	8002f38 <FLASH_SetErrorCode+0x90>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002f2a:	4906      	ldr	r1, [pc, #24]	; (8002f44 <FLASH_SetErrorCode+0x9c>)
 8002f2c:	694a      	ldr	r2, [r1, #20]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f38:	4a01      	ldr	r2, [pc, #4]	; (8002f40 <FLASH_SetErrorCode+0x98>)
 8002f3a:	6193      	str	r3, [r2, #24]
}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	200007b0 	.word	0x200007b0

08002f48 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_FLASH_Unlock+0x4c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f013 0f02 	tst.w	r3, #2
 8002f50:	d01b      	beq.n	8002f8a <HAL_FLASH_Unlock+0x42>
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_FLASH_Unlock+0x4c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f013 0f01 	tst.w	r3, #1
 8002f5a:	d008      	beq.n	8002f6e <HAL_FLASH_Unlock+0x26>
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_FLASH_Unlock+0x4c>)
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_FLASH_Unlock+0x50>)
 8002f60:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_FLASH_Unlock+0x54>)
 8002f64:	60da      	str	r2, [r3, #12]
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f013 0f01 	tst.w	r3, #1
 8002f6c:	d10f      	bne.n	8002f8e <HAL_FLASH_Unlock+0x46>
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_FLASH_Unlock+0x4c>)
 8002f70:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <HAL_FLASH_Unlock+0x58>)
 8002f72:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8002f74:	f1a2 42f3 	sub.w	r2, r2, #2038431744	; 0x79800000
 8002f78:	f5a2 2219 	sub.w	r2, r2, #626688	; 0x99000
 8002f7c:	f6a2 12a9 	subw	r2, r2, #2473	; 0x9a9
 8002f80:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002f82:	6858      	ldr	r0, [r3, #4]
        return HAL_ERROR;
 8002f84:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002f88:	4770      	bx	lr
  return HAL_OK; 
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	4770      	bx	lr
        return HAL_ERROR;
 8002f8e:	2001      	movs	r0, #1
}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00
 8002f98:	89abcdef 	.word	0x89abcdef
 8002f9c:	02030405 	.word	0x02030405
 8002fa0:	8c9daebf 	.word	0x8c9daebf

08002fa4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <HAL_FLASH_Lock+0x10>)
 8002fa6:	6853      	ldr	r3, [r2, #4]
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6053      	str	r3, [r2, #4]
}
 8002fae:	2000      	movs	r0, #0
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <FLASH_WaitForLastOperation>:
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff fd7c 	bl	8002ab8 <HAL_GetTick>
 8002fc0:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002fc2:	4d1f      	ldr	r5, [pc, #124]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 8002fc4:	69ab      	ldr	r3, [r5, #24]
 8002fc6:	f013 0f01 	tst.w	r3, #1
 8002fca:	d00b      	beq.n	8002fe4 <FLASH_WaitForLastOperation+0x2c>
    if (Timeout != HAL_MAX_DELAY)
 8002fcc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002fd0:	d0f8      	beq.n	8002fc4 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002fd2:	2c00      	cmp	r4, #0
 8002fd4:	d032      	beq.n	800303c <FLASH_WaitForLastOperation+0x84>
 8002fd6:	f7ff fd6f 	bl	8002ab8 <HAL_GetTick>
 8002fda:	1b80      	subs	r0, r0, r6
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d9f1      	bls.n	8002fc4 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	e02a      	b.n	800303a <FLASH_WaitForLastOperation+0x82>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f013 0f02 	tst.w	r3, #2
 8002fec:	d002      	beq.n	8002ff4 <FLASH_WaitForLastOperation+0x3c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	619a      	str	r2, [r3, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ffc:	d11a      	bne.n	8003034 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 8003000:	699b      	ldr	r3, [r3, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003002:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003006:	d115      	bne.n	8003034 <FLASH_WaitForLastOperation+0x7c>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 800300a:	699b      	ldr	r3, [r3, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800300c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003010:	d110      	bne.n	8003034 <FLASH_WaitForLastOperation+0x7c>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 8003014:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 8003016:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800301a:	d10b      	bne.n	8003034 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800301c:	4b08      	ldr	r3, [pc, #32]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 800301e:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8003020:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003024:	d106      	bne.n	8003034 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <FLASH_WaitForLastOperation+0x88>)
 8003028:	699b      	ldr	r3, [r3, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800302a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800302e:	d101      	bne.n	8003034 <FLASH_WaitForLastOperation+0x7c>
  return HAL_OK;
 8003030:	2000      	movs	r0, #0
 8003032:	e002      	b.n	800303a <FLASH_WaitForLastOperation+0x82>
    FLASH_SetErrorCode();
 8003034:	f7ff ff38 	bl	8002ea8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003038:	2001      	movs	r0, #1
}
 800303a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800303c:	2003      	movs	r0, #3
 800303e:	e7fc      	b.n	800303a <FLASH_WaitForLastOperation+0x82>
 8003040:	40023c00 	.word	0x40023c00

08003044 <HAL_FLASH_Program>:
{
 8003044:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_FLASH_Program+0x3c>)
 8003048:	7c1b      	ldrb	r3, [r3, #16]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d016      	beq.n	800307c <HAL_FLASH_Program+0x38>
 800304e:	460d      	mov	r5, r1
 8003050:	4614      	mov	r4, r2
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_FLASH_Program+0x3c>)
 8003054:	2201      	movs	r2, #1
 8003056:	741a      	strb	r2, [r3, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800305c:	f7ff ffac 	bl	8002fb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003060:	b118      	cbz	r0, 800306a <HAL_FLASH_Program+0x26>
  __HAL_UNLOCK(&pFlash);
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_FLASH_Program+0x3c>)
 8003064:	2200      	movs	r2, #0
 8003066:	741a      	strb	r2, [r3, #16]
}
 8003068:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_FLASH_Program+0x3c>)
 800306c:	2200      	movs	r2, #0
 800306e:	615a      	str	r2, [r3, #20]
    *(__IO uint32_t *)Address = Data;
 8003070:	602c      	str	r4, [r5, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003072:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003076:	f7ff ff9f 	bl	8002fb8 <FLASH_WaitForLastOperation>
 800307a:	e7f2      	b.n	8003062 <HAL_FLASH_Program+0x1e>
  __HAL_LOCK(&pFlash);
 800307c:	2002      	movs	r0, #2
 800307e:	e7f3      	b.n	8003068 <HAL_FLASH_Program+0x24>
 8003080:	200007b0 	.word	0x200007b0

08003084 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f013 0f01 	tst.w	r3, #1
 800308c:	d006      	beq.n	800309c <HAL_FLASHEx_DATAEEPROM_Unlock+0x18>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>)
 8003092:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
 8003096:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8003098:	2000      	movs	r0, #0
 800309a:	4770      	bx	lr
    return HAL_ERROR;
 800309c:	2001      	movs	r0, #1
}
 800309e:	4770      	bx	lr
 80030a0:	40023c00 	.word	0x40023c00
 80030a4:	89abcdef 	.word	0x89abcdef
 80030a8:	02030405 	.word	0x02030405

080030ac <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80030ac:	4a03      	ldr	r2, [pc, #12]	; (80030bc <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 80030ae:	6853      	ldr	r3, [r2, #4]
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
}
 80030b6:	2000      	movs	r0, #0
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00

080030c0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4604      	mov	r4, r0
 80030c4:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030ca:	f7ff ff75 	bl	8002fb8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 80030ce:	b990      	cbnz	r0, 80030f6 <HAL_FLASHEx_DATAEEPROM_Erase+0x36>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_FLASHEx_DATAEEPROM_Erase+0x38>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 80030d6:	2c02      	cmp	r4, #2
 80030d8:	d004      	beq.n	80030e4 <HAL_FLASHEx_DATAEEPROM_Erase+0x24>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 80030da:	2c01      	cmp	r4, #1
 80030dc:	d104      	bne.n	80030e8 <HAL_FLASHEx_DATAEEPROM_Erase+0x28>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 80030de:	2300      	movs	r3, #0
 80030e0:	802b      	strh	r3, [r5, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 80030e2:	e004      	b.n	80030ee <HAL_FLASHEx_DATAEEPROM_Erase+0x2e>
      *(__IO uint32_t *) Address = 0x00000000U;
 80030e4:	602a      	str	r2, [r5, #0]
    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 80030e6:	e002      	b.n	80030ee <HAL_FLASHEx_DATAEEPROM_Erase+0x2e>
 80030e8:	b90c      	cbnz	r4, 80030ee <HAL_FLASHEx_DATAEEPROM_Erase+0x2e>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 80030ea:	2300      	movs	r3, #0
 80030ec:	702b      	strb	r3, [r5, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030f2:	f7ff ff61 	bl	8002fb8 <FLASH_WaitForLastOperation>
  }

  /* Return the erase status */
  return status;
}
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	200007b0 	.word	0x200007b0

080030fc <HAL_FLASHEx_DATAEEPROM_Program>:
HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030fc:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 80030fe:	7c1b      	ldrb	r3, [r3, #16]
 8003100:	2b01      	cmp	r3, #1
 8003102:	f000 8088 	beq.w	8003216 <HAL_FLASHEx_DATAEEPROM_Program+0x11a>
{
 8003106:	b570      	push	{r4, r5, r6, lr}
 8003108:	4604      	mov	r4, r0
 800310a:	460e      	mov	r6, r1
 800310c:	4615      	mov	r5, r2
  __HAL_LOCK(&pFlash);
 800310e:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 8003110:	2201      	movs	r2, #1
 8003112:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003114:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003118:	f7ff ff4e 	bl	8002fb8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800311c:	4603      	mov	r3, r0
 800311e:	b970      	cbnz	r0, 800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003120:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003126:	2c02      	cmp	r4, #2
 8003128:	d00e      	beq.n	8003148 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800312a:	2c01      	cmp	r4, #1
 800312c:	d01a      	beq.n	8003164 <HAL_FLASHEx_DATAEEPROM_Program+0x68>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800312e:	b344      	cbz	r4, 8003182 <HAL_FLASHEx_DATAEEPROM_Program+0x86>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8003130:	2c04      	cmp	r4, #4
 8003132:	d035      	beq.n	80031a0 <HAL_FLASHEx_DATAEEPROM_Program+0xa4>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8003134:	2c08      	cmp	r4, #8
 8003136:	d047      	beq.n	80031c8 <HAL_FLASHEx_DATAEEPROM_Program+0xcc>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8003138:	2c10      	cmp	r4, #16
 800313a:	d059      	beq.n	80031f0 <HAL_FLASHEx_DATAEEPROM_Program+0xf4>
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
    }
    else
    {
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800313e:	4a37      	ldr	r2, [pc, #220]	; (800321c <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 8003140:	2100      	movs	r1, #0
 8003142:	7411      	strb	r1, [r2, #16]

  return status;
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd70      	pop	{r4, r5, r6, pc}

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003148:	f24c 3050 	movw	r0, #50000	; 0xc350
 800314c:	f7ff ff34 	bl	8002fb8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8003150:	4603      	mov	r3, r0
 8003152:	2800      	cmp	r0, #0
 8003154:	d1f3      	bne.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
    *(__IO uint32_t *)Address = Data;
 8003156:	6035      	str	r5, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800315c:	f7ff ff2c 	bl	8002fb8 <FLASH_WaitForLastOperation>
 8003160:	4603      	mov	r3, r0
 8003162:	e7ec      	b.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003164:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003168:	f7ff ff26 	bl	8002fb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800316c:	4603      	mov	r3, r0
 800316e:	2800      	cmp	r0, #0
 8003170:	d1e5      	bne.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8003172:	b2aa      	uxth	r2, r5
    *(__IO uint16_t *)Address = Data;
 8003174:	8032      	strh	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003176:	f24c 3050 	movw	r0, #50000	; 0xc350
 800317a:	f7ff ff1d 	bl	8002fb8 <FLASH_WaitForLastOperation>
 800317e:	4603      	mov	r3, r0
 8003180:	e7dd      	b.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003182:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003186:	f7ff ff17 	bl	8002fb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800318a:	4603      	mov	r3, r0
 800318c:	2800      	cmp	r0, #0
 800318e:	d1d6      	bne.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8003190:	b2ea      	uxtb	r2, r5
    *(__IO uint8_t *)Address = Data;
 8003192:	7032      	strb	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003194:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003198:	f7ff ff0e 	bl	8002fb8 <FLASH_WaitForLastOperation>
 800319c:	4603      	mov	r3, r0
 800319e:	e7ce      	b.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031a4:	f7ff ff08 	bl	8002fb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80031a8:	4603      	mov	r3, r0
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d1c7      	bne.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_FLASHEx_DATAEEPROM_Program+0x124>)
 80031b0:	6853      	ldr	r3, [r2, #4]
 80031b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b6:	6053      	str	r3, [r2, #4]
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80031b8:	b2ea      	uxtb	r2, r5
    *(__IO uint8_t *)Address = Data;
 80031ba:	7032      	strb	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031c0:	f7ff fefa 	bl	8002fb8 <FLASH_WaitForLastOperation>
 80031c4:	4603      	mov	r3, r0
 80031c6:	e7ba      	b.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031cc:	f7ff fef4 	bl	8002fb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80031d0:	4603      	mov	r3, r0
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d1b3      	bne.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <HAL_FLASHEx_DATAEEPROM_Program+0x124>)
 80031d8:	6853      	ldr	r3, [r2, #4]
 80031da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031de:	6053      	str	r3, [r2, #4]
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 80031e0:	b2aa      	uxth	r2, r5
    *(__IO uint16_t *)Address = Data;
 80031e2:	8032      	strh	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031e8:	f7ff fee6 	bl	8002fb8 <FLASH_WaitForLastOperation>
 80031ec:	4603      	mov	r3, r0
 80031ee:	e7a6      	b.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031f4:	f7ff fee0 	bl	8002fb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80031f8:	4603      	mov	r3, r0
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d19f      	bne.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_FLASHEx_DATAEEPROM_Program+0x124>)
 8003200:	6853      	ldr	r3, [r2, #4]
 8003202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003206:	6053      	str	r3, [r2, #4]
    *(__IO uint32_t *)Address = Data;
 8003208:	6035      	str	r5, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800320a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800320e:	f7ff fed3 	bl	8002fb8 <FLASH_WaitForLastOperation>
 8003212:	4603      	mov	r3, r0
 8003214:	e793      	b.n	800313e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  __HAL_LOCK(&pFlash);
 8003216:	2302      	movs	r3, #2
}
 8003218:	4618      	mov	r0, r3
 800321a:	4770      	bx	lr
 800321c:	200007b0 	.word	0x200007b0
 8003220:	40023c00 	.word	0x40023c00

08003224 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003224:	2100      	movs	r1, #0
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <FLASH_PageErase+0x20>)
 8003228:	6159      	str	r1, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <FLASH_PageErase+0x24>)
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003232:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800323c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003240:	6001      	str	r1, [r0, #0]
}
 8003242:	4770      	bx	lr
 8003244:	200007b0 	.word	0x200007b0
 8003248:	40023c00 	.word	0x40023c00

0800324c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_FLASHEx_Erase+0x84>)
 800324e:	7c1b      	ldrb	r3, [r3, #16]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d03a      	beq.n	80032ca <HAL_FLASHEx_Erase+0x7e>
{
 8003254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003258:	4606      	mov	r6, r0
 800325a:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <HAL_FLASHEx_Erase+0x84>)
 800325e:	2201      	movs	r2, #1
 8003260:	741a      	strb	r2, [r3, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003262:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003266:	f7ff fea7 	bl	8002fb8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800326a:	4601      	mov	r1, r0
 800326c:	bb38      	cbnz	r0, 80032be <HAL_FLASHEx_Erase+0x72>
    *PageError = 0xFFFFFFFFU;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	f8c8 3000 	str.w	r3, [r8]
    for(address = pEraseInit->PageAddress;
 8003276:	6874      	ldr	r4, [r6, #4]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003278:	68b3      	ldr	r3, [r6, #8]
 800327a:	eb04 2303 	add.w	r3, r4, r3, lsl #8
    for(address = pEraseInit->PageAddress;
 800327e:	429c      	cmp	r4, r3
 8003280:	d21d      	bcs.n	80032be <HAL_FLASHEx_Erase+0x72>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003282:	f24c 3750 	movw	r7, #50000	; 0xc350
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003286:	4d13      	ldr	r5, [pc, #76]	; (80032d4 <HAL_FLASHEx_Erase+0x88>)
      FLASH_PageErase(address);
 8003288:	4620      	mov	r0, r4
 800328a:	f7ff ffcb 	bl	8003224 <FLASH_PageErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800328e:	4638      	mov	r0, r7
 8003290:	f7ff fe92 	bl	8002fb8 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003294:	686b      	ldr	r3, [r5, #4]
 8003296:	f023 0308 	bic.w	r3, r3, #8
 800329a:	606b      	str	r3, [r5, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800329c:	686b      	ldr	r3, [r5, #4]
 800329e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a2:	606b      	str	r3, [r5, #4]
      if (status != HAL_OK)
 80032a4:	4601      	mov	r1, r0
 80032a6:	b940      	cbnz	r0, 80032ba <HAL_FLASHEx_Erase+0x6e>
        address += FLASH_PAGE_SIZE)
 80032a8:	f504 7480 	add.w	r4, r4, #256	; 0x100
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80032ac:	68b2      	ldr	r2, [r6, #8]
 80032ae:	6873      	ldr	r3, [r6, #4]
 80032b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    for(address = pEraseInit->PageAddress;
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	d8e7      	bhi.n	8003288 <HAL_FLASHEx_Erase+0x3c>
 80032b8:	e001      	b.n	80032be <HAL_FLASHEx_Erase+0x72>
        *PageError = address;
 80032ba:	f8c8 4000 	str.w	r4, [r8]
  __HAL_UNLOCK(&pFlash);
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_FLASHEx_Erase+0x84>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	741a      	strb	r2, [r3, #16]
}
 80032c4:	4608      	mov	r0, r1
 80032c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(&pFlash);
 80032ca:	2102      	movs	r1, #2
}
 80032cc:	4608      	mov	r0, r1
 80032ce:	4770      	bx	lr
 80032d0:	200007b0 	.word	0x200007b0
 80032d4:	40023c00 	.word	0x40023c00

080032d8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80032d8:	680b      	ldr	r3, [r1, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80d6 	beq.w	800348c <HAL_GPIO_Init+0x1b4>
{
 80032e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e4:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 80032e6:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00;
 80032ea:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80032ec:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80032ee:	f04f 0e03 	mov.w	lr, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	4e67      	ldr	r6, [pc, #412]	; (8003490 <HAL_GPIO_Init+0x1b8>)

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032f4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8003494 <HAL_GPIO_Init+0x1bc>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f8:	4c67      	ldr	r4, [pc, #412]	; (8003498 <HAL_GPIO_Init+0x1c0>)
 80032fa:	e04c      	b.n	8003396 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 80032fc:	6883      	ldr	r3, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032fe:	fa0e fa0c 	lsl.w	sl, lr, ip
 8003302:	ea23 0a0a 	bic.w	sl, r3, sl
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003306:	68cb      	ldr	r3, [r1, #12]
 8003308:	fa03 f30c 	lsl.w	r3, r3, ip
 800330c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8003310:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8003312:	6843      	ldr	r3, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003314:	ea23 0a07 	bic.w	sl, r3, r7
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003318:	684b      	ldr	r3, [r1, #4]
 800331a:	f3c3 1700 	ubfx	r7, r3, #4, #1
 800331e:	4097      	lsls	r7, r2
 8003320:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8003324:	6047      	str	r7, [r0, #4]
 8003326:	e041      	b.n	80033ac <HAL_GPIO_Init+0xd4>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003328:	2700      	movs	r7, #0
 800332a:	fa07 f70b 	lsl.w	r7, r7, fp
 800332e:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8003332:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8003334:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003336:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800333a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800333e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003342:	bf0c      	ite	eq
 8003344:	403b      	andeq	r3, r7
        {
          SET_BIT(temp, iocurrent);
 8003346:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->IMR = temp;
 800334a:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 800334c:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003352:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003356:	bf0c      	ite	eq
 8003358:	403b      	andeq	r3, r7
        {
          SET_BIT(temp, iocurrent);
 800335a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR = temp;
 800335e:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003360:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003362:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003366:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800336a:	bf0c      	ite	eq
 800336c:	403b      	andeq	r3, r7
        {
          SET_BIT(temp, iocurrent);
 800336e:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR = temp;
 8003372:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8003374:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003376:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800337a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800337e:	bf0c      	ite	eq
 8003380:	401f      	andeq	r7, r3
        {
          SET_BIT(temp, iocurrent);
 8003382:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->FTSR = temp;
 8003386:	60e7      	str	r7, [r4, #12]
      }
    }

    position++;
 8003388:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800338a:	680b      	ldr	r3, [r1, #0]
 800338c:	f10c 0c02 	add.w	ip, ip, #2
 8003390:	fa33 f702 	lsrs.w	r7, r3, r2
 8003394:	d077      	beq.n	8003486 <HAL_GPIO_Init+0x1ae>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003396:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent)
 800339a:	ea17 0903 	ands.w	r9, r7, r3
 800339e:	d0f3      	beq.n	8003388 <HAL_GPIO_Init+0xb0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033a0:	684b      	ldr	r3, [r1, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d9a7      	bls.n	80032fc <HAL_GPIO_Init+0x24>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	684b      	ldr	r3, [r1, #4]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d022      	beq.n	80033fc <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 80033b6:	68c3      	ldr	r3, [r0, #12]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80033b8:	fa0e f70c 	lsl.w	r7, lr, ip
 80033bc:	ea23 0707 	bic.w	r7, r3, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80033c0:	688b      	ldr	r3, [r1, #8]
 80033c2:	fa03 f30c 	lsl.w	r3, r3, ip
 80033c6:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80033c8:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	684b      	ldr	r3, [r1, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d113      	bne.n	80033fc <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3];
 80033d4:	08d7      	lsrs	r7, r2, #3
 80033d6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80033da:	f8d7 a020 	ldr.w	sl, [r7, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80033de:	f002 0307 	and.w	r3, r2, #7
 80033e2:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80033e6:	230f      	movs	r3, #15
 80033e8:	fa03 f30b 	lsl.w	r3, r3, fp
 80033ec:	ea2a 0a03 	bic.w	sl, sl, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80033f0:	690b      	ldr	r3, [r1, #16]
 80033f2:	fa03 f30b 	lsl.w	r3, r3, fp
 80033f6:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 80033fa:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80033fc:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80033fe:	fa0e f70c 	lsl.w	r7, lr, ip
 8003402:	ea23 0707 	bic.w	r7, r3, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003406:	684b      	ldr	r3, [r1, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	fa03 f30c 	lsl.w	r3, r3, ip
 8003410:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8003412:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003414:	684b      	ldr	r3, [r1, #4]
 8003416:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800341a:	d0b5      	beq.n	8003388 <HAL_GPIO_Init+0xb0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341c:	6a33      	ldr	r3, [r6, #32]
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6233      	str	r3, [r6, #32]
 8003424:	6a33      	ldr	r3, [r6, #32]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800342e:	f022 0303 	bic.w	r3, r2, #3
 8003432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003436:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800343a:	f8d3 a008 	ldr.w	sl, [r3, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800343e:	f002 0703 	and.w	r7, r2, #3
 8003442:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8003446:	270f      	movs	r7, #15
 8003448:	fa07 f70b 	lsl.w	r7, r7, fp
 800344c:	ea2a 0a07 	bic.w	sl, sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003450:	4540      	cmp	r0, r8
 8003452:	f43f af69 	beq.w	8003328 <HAL_GPIO_Init+0x50>
 8003456:	4f11      	ldr	r7, [pc, #68]	; (800349c <HAL_GPIO_Init+0x1c4>)
 8003458:	42b8      	cmp	r0, r7
 800345a:	d00e      	beq.n	800347a <HAL_GPIO_Init+0x1a2>
 800345c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003460:	42b8      	cmp	r0, r7
 8003462:	d00c      	beq.n	800347e <HAL_GPIO_Init+0x1a6>
 8003464:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003468:	42b8      	cmp	r0, r7
 800346a:	d00a      	beq.n	8003482 <HAL_GPIO_Init+0x1aa>
 800346c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003470:	42b8      	cmp	r0, r7
 8003472:	bf0c      	ite	eq
 8003474:	2704      	moveq	r7, #4
 8003476:	2705      	movne	r7, #5
 8003478:	e757      	b.n	800332a <HAL_GPIO_Init+0x52>
 800347a:	462f      	mov	r7, r5
 800347c:	e755      	b.n	800332a <HAL_GPIO_Init+0x52>
 800347e:	2702      	movs	r7, #2
 8003480:	e753      	b.n	800332a <HAL_GPIO_Init+0x52>
 8003482:	4677      	mov	r7, lr
 8003484:	e751      	b.n	800332a <HAL_GPIO_Init+0x52>
  }
}
 8003486:	b003      	add	sp, #12
 8003488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40020000 	.word	0x40020000
 8003498:	40010400 	.word	0x40010400
 800349c:	40020400 	.word	0x40020400

080034a0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80034a0:	2900      	cmp	r1, #0
 80034a2:	d07e      	beq.n	80035a2 <HAL_GPIO_DeInit+0x102>
{
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	468c      	mov	ip, r1
  uint32_t position = 0x00;
 80034aa:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80034ac:	f04f 0801 	mov.w	r8, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80034b0:	f04f 0a0f 	mov.w	sl, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80034b4:	f04f 0b03 	mov.w	fp, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80034b8:	4f3a      	ldr	r7, [pc, #232]	; (80035a4 <HAL_GPIO_DeInit+0x104>)
 80034ba:	e028      	b.n	800350e <HAL_GPIO_DeInit+0x6e>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80034bc:	f04f 0900 	mov.w	r9, #0
 80034c0:	fa09 f404 	lsl.w	r4, r9, r4
 80034c4:	42ac      	cmp	r4, r5
 80034c6:	d055      	beq.n	8003574 <HAL_GPIO_DeInit+0xd4>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80034c8:	6804      	ldr	r4, [r0, #0]
 80034ca:	0059      	lsls	r1, r3, #1
 80034cc:	fa0b f101 	lsl.w	r1, fp, r1
 80034d0:	ea24 0401 	bic.w	r4, r4, r1
 80034d4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80034d6:	08dd      	lsrs	r5, r3, #3
 80034d8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80034dc:	6a2e      	ldr	r6, [r5, #32]
 80034de:	f003 0407 	and.w	r4, r3, #7
 80034e2:	00a4      	lsls	r4, r4, #2
 80034e4:	fa0a f404 	lsl.w	r4, sl, r4
 80034e8:	ea26 0404 	bic.w	r4, r6, r4
 80034ec:	622c      	str	r4, [r5, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80034ee:	68c4      	ldr	r4, [r0, #12]
 80034f0:	ea24 0401 	bic.w	r4, r4, r1
 80034f4:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80034f6:	6844      	ldr	r4, [r0, #4]
 80034f8:	ea24 0202 	bic.w	r2, r4, r2
 80034fc:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034fe:	6882      	ldr	r2, [r0, #8]
 8003500:	ea22 0101 	bic.w	r1, r2, r1
 8003504:	6081      	str	r1, [r0, #8]
    }

    position++;
 8003506:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8003508:	fa3c f203 	lsrs.w	r2, ip, r3
 800350c:	d047      	beq.n	800359e <HAL_GPIO_DeInit+0xfe>
    iocurrent = (GPIO_Pin) & (1U << position);
 800350e:	fa08 f203 	lsl.w	r2, r8, r3
    if (iocurrent)
 8003512:	ea12 060c 	ands.w	r6, r2, ip
 8003516:	d0f6      	beq.n	8003506 <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2];
 8003518:	f023 0103 	bic.w	r1, r3, #3
 800351c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003520:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8003524:	688d      	ldr	r5, [r1, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003526:	f003 0403 	and.w	r4, r3, #3
 800352a:	00a4      	lsls	r4, r4, #2
 800352c:	fa0a fe04 	lsl.w	lr, sl, r4
 8003530:	ea0e 0505 	and.w	r5, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8003534:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80035a8 <HAL_GPIO_DeInit+0x108>
 8003538:	4548      	cmp	r0, r9
 800353a:	d0bf      	beq.n	80034bc <HAL_GPIO_DeInit+0x1c>
 800353c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003540:	4548      	cmp	r0, r9
 8003542:	d010      	beq.n	8003566 <HAL_GPIO_DeInit+0xc6>
 8003544:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003548:	4548      	cmp	r0, r9
 800354a:	d00e      	beq.n	800356a <HAL_GPIO_DeInit+0xca>
 800354c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003550:	4548      	cmp	r0, r9
 8003552:	d00d      	beq.n	8003570 <HAL_GPIO_DeInit+0xd0>
 8003554:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003558:	4548      	cmp	r0, r9
 800355a:	bf0c      	ite	eq
 800355c:	f04f 0904 	moveq.w	r9, #4
 8003560:	f04f 0905 	movne.w	r9, #5
 8003564:	e7ac      	b.n	80034c0 <HAL_GPIO_DeInit+0x20>
 8003566:	46c1      	mov	r9, r8
 8003568:	e7aa      	b.n	80034c0 <HAL_GPIO_DeInit+0x20>
 800356a:	f04f 0902 	mov.w	r9, #2
 800356e:	e7a7      	b.n	80034c0 <HAL_GPIO_DeInit+0x20>
 8003570:	46d9      	mov	r9, fp
 8003572:	e7a5      	b.n	80034c0 <HAL_GPIO_DeInit+0x20>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003574:	683c      	ldr	r4, [r7, #0]
 8003576:	ea24 0406 	bic.w	r4, r4, r6
 800357a:	603c      	str	r4, [r7, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800357c:	687c      	ldr	r4, [r7, #4]
 800357e:	ea24 0406 	bic.w	r4, r4, r6
 8003582:	607c      	str	r4, [r7, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003584:	68bc      	ldr	r4, [r7, #8]
 8003586:	ea24 0406 	bic.w	r4, r4, r6
 800358a:	60bc      	str	r4, [r7, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800358c:	68fc      	ldr	r4, [r7, #12]
 800358e:	ea24 0606 	bic.w	r6, r4, r6
 8003592:	60fe      	str	r6, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8003594:	688c      	ldr	r4, [r1, #8]
 8003596:	ea24 040e 	bic.w	r4, r4, lr
 800359a:	608c      	str	r4, [r1, #8]
 800359c:	e794      	b.n	80034c8 <HAL_GPIO_DeInit+0x28>
  }
}
 800359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a2:	4770      	bx	lr
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40020000 	.word	0x40020000

080035ac <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80035ac:	b368      	cbz	r0, 800360a <HAL_IWDG_Init+0x5e>
{
 80035ae:	b538      	push	{r3, r4, r5, lr}
 80035b0:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80035b2:	6803      	ldr	r3, [r0, #0]
 80035b4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80035b8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80035ba:	6803      	ldr	r3, [r0, #0]
 80035bc:	f245 5255 	movw	r2, #21845	; 0x5555
 80035c0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80035c2:	6803      	ldr	r3, [r0, #0]
 80035c4:	6842      	ldr	r2, [r0, #4]
 80035c6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80035c8:	6803      	ldr	r3, [r0, #0]
 80035ca:	6882      	ldr	r2, [r0, #8]
 80035cc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80035ce:	f7ff fa73 	bl	8002ab8 <HAL_GetTick>
 80035d2:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	f012 0f03 	tst.w	r2, #3
 80035dc:	d109      	bne.n	80035f2 <HAL_IWDG_Init+0x46>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80035de:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80035e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035e4:	2000      	movs	r0, #0
}
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	f012 0f03 	tst.w	r2, #3
 80035f0:	d0f5      	beq.n	80035de <HAL_IWDG_Init+0x32>
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80035f2:	f7ff fa61 	bl	8002ab8 <HAL_GetTick>
 80035f6:	1b40      	subs	r0, r0, r5
 80035f8:	282a      	cmp	r0, #42	; 0x2a
 80035fa:	d9f5      	bls.n	80035e8 <HAL_IWDG_Init+0x3c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f013 0f03 	tst.w	r3, #3
 8003604:	d0f0      	beq.n	80035e8 <HAL_IWDG_Init+0x3c>
        return HAL_TIMEOUT;
 8003606:	2003      	movs	r0, #3
 8003608:	e7ed      	b.n	80035e6 <HAL_IWDG_Init+0x3a>
    return HAL_ERROR;
 800360a:	2001      	movs	r0, #1
}
 800360c:	4770      	bx	lr

0800360e <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800360e:	6803      	ldr	r3, [r0, #0]
 8003610:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003614:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8003616:	2000      	movs	r0, #0
 8003618:	4770      	bx	lr
	...

0800361c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800361c:	b410      	push	{r4}
 800361e:	b083      	sub	sp, #12
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8003628:	d128      	bne.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x60>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800362a:	4a1c      	ldr	r2, [pc, #112]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800362c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003632:	d010      	beq.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x3a>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003634:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
      __HAL_RCC_PWR_CLK_DISABLE();
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800363c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8003640:	d11d      	bne.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003642:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8003646:	d11a      	bne.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x62>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8003652:	2301      	movs	r3, #1
 8003654:	e013      	b.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x62>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	4911      	ldr	r1, [pc, #68]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003658:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800365a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800365e:	624a      	str	r2, [r1, #36]	; 0x24
 8003660:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003662:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003666:	9201      	str	r2, [sp, #4]
 8003668:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800366a:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003674:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 8003678:	624c      	str	r4, [r1, #36]	; 0x24
 800367a:	e7df      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x20>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800367c:	2300      	movs	r3, #0
  __HAL_FLASH_SET_LATENCY(latency);
 800367e:	4909      	ldr	r1, [pc, #36]	; (80036a4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003680:	680a      	ldr	r2, [r1, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	431a      	orrs	r2, r3
 8003688:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800368a:	6808      	ldr	r0, [r1, #0]
 800368c:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003690:	1ac0      	subs	r0, r0, r3
 8003692:	bf18      	it	ne
 8003694:	2001      	movne	r0, #1
 8003696:	b003      	add	sp, #12
 8003698:	bc10      	pop	{r4}
 800369a:	4770      	bx	lr
 800369c:	40023800 	.word	0x40023800
 80036a0:	40007000 	.word	0x40007000
 80036a4:	40023c00 	.word	0x40023c00

080036a8 <HAL_RCC_DeInit>:
{
 80036a8:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 80036aa:	4a2f      	ldr	r2, [pc, #188]	; (8003768 <HAL_RCC_DeInit+0xc0>)
 80036ac:	6853      	ldr	r3, [r2, #4]
 80036ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80036b2:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 80036b6:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80036c0:	f7ff f9fa 	bl	8002ab8 <HAL_GetTick>
 80036c4:	4604      	mov	r4, r0
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c6:	4d28      	ldr	r5, [pc, #160]	; (8003768 <HAL_RCC_DeInit+0xc0>)
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_DeInit+0x38>
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d0:	f7ff f9f2 	bl	8002ab8 <HAL_GetTick>
 80036d4:	1b00      	subs	r0, r0, r4
 80036d6:	2802      	cmp	r0, #2
 80036d8:	d9f6      	bls.n	80036c8 <HAL_RCC_DeInit+0x20>
      return HAL_TIMEOUT;
 80036da:	2403      	movs	r4, #3
}
 80036dc:	4620      	mov	r0, r4
 80036de:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 80036e0:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_RCC_DeInit+0xc0>)
 80036e2:	6893      	ldr	r3, [r2, #8]
 80036e4:	f023 0303 	bic.w	r3, r3, #3
 80036e8:	6093      	str	r3, [r2, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80036ea:	4615      	mov	r5, r2
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f241 3688 	movw	r6, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80036f0:	68ab      	ldr	r3, [r5, #8]
 80036f2:	f013 0f0c 	tst.w	r3, #12
 80036f6:	d006      	beq.n	8003706 <HAL_RCC_DeInit+0x5e>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f8:	f7ff f9de 	bl	8002ab8 <HAL_GetTick>
 80036fc:	1b00      	subs	r0, r0, r4
 80036fe:	42b0      	cmp	r0, r6
 8003700:	d9f6      	bls.n	80036f0 <HAL_RCC_DeInit+0x48>
      return HAL_TIMEOUT;
 8003702:	2403      	movs	r4, #3
 8003704:	e7ea      	b.n	80036dc <HAL_RCC_DeInit+0x34>
  SystemCoreClock = MSI_VALUE;
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_DeInit+0xc4>)
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_RCC_DeInit+0xc8>)
 800370a:	601a      	str	r2, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_DeInit+0xcc>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	f7ff f98e 	bl	8002a30 <HAL_InitTick>
  if(status != HAL_OK)
 8003714:	4604      	mov	r4, r0
 8003716:	2800      	cmp	r0, #0
 8003718:	d1e0      	bne.n	80036dc <HAL_RCC_DeInit+0x34>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 800371a:	4a13      	ldr	r2, [pc, #76]	; (8003768 <HAL_RCC_DeInit+0xc0>)
 800371c:	6813      	ldr	r3, [r2, #0]
 800371e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003722:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8003726:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003730:	f7ff f9c2 	bl	8002ab8 <HAL_GetTick>
 8003734:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003736:	4e0c      	ldr	r6, [pc, #48]	; (8003768 <HAL_RCC_DeInit+0xc0>)
 8003738:	6833      	ldr	r3, [r6, #0]
 800373a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800373e:	d006      	beq.n	800374e <HAL_RCC_DeInit+0xa6>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003740:	f7ff f9ba 	bl	8002ab8 <HAL_GetTick>
 8003744:	1b40      	subs	r0, r0, r5
 8003746:	2802      	cmp	r0, #2
 8003748:	d9f6      	bls.n	8003738 <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
 800374a:	2403      	movs	r4, #3
 800374c:	e7c6      	b.n	80036dc <HAL_RCC_DeInit+0x34>
  CLEAR_REG(RCC->CFGR);
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_DeInit+0xc0>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  CLEAR_REG(RCC->CIR);
 8003754:	60da      	str	r2, [r3, #12]
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_LSECSSC | RCC_CIR_CSSC);
 8003756:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800375a:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800375c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003762:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8003764:	e7ba      	b.n	80036dc <HAL_RCC_DeInit+0x34>
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	20000000 	.word	0x20000000
 8003770:	001fff68 	.word	0x001fff68
 8003774:	20000008 	.word	0x20000008

08003778 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003778:	2800      	cmp	r0, #0
 800377a:	f000 8268 	beq.w	8003c4e <HAL_RCC_OscConfig+0x4d6>
{
 800377e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003782:	b083      	sub	sp, #12
 8003784:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	4ba4      	ldr	r3, [pc, #656]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 8003788:	689d      	ldr	r5, [r3, #8]
 800378a:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800378e:	689e      	ldr	r6, [r3, #8]
 8003790:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003794:	6803      	ldr	r3, [r0, #0]
 8003796:	f013 0f01 	tst.w	r3, #1
 800379a:	d01d      	beq.n	80037d8 <HAL_RCC_OscConfig+0x60>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800379c:	2d08      	cmp	r5, #8
 800379e:	d012      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a0:	2d0c      	cmp	r5, #12
 80037a2:	d00e      	beq.n	80037c2 <HAL_RCC_OscConfig+0x4a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d035      	beq.n	8003816 <HAL_RCC_OscConfig+0x9e>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d14b      	bne.n	8003846 <HAL_RCC_OscConfig+0xce>
 80037ae:	4b9a      	ldr	r3, [pc, #616]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e02e      	b.n	8003820 <HAL_RCC_OscConfig+0xa8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c2:	2e00      	cmp	r6, #0
 80037c4:	d0ee      	beq.n	80037a4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c6:	4b94      	ldr	r3, [pc, #592]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037ce:	d003      	beq.n	80037d8 <HAL_RCC_OscConfig+0x60>
 80037d0:	6863      	ldr	r3, [r4, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 823d 	beq.w	8003c52 <HAL_RCC_OscConfig+0x4da>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f013 0f02 	tst.w	r3, #2
 80037de:	d06c      	beq.n	80038ba <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e0:	2d04      	cmp	r5, #4
 80037e2:	d059      	beq.n	8003898 <HAL_RCC_OscConfig+0x120>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037e4:	2d0c      	cmp	r5, #12
 80037e6:	d055      	beq.n	8003894 <HAL_RCC_OscConfig+0x11c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e8:	68e3      	ldr	r3, [r4, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80cb 	beq.w	8003986 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b8a      	ldr	r3, [pc, #552]	; (8003a1c <HAL_RCC_OscConfig+0x2a4>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037f6:	f7ff f95f 	bl	8002ab8 <HAL_GetTick>
 80037fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fc:	4f86      	ldr	r7, [pc, #536]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	f040 80b6 	bne.w	8003974 <HAL_RCC_OscConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003808:	f7ff f956 	bl	8002ab8 <HAL_GetTick>
 800380c:	1b80      	subs	r0, r0, r6
 800380e:	2802      	cmp	r0, #2
 8003810:	d9f5      	bls.n	80037fe <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
 8003812:	2003      	movs	r0, #3
 8003814:	e226      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003816:	4a80      	ldr	r2, [pc, #512]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 8003818:	6813      	ldr	r3, [r2, #0]
 800381a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	6863      	ldr	r3, [r4, #4]
 8003822:	b333      	cbz	r3, 8003872 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8003824:	f7ff f948 	bl	8002ab8 <HAL_GetTick>
 8003828:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800382a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8003a18 <HAL_RCC_OscConfig+0x2a0>
 800382e:	f8d8 3000 	ldr.w	r3, [r8]
 8003832:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003836:	d1cf      	bne.n	80037d8 <HAL_RCC_OscConfig+0x60>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003838:	f7ff f93e 	bl	8002ab8 <HAL_GetTick>
 800383c:	1bc0      	subs	r0, r0, r7
 800383e:	2864      	cmp	r0, #100	; 0x64
 8003840:	d9f5      	bls.n	800382e <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8003842:	2003      	movs	r0, #3
 8003844:	e20e      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003846:	2b05      	cmp	r3, #5
 8003848:	d009      	beq.n	800385e <HAL_RCC_OscConfig+0xe6>
 800384a:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e7e0      	b.n	8003820 <HAL_RCC_OscConfig+0xa8>
 800385e:	4b6e      	ldr	r3, [pc, #440]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e7d6      	b.n	8003820 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
 8003872:	f7ff f921 	bl	8002ab8 <HAL_GetTick>
 8003876:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003878:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8003a18 <HAL_RCC_OscConfig+0x2a0>
 800387c:	f8d8 3000 	ldr.w	r3, [r8]
 8003880:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003884:	d0a8      	beq.n	80037d8 <HAL_RCC_OscConfig+0x60>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003886:	f7ff f917 	bl	8002ab8 <HAL_GetTick>
 800388a:	1bc0      	subs	r0, r0, r7
 800388c:	2864      	cmp	r0, #100	; 0x64
 800388e:	d9f5      	bls.n	800387c <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8003890:	2003      	movs	r0, #3
 8003892:	e1e7      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003894:	2e00      	cmp	r6, #0
 8003896:	d1a7      	bne.n	80037e8 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003898:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f013 0f02 	tst.w	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_OscConfig+0x132>
 80038a2:	68e3      	ldr	r3, [r4, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f040 81d6 	bne.w	8003c56 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80038ac:	6853      	ldr	r3, [r2, #4]
 80038ae:	6921      	ldr	r1, [r4, #16]
 80038b0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80038b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038b8:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	f013 0f10 	tst.w	r3, #16
 80038c0:	d03b      	beq.n	800393a <HAL_RCC_OscConfig+0x1c2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	f040 8085 	bne.w	80039d2 <HAL_RCC_OscConfig+0x25a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80038d0:	d003      	beq.n	80038da <HAL_RCC_OscConfig+0x162>
 80038d2:	69a3      	ldr	r3, [r4, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 81c0 	beq.w	8003c5a <HAL_RCC_OscConfig+0x4e2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038da:	6a20      	ldr	r0, [r4, #32]
 80038dc:	4b4e      	ldr	r3, [pc, #312]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80038e4:	4298      	cmp	r0, r3
 80038e6:	d960      	bls.n	80039aa <HAL_RCC_OscConfig+0x232>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e8:	f7ff fe98 	bl	800361c <RCC_SetFlashLatencyFromMSIRange>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	f040 81b6 	bne.w	8003c5e <HAL_RCC_OscConfig+0x4e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f2:	4a49      	ldr	r2, [pc, #292]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80038f4:	6853      	ldr	r3, [r2, #4]
 80038f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80038fa:	6a21      	ldr	r1, [r4, #32]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6053      	str	r3, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003900:	6853      	ldr	r3, [r2, #4]
 8003902:	69e1      	ldr	r1, [r4, #28]
 8003904:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003908:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800390c:	6053      	str	r3, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800390e:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 8003910:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003912:	6a23      	ldr	r3, [r4, #32]
 8003914:	0b5b      	lsrs	r3, r3, #13
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391c:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800391e:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8003922:	493f      	ldr	r1, [pc, #252]	; (8003a20 <HAL_RCC_OscConfig+0x2a8>)
 8003924:	5c8a      	ldrb	r2, [r1, r2]
 8003926:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003928:	4a3e      	ldr	r2, [pc, #248]	; (8003a24 <HAL_RCC_OscConfig+0x2ac>)
 800392a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800392c:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <HAL_RCC_OscConfig+0x2b0>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	f7ff f87e 	bl	8002a30 <HAL_InitTick>
        if(status != HAL_OK)
 8003934:	2800      	cmp	r0, #0
 8003936:	f040 8195 	bne.w	8003c64 <HAL_RCC_OscConfig+0x4ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	f013 0f08 	tst.w	r3, #8
 8003940:	f000 809a 	beq.w	8003a78 <HAL_RCC_OscConfig+0x300>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003944:	6963      	ldr	r3, [r4, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8083 	beq.w	8003a52 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_LSI_ENABLE();
 800394c:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCC_OscConfig+0x2a4>)
 800394e:	2201      	movs	r2, #1
 8003950:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8003954:	f7ff f8b0 	bl	8002ab8 <HAL_GetTick>
 8003958:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800395a:	4f2f      	ldr	r7, [pc, #188]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	f013 0f02 	tst.w	r3, #2
 8003962:	f040 8089 	bne.w	8003a78 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003966:	f7ff f8a7 	bl	8002ab8 <HAL_GetTick>
 800396a:	1b80      	subs	r0, r0, r6
 800396c:	2802      	cmp	r0, #2
 800396e:	d9f5      	bls.n	800395c <HAL_RCC_OscConfig+0x1e4>
          return HAL_TIMEOUT;
 8003970:	2003      	movs	r0, #3
 8003972:	e177      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 8003976:	6853      	ldr	r3, [r2, #4]
 8003978:	6921      	ldr	r1, [r4, #16]
 800397a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800397e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003982:	6053      	str	r3, [r2, #4]
 8003984:	e799      	b.n	80038ba <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_OscConfig+0x2a4>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800398c:	f7ff f894 	bl	8002ab8 <HAL_GetTick>
 8003990:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003992:	4f21      	ldr	r7, [pc, #132]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f013 0f02 	tst.w	r3, #2
 800399a:	d08e      	beq.n	80038ba <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399c:	f7ff f88c 	bl	8002ab8 <HAL_GetTick>
 80039a0:	1b80      	subs	r0, r0, r6
 80039a2:	2802      	cmp	r0, #2
 80039a4:	d9f6      	bls.n	8003994 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 80039a6:	2003      	movs	r0, #3
 80039a8:	e15c      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80039ac:	6853      	ldr	r3, [r2, #4]
 80039ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80039b2:	4303      	orrs	r3, r0
 80039b4:	6053      	str	r3, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b6:	6853      	ldr	r3, [r2, #4]
 80039b8:	69e1      	ldr	r1, [r4, #28]
 80039ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80039c2:	6053      	str	r3, [r2, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039c4:	6a20      	ldr	r0, [r4, #32]
 80039c6:	f7ff fe29 	bl	800361c <RCC_SetFlashLatencyFromMSIRange>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d09f      	beq.n	800390e <HAL_RCC_OscConfig+0x196>
            return HAL_ERROR;
 80039ce:	2001      	movs	r0, #1
 80039d0:	e148      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039d2:	69a3      	ldr	r3, [r4, #24]
 80039d4:	b353      	cbz	r3, 8003a2c <HAL_RCC_OscConfig+0x2b4>
        __HAL_RCC_MSI_ENABLE();
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_OscConfig+0x2a4>)
 80039d8:	2201      	movs	r2, #1
 80039da:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80039dc:	f7ff f86c 	bl	8002ab8 <HAL_GetTick>
 80039e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039e2:	4f0d      	ldr	r7, [pc, #52]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x282>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ec:	f7ff f864 	bl	8002ab8 <HAL_GetTick>
 80039f0:	1b80      	subs	r0, r0, r6
 80039f2:	2802      	cmp	r0, #2
 80039f4:	d9f6      	bls.n	80039e4 <HAL_RCC_OscConfig+0x26c>
            return HAL_TIMEOUT;
 80039f6:	2003      	movs	r0, #3
 80039f8:	e134      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_RCC_OscConfig+0x2a0>)
 80039fc:	6853      	ldr	r3, [r2, #4]
 80039fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003a02:	6a21      	ldr	r1, [r4, #32]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a08:	6853      	ldr	r3, [r2, #4]
 8003a0a:	69e1      	ldr	r1, [r4, #28]
 8003a0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	e790      	b.n	800393a <HAL_RCC_OscConfig+0x1c2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	08004c78 	.word	0x08004c78
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000008 	.word	0x20000008
        __HAL_RCC_MSI_DISABLE();
 8003a2c:	4b92      	ldr	r3, [pc, #584]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003a32:	f7ff f841 	bl	8002ab8 <HAL_GetTick>
 8003a36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a38:	4f90      	ldr	r7, [pc, #576]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003a40:	f43f af7b 	beq.w	800393a <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a44:	f7ff f838 	bl	8002ab8 <HAL_GetTick>
 8003a48:	1b80      	subs	r0, r0, r6
 8003a4a:	2802      	cmp	r0, #2
 8003a4c:	d9f5      	bls.n	8003a3a <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8003a4e:	2003      	movs	r0, #3
 8003a50:	e108      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_LSI_DISABLE();
 8003a52:	4b89      	ldr	r3, [pc, #548]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8003a5a:	f7ff f82d 	bl	8002ab8 <HAL_GetTick>
 8003a5e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a60:	4f86      	ldr	r7, [pc, #536]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	f013 0f02 	tst.w	r3, #2
 8003a68:	d006      	beq.n	8003a78 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6a:	f7ff f825 	bl	8002ab8 <HAL_GetTick>
 8003a6e:	1b80      	subs	r0, r0, r6
 8003a70:	2802      	cmp	r0, #2
 8003a72:	d9f6      	bls.n	8003a62 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
 8003a76:	e0f5      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f013 0f04 	tst.w	r3, #4
 8003a7e:	d07f      	beq.n	8003b80 <HAL_RCC_OscConfig+0x408>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a80:	4b7e      	ldr	r3, [pc, #504]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a88:	d10b      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003a9e:	2601      	movs	r6, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x32c>
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003aac:	d00e      	beq.n	8003acc <HAL_RCC_OscConfig+0x354>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aae:	68a3      	ldr	r3, [r4, #8]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d021      	beq.n	8003af8 <HAL_RCC_OscConfig+0x380>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d139      	bne.n	8003b2c <HAL_RCC_OscConfig+0x3b4>
 8003ab8:	4b70      	ldr	r3, [pc, #448]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aca:	e01a      	b.n	8003b02 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003acc:	4a6c      	ldr	r2, [pc, #432]	; (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003ace:	6813      	ldr	r3, [r2, #0]
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003ad6:	f7fe ffef 	bl	8002ab8 <HAL_GetTick>
 8003ada:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003c80 <HAL_RCC_OscConfig+0x508>
 8003ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ae8:	d1e1      	bne.n	8003aae <HAL_RCC_OscConfig+0x336>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fe ffe5 	bl	8002ab8 <HAL_GetTick>
 8003aee:	1bc0      	subs	r0, r0, r7
 8003af0:	2864      	cmp	r0, #100	; 0x64
 8003af2:	d9f5      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x368>
          return HAL_TIMEOUT;
 8003af4:	2003      	movs	r0, #3
 8003af6:	e0b5      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af8:	4a60      	ldr	r2, [pc, #384]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003afa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b00:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b02:	68a3      	ldr	r3, [r4, #8]
 8003b04:	b343      	cbz	r3, 8003b58 <HAL_RCC_OscConfig+0x3e0>
      tickstart = HAL_GetTick();
 8003b06:	f7fe ffd7 	bl	8002ab8 <HAL_GetTick>
 8003b0a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b0c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8003c7c <HAL_RCC_OscConfig+0x504>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f241 3988 	movw	r9, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b14:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8003b18:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003b1c:	d12f      	bne.n	8003b7e <HAL_RCC_OscConfig+0x406>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe ffcb 	bl	8002ab8 <HAL_GetTick>
 8003b22:	1bc0      	subs	r0, r0, r7
 8003b24:	4548      	cmp	r0, r9
 8003b26:	d9f5      	bls.n	8003b14 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 8003b28:	2003      	movs	r0, #3
 8003b2a:	e09b      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3cc>
 8003b30:	4b52      	ldr	r3, [pc, #328]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b40:	635a      	str	r2, [r3, #52]	; 0x34
 8003b42:	e7de      	b.n	8003b02 <HAL_RCC_OscConfig+0x38a>
 8003b44:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34
 8003b56:	e7d4      	b.n	8003b02 <HAL_RCC_OscConfig+0x38a>
      tickstart = HAL_GetTick();
 8003b58:	f7fe ffae 	bl	8002ab8 <HAL_GetTick>
 8003b5c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b5e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003c7c <HAL_RCC_OscConfig+0x504>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f241 3988 	movw	r9, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b66:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8003b6a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003b6e:	d006      	beq.n	8003b7e <HAL_RCC_OscConfig+0x406>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b70:	f7fe ffa2 	bl	8002ab8 <HAL_GetTick>
 8003b74:	1bc0      	subs	r0, r0, r7
 8003b76:	4548      	cmp	r0, r9
 8003b78:	d9f5      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3ee>
          return HAL_TIMEOUT;
 8003b7a:	2003      	movs	r0, #3
 8003b7c:	e072      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
    if(pwrclkchanged == SET)
 8003b7e:	b9c6      	cbnz	r6, 8003bb2 <HAL_RCC_OscConfig+0x43a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d06d      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4ea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b86:	2d0c      	cmp	r5, #12
 8003b88:	d04c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d017      	beq.n	8003bbe <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b94:	f7fe ff90 	bl	8002ab8 <HAL_GetTick>
 8003b98:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b9a:	4d38      	ldr	r5, [pc, #224]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ba2:	d03d      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe ff88 	bl	8002ab8 <HAL_GetTick>
 8003ba8:	1b00      	subs	r0, r0, r4
 8003baa:	2802      	cmp	r0, #2
 8003bac:	d9f6      	bls.n	8003b9c <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
 8003bae:	2003      	movs	r0, #3
 8003bb0:	e058      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bb4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6253      	str	r3, [r2, #36]	; 0x24
 8003bbc:	e7e0      	b.n	8003b80 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003bc4:	f7fe ff78 	bl	8002ab8 <HAL_GetTick>
 8003bc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bca:	4e2c      	ldr	r6, [pc, #176]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bcc:	6833      	ldr	r3, [r6, #0]
 8003bce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bd2:	d006      	beq.n	8003be2 <HAL_RCC_OscConfig+0x46a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe ff70 	bl	8002ab8 <HAL_GetTick>
 8003bd8:	1b40      	subs	r0, r0, r5
 8003bda:	2802      	cmp	r0, #2
 8003bdc:	d9f6      	bls.n	8003bcc <HAL_RCC_OscConfig+0x454>
            return HAL_TIMEOUT;
 8003bde:	2003      	movs	r0, #3
 8003be0:	e040      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be2:	4926      	ldr	r1, [pc, #152]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003be4:	688a      	ldr	r2, [r1, #8]
 8003be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003be8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003bea:	4303      	orrs	r3, r0
 8003bec:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003bfe:	f7fe ff5b 	bl	8002ab8 <HAL_GetTick>
 8003c02:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c04:	4d1d      	ldr	r5, [pc, #116]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c06:	682b      	ldr	r3, [r5, #0]
 8003c08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCC_OscConfig+0x4a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fe ff53 	bl	8002ab8 <HAL_GetTick>
 8003c12:	1b00      	subs	r0, r0, r4
 8003c14:	2802      	cmp	r0, #2
 8003c16:	d9f6      	bls.n	8003c06 <HAL_RCC_OscConfig+0x48e>
            return HAL_TIMEOUT;
 8003c18:	2003      	movs	r0, #3
 8003c1a:	e023      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
  return HAL_OK;
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	e021      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
 8003c20:	2000      	movs	r0, #0
 8003c22:	e01f      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_OscConfig+0x4f2>
        pll_config = RCC->CFGR;
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003c30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c32:	4291      	cmp	r1, r2
 8003c34:	d11b      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4f6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c3c:	428a      	cmp	r2, r1
 8003c3e:	d118      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4fa>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c44:	6b20      	ldr	r0, [r4, #48]	; 0x30
        return HAL_ERROR;
 8003c46:	1a18      	subs	r0, r3, r0
 8003c48:	bf18      	it	ne
 8003c4a:	2001      	movne	r0, #1
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
    return HAL_ERROR;
 8003c4e:	2001      	movs	r0, #1
}
 8003c50:	4770      	bx	lr
        return HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
 8003c54:	e006      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        return HAL_ERROR;
 8003c56:	2001      	movs	r0, #1
 8003c58:	e004      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        return HAL_ERROR;
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	e002      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
            return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
  return HAL_OK;
 8003c62:	2000      	movs	r0, #0
}
 8003c64:	b003      	add	sp, #12
 8003c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	e7fa      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
          return HAL_ERROR;
 8003c6e:	2001      	movs	r0, #1
 8003c70:	e7f8      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
 8003c72:	2001      	movs	r0, #1
 8003c74:	e7f6      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
 8003c76:	bf00      	nop
 8003c78:	42470000 	.word	0x42470000
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000

08003c84 <HAL_RCC_GetSysClockFreq>:
{
 8003c84:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c88:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c8a:	f002 030c 	and.w	r3, r2, #12
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d03f      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x8e>
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d00a      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x28>
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d03d      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0x92>
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c9c:	6858      	ldr	r0, [r3, #4]
 8003c9e:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ca2:	1c43      	adds	r3, r0, #1
 8003ca4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ca8:	4098      	lsls	r0, r3
      break;
 8003caa:	e035      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x94>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003cac:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003cb0:	491b      	ldr	r1, [pc, #108]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cb2:	f811 c003 	ldrb.w	ip, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003cb6:	f3c2 5281 	ubfx	r2, r2, #22, #2
 8003cba:	3201      	adds	r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003cc4:	d006      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x50>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003cc6:	4817      	ldr	r0, [pc, #92]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	fbac 0100 	umull	r0, r1, ip, r0
 8003cce:	f7fc fa55 	bl	800017c <__aeabi_uldivmod>
 8003cd2:	e021      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003cd4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003cd8:	ebb1 000c 	subs.w	r0, r1, ip
 8003cdc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003ce0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003ce4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ce8:	0181      	lsls	r1, r0, #6
 8003cea:	1a09      	subs	r1, r1, r0
 8003cec:	eb63 030e 	sbc.w	r3, r3, lr
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf6:	00c9      	lsls	r1, r1, #3
 8003cf8:	eb11 0c0c 	adds.w	ip, r1, ip
 8003cfc:	f143 0300 	adc.w	r3, r3, #0
 8003d00:	0299      	lsls	r1, r3, #10
 8003d02:	2300      	movs	r3, #0
 8003d04:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003d08:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003d0c:	f7fc fa36 	bl	800017c <__aeabi_uldivmod>
 8003d10:	e002      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x94>
  switch (tmpreg & RCC_CFGR_SWS)
 8003d12:	4804      	ldr	r0, [pc, #16]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x94>
      sysclockfreq = HSI_VALUE;
 8003d16:	4804      	ldr	r0, [pc, #16]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8003d18:	bd08      	pop	{r3, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	08004c90 	.word	0x08004c90
 8003d24:	016e3600 	.word	0x016e3600
 8003d28:	00f42400 	.word	0x00f42400

08003d2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	f000 80d1 	beq.w	8003ed4 <HAL_RCC_ClockConfig+0x1a8>
{
 8003d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d36:	460c      	mov	r4, r1
 8003d38:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	428b      	cmp	r3, r1
 8003d44:	d20d      	bcs.n	8003d62 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	2901      	cmp	r1, #1
 8003d48:	d028      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x70>
 8003d4a:	4a66      	ldr	r2, [pc, #408]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	6813      	ldr	r3, [r2, #0]
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	4323      	orrs	r3, r4
 8003d54:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	f040 80bb 	bne.w	8003ed8 <HAL_RCC_ClockConfig+0x1ac>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	f013 0f02 	tst.w	r3, #2
 8003d68:	d006      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6a:	4a5f      	ldr	r2, [pc, #380]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	6893      	ldr	r3, [r2, #8]
 8003d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d72:	68a9      	ldr	r1, [r5, #8]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	f013 0f01 	tst.w	r3, #1
 8003d7e:	d072      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x13a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d80:	686a      	ldr	r2, [r5, #4]
 8003d82:	2a02      	cmp	r2, #2
 8003d84:	d010      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d86:	2a03      	cmp	r2, #3
 8003d88:	d032      	beq.n	8003df0 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d8a:	2a01      	cmp	r2, #1
 8003d8c:	d037      	beq.n	8003dfe <HAL_RCC_ClockConfig+0xd2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d8e:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d96:	d10d      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x88>
        return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
 8003d9a:	e099      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9c:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e7d0      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003da8:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003db0:	f000 8094 	beq.w	8003edc <HAL_RCC_ClockConfig+0x1b0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db4:	494c      	ldr	r1, [pc, #304]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	688b      	ldr	r3, [r1, #8]
 8003db8:	f023 0303 	bic.w	r3, r3, #3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003dc0:	f7fe fe7a 	bl	8002ab8 <HAL_GetTick>
 8003dc4:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	686b      	ldr	r3, [r5, #4]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d01f      	beq.n	8003e0c <HAL_RCC_ClockConfig+0xe0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d02c      	beq.n	8003e2a <HAL_RCC_ClockConfig+0xfe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d039      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x11c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dd4:	4f44      	ldr	r7, [pc, #272]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f013 0f0c 	tst.w	r3, #12
 8003de0:	d041      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de2:	f7fe fe69 	bl	8002ab8 <HAL_GetTick>
 8003de6:	1b80      	subs	r0, r0, r6
 8003de8:	4540      	cmp	r0, r8
 8003dea:	d9f6      	bls.n	8003dda <HAL_RCC_ClockConfig+0xae>
          return HAL_TIMEOUT;
 8003dec:	2003      	movs	r0, #3
 8003dee:	e06f      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003df0:	4b3d      	ldr	r3, [pc, #244]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003df8:	d1dc      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x88>
        return HAL_ERROR;
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	e068      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f013 0f02 	tst.w	r3, #2
 8003e06:	d1d5      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x88>
        return HAL_ERROR;
 8003e08:	2001      	movs	r0, #1
 8003e0a:	e061      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e0c:	4f36      	ldr	r7, [pc, #216]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d024      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe fe4c 	bl	8002ab8 <HAL_GetTick>
 8003e20:	1b83      	subs	r3, r0, r6
 8003e22:	4543      	cmp	r3, r8
 8003e24:	d9f5      	bls.n	8003e12 <HAL_RCC_ClockConfig+0xe6>
          return HAL_TIMEOUT;
 8003e26:	2003      	movs	r0, #3
 8003e28:	e052      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e2a:	4f2f      	ldr	r7, [pc, #188]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d015      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3a:	f7fe fe3d 	bl	8002ab8 <HAL_GetTick>
 8003e3e:	1b80      	subs	r0, r0, r6
 8003e40:	4540      	cmp	r0, r8
 8003e42:	d9f5      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8003e44:	2003      	movs	r0, #3
 8003e46:	e043      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e48:	4f27      	ldr	r7, [pc, #156]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d006      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fe fe2e 	bl	8002ab8 <HAL_GetTick>
 8003e5c:	1b80      	subs	r0, r0, r6
 8003e5e:	4540      	cmp	r0, r8
 8003e60:	d9f5      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8003e62:	2003      	movs	r0, #3
 8003e64:	e034      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	d908      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f013 0f01 	tst.w	r3, #1
 8003e82:	d12d      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1b4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	f013 0f04 	tst.w	r3, #4
 8003e8a:	d006      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	6893      	ldr	r3, [r2, #8]
 8003e90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e94:	68e9      	ldr	r1, [r5, #12]
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	f013 0f08 	tst.w	r3, #8
 8003ea0:	d007      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x186>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	6893      	ldr	r3, [r2, #8]
 8003ea6:	6929      	ldr	r1, [r5, #16]
 8003ea8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003eac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003eb0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eb2:	f7ff fee7 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	5cd3      	ldrb	r3, [r2, r3]
 8003ec2:	40d8      	lsrs	r0, r3
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	f7fe fdb0 	bl	8002a30 <HAL_InitTick>
}
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003ed4:	2001      	movs	r0, #1
}
 8003ed6:	4770      	bx	lr
      return HAL_ERROR;
 8003ed8:	2001      	movs	r0, #1
 8003eda:	e7f9      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
        return HAL_ERROR;
 8003edc:	2001      	movs	r0, #1
 8003ede:	e7f7      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
      return HAL_ERROR;
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	e7f5      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1a4>
 8003ee4:	40023c00 	.word	0x40023c00
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	08004c78 	.word	0x08004c78
 8003ef0:	20000000 	.word	0x20000000
 8003ef4:	20000008 	.word	0x20000008

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003f00:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	4a03      	ldr	r2, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f06:	6810      	ldr	r0, [r2, #0]
}
 8003f08:	40d8      	lsrs	r0, r3
 8003f0a:	4770      	bx	lr
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	08004c88 	.word	0x08004c88
 8003f14:	20000000 	.word	0x20000000

08003f18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	4a03      	ldr	r2, [pc, #12]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003f26:	6810      	ldr	r0, [r2, #0]
}
 8003f28:	40d8      	lsrs	r0, r3
 8003f2a:	4770      	bx	lr
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08004c88 	.word	0x08004c88
 8003f34:	20000000 	.word	0x20000000

08003f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	4681      	mov	r9, r0
 8003f40:	460f      	mov	r7, r1
 8003f42:	4616      	mov	r6, r2
 8003f44:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f46:	f7fe fdb7 	bl	8002ab8 <HAL_GetTick>
 8003f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f4c:	442b      	add	r3, r5
 8003f4e:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003f52:	f7fe fdb1 	bl	8002ab8 <HAL_GetTick>
 8003f56:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f58:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003f60:	fb08 f303 	mul.w	r3, r8, r3
 8003f64:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f66:	f8d9 3000 	ldr.w	r3, [r9]
 8003f6a:	689c      	ldr	r4, [r3, #8]
 8003f6c:	ea37 0204 	bics.w	r2, r7, r4
 8003f70:	bf0c      	ite	eq
 8003f72:	f04f 0c01 	moveq.w	ip, #1
 8003f76:	f04f 0c00 	movne.w	ip, #0
 8003f7a:	45b4      	cmp	ip, r6
 8003f7c:	d044      	beq.n	8004008 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f82:	d0f2      	beq.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f84:	f7fe fd98 	bl	8002ab8 <HAL_GetTick>
 8003f88:	eba0 000a 	sub.w	r0, r0, sl
 8003f8c:	4540      	cmp	r0, r8
 8003f8e:	d207      	bcs.n	8003fa0 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f90:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf08      	it	eq
 8003f96:	4698      	moveq	r8, r3
      }
      count--;
 8003f98:	9b01      	ldr	r3, [sp, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	e7e2      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8003fa4:	6853      	ldr	r3, [r2, #4]
 8003fa6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003faa:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d00c      	beq.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fb6:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8003fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbe:	d016      	beq.n	8003fee <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8003fcc:	2003      	movs	r0, #3
 8003fce:	e01c      	b.n	800400a <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d002      	beq.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d1ea      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8003fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e7e3      	b.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8003fee:	f8d9 2000 	ldr.w	r2, [r9]
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	f8d9 2000 	ldr.w	r2, [r9]
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e7db      	b.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 8004008:	2000      	movs	r0, #0
}
 800400a:	b002      	add	sp, #8
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	20000000 	.word	0x20000000

08004014 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b510      	push	{r4, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <SPI_EndRxTxTransaction+0x60>)
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <SPI_EndRxTxTransaction+0x64>)
 8004020:	fba3 3000 	umull	r3, r0, r3, r0
 8004024:	0d40      	lsrs	r0, r0, #21
 8004026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800402a:	fb03 f000 	mul.w	r0, r3, r0
 800402e:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d00b      	beq.n	8004050 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004038:	9b03      	ldr	r3, [sp, #12]
 800403a:	b1bb      	cbz	r3, 800406c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	3b01      	subs	r3, #1
 8004040:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f013 0f80 	tst.w	r3, #128	; 0x80
 800404a:	d1f5      	bne.n	8004038 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 800404c:	2000      	movs	r0, #0
 800404e:	e00e      	b.n	800406e <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	460b      	mov	r3, r1
 8004054:	2200      	movs	r2, #0
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	4620      	mov	r0, r4
 800405a:	f7ff ff6d 	bl	8003f38 <SPI_WaitFlagStateUntilTimeout>
 800405e:	b130      	cbz	r0, 800406e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004060:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004062:	f043 0320 	orr.w	r3, r3, #32
 8004066:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004068:	2003      	movs	r0, #3
 800406a:	e000      	b.n	800406e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 800406c:	2000      	movs	r0, #0
}
 800406e:	b004      	add	sp, #16
 8004070:	bd10      	pop	{r4, pc}
 8004072:	bf00      	nop
 8004074:	20000000 	.word	0x20000000
 8004078:	165e9f81 	.word	0x165e9f81

0800407c <HAL_SPI_Init>:
  if (hspi == NULL)
 800407c:	2800      	cmp	r0, #0
 800407e:	d05a      	beq.n	8004136 <HAL_SPI_Init+0xba>
{
 8004080:	b510      	push	{r4, lr}
 8004082:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004084:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004086:	b933      	cbnz	r3, 8004096 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004088:	6843      	ldr	r3, [r0, #4]
 800408a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408e:	d005      	beq.n	800409c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004090:	2300      	movs	r3, #0
 8004092:	61c3      	str	r3, [r0, #28]
 8004094:	e002      	b.n	800409c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004096:	2300      	movs	r3, #0
 8004098:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800409a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d040      	beq.n	800412a <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	6813      	ldr	r3, [r2, #0]
 80040b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	6863      	ldr	r3, [r4, #4]
 80040bc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80040c0:	68a1      	ldr	r1, [r4, #8]
 80040c2:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80040c6:	430b      	orrs	r3, r1
 80040c8:	68e1      	ldr	r1, [r4, #12]
 80040ca:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6921      	ldr	r1, [r4, #16]
 80040d2:	f001 0102 	and.w	r1, r1, #2
 80040d6:	430b      	orrs	r3, r1
 80040d8:	6961      	ldr	r1, [r4, #20]
 80040da:	f001 0101 	and.w	r1, r1, #1
 80040de:	430b      	orrs	r3, r1
 80040e0:	69a1      	ldr	r1, [r4, #24]
 80040e2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80040e6:	430b      	orrs	r3, r1
 80040e8:	69e1      	ldr	r1, [r4, #28]
 80040ea:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6a21      	ldr	r1, [r4, #32]
 80040f2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80040f6:	430b      	orrs	r3, r1
 80040f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80040fa:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80040fe:	430b      	orrs	r3, r1
 8004100:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004102:	6821      	ldr	r1, [r4, #0]
 8004104:	8b63      	ldrh	r3, [r4, #26]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800410c:	f002 0210 	and.w	r2, r2, #16
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	69d3      	ldr	r3, [r2, #28]
 8004118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800411c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800411e:	2000      	movs	r0, #0
 8004120:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004122:	2301      	movs	r3, #1
 8004124:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004128:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800412a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800412e:	4620      	mov	r0, r4
 8004130:	f7fc fa8a 	bl	8000648 <HAL_SPI_MspInit>
 8004134:	e7b8      	b.n	80040a8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004136:	2001      	movs	r0, #1
}
 8004138:	4770      	bx	lr
	...

0800413c <HAL_SPI_Transmit_IT>:
{
 800413c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800413e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8004142:	2801      	cmp	r0, #1
 8004144:	d048      	beq.n	80041d8 <HAL_SPI_Transmit_IT+0x9c>
 8004146:	2001      	movs	r0, #1
 8004148:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  if ((pData == NULL) || (Size == 0U))
 800414c:	2900      	cmp	r1, #0
 800414e:	d038      	beq.n	80041c2 <HAL_SPI_Transmit_IT+0x86>
 8004150:	2a00      	cmp	r2, #0
 8004152:	d038      	beq.n	80041c6 <HAL_SPI_Transmit_IT+0x8a>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004154:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
 8004158:	b2c0      	uxtb	r0, r0
 800415a:	2801      	cmp	r0, #1
 800415c:	d138      	bne.n	80041d0 <HAL_SPI_Transmit_IT+0x94>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800415e:	2003      	movs	r0, #3
 8004160:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004164:	2000      	movs	r0, #0
 8004166:	6558      	str	r0, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004168:	6319      	str	r1, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800416a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800416c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800416e:	6398      	str	r0, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004170:	8798      	strh	r0, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004172:	87d8      	strh	r0, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004174:	6418      	str	r0, [r3, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004176:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 8004178:	4a18      	ldr	r2, [pc, #96]	; (80041dc <HAL_SPI_Transmit_IT+0xa0>)
 800417a:	4919      	ldr	r1, [pc, #100]	; (80041e0 <HAL_SPI_Transmit_IT+0xa4>)
 800417c:	2800      	cmp	r0, #0
 800417e:	bf08      	it	eq
 8004180:	460a      	moveq	r2, r1
 8004182:	645a      	str	r2, [r3, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800418a:	d00f      	beq.n	80041ac <HAL_SPI_Transmit_IT+0x70>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800418c:	6819      	ldr	r1, [r3, #0]
 800418e:	684a      	ldr	r2, [r1, #4]
 8004190:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004194:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	6811      	ldr	r1, [r2, #0]
 800419a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800419e:	d119      	bne.n	80041d4 <HAL_SPI_Transmit_IT+0x98>
    __HAL_SPI_ENABLE(hspi);
 80041a0:	6811      	ldr	r1, [r2, #0]
 80041a2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80041a6:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041a8:	2000      	movs	r0, #0
 80041aa:	e00d      	b.n	80041c8 <HAL_SPI_Transmit_IT+0x8c>
    __HAL_SPI_DISABLE(hspi);
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	680a      	ldr	r2, [r1, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b4:	600a      	str	r2, [r1, #0]
    SPI_1LINE_TX(hspi);
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	680a      	ldr	r2, [r1, #0]
 80041ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041be:	600a      	str	r2, [r1, #0]
 80041c0:	e7e4      	b.n	800418c <HAL_SPI_Transmit_IT+0x50>
    errorcode = HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
 80041c4:	e000      	b.n	80041c8 <HAL_SPI_Transmit_IT+0x8c>
 80041c6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ce:	4770      	bx	lr
    errorcode = HAL_BUSY;
 80041d0:	2002      	movs	r0, #2
 80041d2:	e7f9      	b.n	80041c8 <HAL_SPI_Transmit_IT+0x8c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041d4:	2000      	movs	r0, #0
 80041d6:	e7f7      	b.n	80041c8 <HAL_SPI_Transmit_IT+0x8c>
  __HAL_LOCK(hspi);
 80041d8:	2002      	movs	r0, #2
}
 80041da:	4770      	bx	lr
 80041dc:	0800429f 	.word	0x0800429f
 80041e0:	08004279 	.word	0x08004279

080041e4 <HAL_SPI_TxCpltCallback>:
}
 80041e4:	4770      	bx	lr

080041e6 <HAL_SPI_ErrorCallback>:
}
 80041e6:	4770      	bx	lr

080041e8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80041e8:	b510      	push	{r4, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	4604      	mov	r4, r0
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <SPI_CloseTx_ISR+0x88>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a20      	ldr	r2, [pc, #128]	; (8004274 <SPI_CloseTx_ISR+0x8c>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	0a5b      	lsrs	r3, r3, #9
 80041fa:	2264      	movs	r2, #100	; 0x64
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	9301      	str	r3, [sp, #4]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004202:	f7fe fc59 	bl	8002ab8 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004208:	9b01      	ldr	r3, [sp, #4]
 800420a:	b143      	cbz	r3, 800421e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
    count--;
 800420c:	9b01      	ldr	r3, [sp, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	9301      	str	r3, [sp, #4]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f013 0f02 	tst.w	r3, #2
 800421a:	d0f5      	beq.n	8004208 <SPI_CloseTx_ISR+0x20>
 800421c:	e003      	b.n	8004226 <SPI_CloseTx_ISR+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004220:	f043 0320 	orr.w	r3, r3, #32
 8004224:	6563      	str	r3, [r4, #84]	; 0x54

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004226:	6821      	ldr	r1, [r4, #0]
 8004228:	684b      	ldr	r3, [r1, #4]
 800422a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422e:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004230:	2164      	movs	r1, #100	; 0x64
 8004232:	4620      	mov	r0, r4
 8004234:	f7ff feee 	bl	8004014 <SPI_EndRxTxTransaction>
 8004238:	b118      	cbz	r0, 8004242 <SPI_CloseTx_ISR+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800423c:	f043 0320 	orr.w	r3, r3, #32
 8004240:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004242:	68a3      	ldr	r3, [r4, #8]
 8004244:	b933      	cbnz	r3, 8004254 <SPI_CloseTx_ISR+0x6c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	9200      	str	r2, [sp, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	9b00      	ldr	r3, [sp, #0]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004254:	2301      	movs	r3, #1
 8004256:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800425a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800425c:	b123      	cbz	r3, 8004268 <SPI_CloseTx_ISR+0x80>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800425e:	4620      	mov	r0, r4
 8004260:	f7ff ffc1 	bl	80041e6 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004264:	b002      	add	sp, #8
 8004266:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff ffbb 	bl	80041e4 <HAL_SPI_TxCpltCallback>
}
 800426e:	e7f9      	b.n	8004264 <SPI_CloseTx_ISR+0x7c>
 8004270:	20000000 	.word	0x20000000
 8004274:	057619f1 	.word	0x057619f1

08004278 <SPI_TxISR_8BIT>:
{
 8004278:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800427a:	6803      	ldr	r3, [r0, #0]
 800427c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800427e:	7812      	ldrb	r2, [r2, #0]
 8004280:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8004282:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004284:	3301      	adds	r3, #1
 8004286:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8004288:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800428a:	3b01      	subs	r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8004290:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	b103      	cbz	r3, 8004298 <SPI_TxISR_8BIT+0x20>
}
 8004296:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 8004298:	f7ff ffa6 	bl	80041e8 <SPI_CloseTx_ISR>
}
 800429c:	e7fb      	b.n	8004296 <SPI_TxISR_8BIT+0x1e>

0800429e <SPI_TxISR_16BIT>:
{
 800429e:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a0:	6803      	ldr	r3, [r0, #0]
 80042a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80042a4:	8812      	ldrh	r2, [r2, #0]
 80042a6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80042aa:	3302      	adds	r3, #2
 80042ac:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80042ae:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80042b6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	b103      	cbz	r3, 80042be <SPI_TxISR_16BIT+0x20>
}
 80042bc:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80042be:	f7ff ff93 	bl	80041e8 <SPI_CloseTx_ISR>
}
 80042c2:	e7fb      	b.n	80042bc <SPI_TxISR_16BIT+0x1e>

080042c4 <HAL_SPI_IRQHandler>:
{
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80042ca:	6801      	ldr	r1, [r0, #0]
 80042cc:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80042ce:	688b      	ldr	r3, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042d0:	099a      	lsrs	r2, r3, #6
 80042d2:	f3c3 1680 	ubfx	r6, r3, #6, #1
 80042d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042da:	d105      	bne.n	80042e8 <HAL_SPI_IRQHandler+0x24>
 80042dc:	f013 0f01 	tst.w	r3, #1
 80042e0:	d002      	beq.n	80042e8 <HAL_SPI_IRQHandler+0x24>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042e6:	d16b      	bne.n	80043c0 <HAL_SPI_IRQHandler+0xfc>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042e8:	f013 0f02 	tst.w	r3, #2
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_IRQHandler+0x30>
 80042ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80042f2:	d169      	bne.n	80043c8 <HAL_SPI_IRQHandler+0x104>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042f4:	ea4f 1c53 	mov.w	ip, r3, lsr #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042f8:	f3c3 2500 	ubfx	r5, r3, #8, #1
 80042fc:	ea42 1253 	orr.w	r2, r2, r3, lsr #5
 8004300:	f002 0201 	and.w	r2, r2, #1
 8004304:	ea52 0305 	orrs.w	r3, r2, r5
 8004308:	d061      	beq.n	80043ce <HAL_SPI_IRQHandler+0x10a>
 800430a:	f010 0f20 	tst.w	r0, #32
 800430e:	d05e      	beq.n	80043ce <HAL_SPI_IRQHandler+0x10a>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004310:	b17e      	cbz	r6, 8004332 <HAL_SPI_IRQHandler+0x6e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004312:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b03      	cmp	r3, #3
 800431a:	d05a      	beq.n	80043d2 <HAL_SPI_IRQHandler+0x10e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800431c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004324:	2300      	movs	r3, #0
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	68cb      	ldr	r3, [r1, #12]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	688b      	ldr	r3, [r1, #8]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	9b00      	ldr	r3, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004332:	f01c 0f01 	tst.w	ip, #1
 8004336:	d00c      	beq.n	8004352 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004338:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004340:	2300      	movs	r3, #0
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	688b      	ldr	r3, [r1, #8]
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	680b      	ldr	r3, [r1, #0]
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	9b02      	ldr	r3, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004352:	b14d      	cbz	r5, 8004368 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004354:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004356:	f043 0308 	orr.w	r3, r3, #8
 800435a:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800435c:	2300      	movs	r3, #0
 800435e:	9303      	str	r3, [sp, #12]
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004368:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02f      	beq.n	80043ce <HAL_SPI_IRQHandler+0x10a>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	6853      	ldr	r3, [r2, #4]
 8004372:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004376:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004378:	2301      	movs	r3, #1
 800437a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800437e:	f010 0f03 	tst.w	r0, #3
 8004382:	d02e      	beq.n	80043e2 <HAL_SPI_IRQHandler+0x11e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	6853      	ldr	r3, [r2, #4]
 8004388:	f023 0303 	bic.w	r3, r3, #3
 800438c:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800438e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004390:	b14b      	cbz	r3, 80043a6 <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004392:	4a16      	ldr	r2, [pc, #88]	; (80043ec <HAL_SPI_IRQHandler+0x128>)
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004396:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004398:	f7fe fcfb 	bl	8002d92 <HAL_DMA_Abort_IT>
 800439c:	b118      	cbz	r0, 80043a6 <HAL_SPI_IRQHandler+0xe2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800439e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a4:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80043a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80043a8:	b18b      	cbz	r3, 80043ce <HAL_SPI_IRQHandler+0x10a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043aa:	4a10      	ldr	r2, [pc, #64]	; (80043ec <HAL_SPI_IRQHandler+0x128>)
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80043b0:	f7fe fcef 	bl	8002d92 <HAL_DMA_Abort_IT>
 80043b4:	b158      	cbz	r0, 80043ce <HAL_SPI_IRQHandler+0x10a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043bc:	6563      	str	r3, [r4, #84]	; 0x54
 80043be:	e006      	b.n	80043ce <HAL_SPI_IRQHandler+0x10a>
    hspi->RxISR(hspi);
 80043c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043c2:	4620      	mov	r0, r4
 80043c4:	4798      	blx	r3
    return;
 80043c6:	e002      	b.n	80043ce <HAL_SPI_IRQHandler+0x10a>
    hspi->TxISR(hspi);
 80043c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043ca:	4620      	mov	r0, r4
 80043cc:	4798      	blx	r3
}
 80043ce:	b004      	add	sp, #16
 80043d0:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043d2:	2300      	movs	r3, #0
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	68cb      	ldr	r3, [r1, #12]
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	688b      	ldr	r3, [r1, #8]
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	9b01      	ldr	r3, [sp, #4]
        return;
 80043e0:	e7f5      	b.n	80043ce <HAL_SPI_IRQHandler+0x10a>
        HAL_SPI_ErrorCallback(hspi);
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7ff feff 	bl	80041e6 <HAL_SPI_ErrorCallback>
 80043e8:	e7f1      	b.n	80043ce <HAL_SPI_IRQHandler+0x10a>
 80043ea:	bf00      	nop
 80043ec:	080043f1 	.word	0x080043f1

080043f0 <SPI_DMAAbortOnError>:
{
 80043f0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80043f8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80043fa:	f7ff fef4 	bl	80041e6 <HAL_SPI_ErrorCallback>
}
 80043fe:	bd08      	pop	{r3, pc}

08004400 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004400:	6802      	ldr	r2, [r0, #0]
 8004402:	68d3      	ldr	r3, [r2, #12]
 8004404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004408:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	6802      	ldr	r2, [r0, #0]
 800440c:	6953      	ldr	r3, [r2, #20]
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004416:	2b01      	cmp	r3, #1
 8004418:	d005      	beq.n	8004426 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800441a:	2320      	movs	r3, #32
 800441c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	2300      	movs	r3, #0
 8004422:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004424:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	6802      	ldr	r2, [r0, #0]
 8004428:	68d3      	ldr	r3, [r2, #12]
 800442a:	f023 0310 	bic.w	r3, r3, #16
 800442e:	60d3      	str	r3, [r2, #12]
 8004430:	e7f3      	b.n	800441a <UART_EndRxTransfer+0x1a>
	...

08004434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	b510      	push	{r4, lr}
 8004436:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	6802      	ldr	r2, [r0, #0]
 800443a:	6913      	ldr	r3, [r2, #16]
 800443c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004440:	68c1      	ldr	r1, [r0, #12]
 8004442:	430b      	orrs	r3, r1
 8004444:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8004446:	6801      	ldr	r1, [r0, #0]
 8004448:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800444a:	6883      	ldr	r3, [r0, #8]
 800444c:	6900      	ldr	r0, [r0, #16]
 800444e:	4303      	orrs	r3, r0
 8004450:	6960      	ldr	r0, [r4, #20]
 8004452:	4303      	orrs	r3, r0
 8004454:	69e0      	ldr	r0, [r4, #28]
 8004456:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004458:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800445c:	f022 020c 	bic.w	r2, r2, #12
 8004460:	4313      	orrs	r3, r2
 8004462:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	6953      	ldr	r3, [r2, #20]
 8004468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446c:	69a1      	ldr	r1, [r4, #24]
 800446e:	430b      	orrs	r3, r1
 8004470:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <UART_SetConfig+0xc8>)
 8004476:	429a      	cmp	r2, r3
 8004478:	d01e      	beq.n	80044b8 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800447a:	f7ff fd3d 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	69e3      	ldr	r3, [r4, #28]
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004484:	d01b      	beq.n	80044be <UART_SetConfig+0x8a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004486:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800448a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800448e:	6860      	ldr	r0, [r4, #4]
 8004490:	0080      	lsls	r0, r0, #2
 8004492:	fbb3 f3f0 	udiv	r3, r3, r0
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	4919      	ldr	r1, [pc, #100]	; (8004500 <UART_SetConfig+0xcc>)
 800449a:	fba1 4203 	umull	r4, r2, r1, r3
 800449e:	0952      	lsrs	r2, r2, #5
 80044a0:	2464      	movs	r4, #100	; 0x64
 80044a2:	fb04 3312 	mls	r3, r4, r2, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	fba1 1303 	umull	r1, r3, r1, r3
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80044b4:	6083      	str	r3, [r0, #8]
  }
}
 80044b6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80044b8:	f7ff fd2e 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 80044bc:	e7df      	b.n	800447e <UART_SetConfig+0x4a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044c6:	6862      	ldr	r2, [r4, #4]
 80044c8:	0052      	lsls	r2, r2, #1
 80044ca:	fbb0 f2f2 	udiv	r2, r0, r2
 80044ce:	480c      	ldr	r0, [pc, #48]	; (8004500 <UART_SetConfig+0xcc>)
 80044d0:	fba0 3102 	umull	r3, r1, r0, r2
 80044d4:	0949      	lsrs	r1, r1, #5
 80044d6:	2364      	movs	r3, #100	; 0x64
 80044d8:	fb03 2311 	mls	r3, r3, r1, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	3332      	adds	r3, #50	; 0x32
 80044e0:	fba0 2303 	umull	r2, r3, r0, r3
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80044ea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044f4:	4413      	add	r3, r2
 80044f6:	6083      	str	r3, [r0, #8]
 80044f8:	e7dd      	b.n	80044b6 <UART_SetConfig+0x82>
 80044fa:	bf00      	nop
 80044fc:	40013800 	.word	0x40013800
 8004500:	51eb851f 	.word	0x51eb851f

08004504 <UART_WaitOnFlagUntilTimeout>:
{
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4680      	mov	r8, r0
 800450a:	460e      	mov	r6, r1
 800450c:	4615      	mov	r5, r2
 800450e:	4699      	mov	r9, r3
 8004510:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	f8d8 2000 	ldr.w	r2, [r8]
 8004516:	6814      	ldr	r4, [r2, #0]
 8004518:	ea36 0304 	bics.w	r3, r6, r4
 800451c:	bf0c      	ite	eq
 800451e:	f04f 0c01 	moveq.w	ip, #1
 8004522:	f04f 0c00 	movne.w	ip, #0
 8004526:	45ac      	cmp	ip, r5
 8004528:	d11f      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800452a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800452e:	d0f2      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004530:	b12f      	cbz	r7, 800453e <UART_WaitOnFlagUntilTimeout+0x3a>
 8004532:	f7fe fac1 	bl	8002ab8 <HAL_GetTick>
 8004536:	eba0 0009 	sub.w	r0, r0, r9
 800453a:	42b8      	cmp	r0, r7
 800453c:	d9e9      	bls.n	8004512 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800453e:	f8d8 2000 	ldr.w	r2, [r8]
 8004542:	68d3      	ldr	r3, [r2, #12]
 8004544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004548:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454a:	f8d8 2000 	ldr.w	r2, [r8]
 800454e:	6953      	ldr	r3, [r2, #20]
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004556:	2320      	movs	r3, #32
 8004558:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800455c:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004560:	2300      	movs	r3, #0
 8004562:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004566:	2003      	movs	r0, #3
 8004568:	e000      	b.n	800456c <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 800456a:	2000      	movs	r0, #0
}
 800456c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004570 <HAL_UART_Init>:
  if (huart == NULL)
 8004570:	b358      	cbz	r0, 80045ca <HAL_UART_Init+0x5a>
{
 8004572:	b510      	push	{r4, lr}
 8004574:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004576:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800457a:	b30b      	cbz	r3, 80045c0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800457c:	2324      	movs	r3, #36	; 0x24
 800457e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	68d3      	ldr	r3, [r2, #12]
 8004586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800458c:	4620      	mov	r0, r4
 800458e:	f7ff ff51 	bl	8004434 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	6913      	ldr	r3, [r2, #16]
 8004596:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800459a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	6953      	ldr	r3, [r2, #20]
 80045a0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80045a4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	68d3      	ldr	r3, [r2, #12]
 80045aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045ae:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	2000      	movs	r0, #0
 80045b2:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045b4:	2320      	movs	r3, #32
 80045b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80045be:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80045c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80045c4:	f7fc f944 	bl	8000850 <HAL_UART_MspInit>
 80045c8:	e7d8      	b.n	800457c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
}
 80045cc:	4770      	bx	lr

080045ce <HAL_UART_Transmit>:
{
 80045ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80045d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d15a      	bne.n	8004696 <HAL_UART_Transmit+0xc8>
 80045e0:	4604      	mov	r4, r0
 80045e2:	460d      	mov	r5, r1
 80045e4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80045e6:	2900      	cmp	r1, #0
 80045e8:	d059      	beq.n	800469e <HAL_UART_Transmit+0xd0>
 80045ea:	2a00      	cmp	r2, #0
 80045ec:	d059      	beq.n	80046a2 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 80045ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d057      	beq.n	80046a6 <HAL_UART_Transmit+0xd8>
 80045f6:	2301      	movs	r3, #1
 80045f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004600:	2321      	movs	r3, #33	; 0x21
 8004602:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004606:	f7fe fa57 	bl	8002ab8 <HAL_GetTick>
 800460a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800460c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004610:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d00c      	beq.n	8004636 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 800461c:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8004620:	2300      	movs	r3, #0
 8004622:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004626:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004628:	b29b      	uxth	r3, r3
 800462a:	b343      	cbz	r3, 800467e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462c:	f04f 0900 	mov.w	r9, #0
 8004630:	f04f 0880 	mov.w	r8, #128	; 0x80
 8004634:	e014      	b.n	8004660 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	b913      	cbnz	r3, 8004640 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 800463a:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800463c:	2500      	movs	r5, #0
 800463e:	e7ef      	b.n	8004620 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8004640:	f04f 0a00 	mov.w	sl, #0
 8004644:	e7ec      	b.n	8004620 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004652:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004654:	3a01      	subs	r2, #1
 8004656:	b292      	uxth	r2, r2
 8004658:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800465a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800465c:	b29b      	uxth	r3, r3
 800465e:	b173      	cbz	r3, 800467e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004660:	9600      	str	r6, [sp, #0]
 8004662:	463b      	mov	r3, r7
 8004664:	464a      	mov	r2, r9
 8004666:	4641      	mov	r1, r8
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff ff4b 	bl	8004504 <UART_WaitOnFlagUntilTimeout>
 800466e:	b9e0      	cbnz	r0, 80046aa <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8004670:	2d00      	cmp	r5, #0
 8004672:	d0e8      	beq.n	8004646 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f815 2b01 	ldrb.w	r2, [r5], #1
 800467a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800467c:	e7e9      	b.n	8004652 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	9600      	str	r6, [sp, #0]
 8004680:	463b      	mov	r3, r7
 8004682:	2200      	movs	r2, #0
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff ff3c 	bl	8004504 <UART_WaitOnFlagUntilTimeout>
 800468c:	b978      	cbnz	r0, 80046ae <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 800468e:	2320      	movs	r3, #32
 8004690:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004694:	e000      	b.n	8004698 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8004696:	2002      	movs	r0, #2
}
 8004698:	b002      	add	sp, #8
 800469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800469e:	2001      	movs	r0, #1
 80046a0:	e7fa      	b.n	8004698 <HAL_UART_Transmit+0xca>
 80046a2:	2001      	movs	r0, #1
 80046a4:	e7f8      	b.n	8004698 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 80046a6:	2002      	movs	r0, #2
 80046a8:	e7f6      	b.n	8004698 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 80046aa:	2003      	movs	r0, #3
 80046ac:	e7f4      	b.n	8004698 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 80046ae:	2003      	movs	r0, #3
 80046b0:	e7f2      	b.n	8004698 <HAL_UART_Transmit+0xca>

080046b2 <HAL_UART_DMAStop>:
{
 80046b2:	b510      	push	{r4, lr}
 80046b4:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046b6:	6802      	ldr	r2, [r0, #0]
 80046b8:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b21      	cmp	r3, #33	; 0x21
 80046c2:	d008      	beq.n	80046d6 <HAL_UART_DMAStop+0x24>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046c8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b22      	cmp	r3, #34	; 0x22
 80046d0:	d015      	beq.n	80046fe <HAL_UART_DMAStop+0x4c>
}
 80046d2:	2000      	movs	r0, #0
 80046d4:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046da:	d0f3      	beq.n	80046c4 <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046dc:	6953      	ldr	r3, [r2, #20]
 80046de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e2:	6153      	str	r3, [r2, #20]
    if (huart->hdmatx != NULL)
 80046e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80046e6:	b108      	cbz	r0, 80046ec <HAL_UART_DMAStop+0x3a>
      HAL_DMA_Abort(huart->hdmatx);
 80046e8:	f7fe fb2e 	bl	8002d48 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	68d3      	ldr	r3, [r2, #12]
 80046f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046f4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80046f6:	2320      	movs	r3, #32
 80046f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80046fc:	e7e2      	b.n	80046c4 <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046fe:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004702:	d0e6      	beq.n	80046d2 <HAL_UART_DMAStop+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004704:	6953      	ldr	r3, [r2, #20]
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	6153      	str	r3, [r2, #20]
    if (huart->hdmarx != NULL)
 800470c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800470e:	b108      	cbz	r0, 8004714 <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 8004710:	f7fe fb1a 	bl	8002d48 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8004714:	4620      	mov	r0, r4
 8004716:	f7ff fe73 	bl	8004400 <UART_EndRxTransfer>
 800471a:	e7da      	b.n	80046d2 <HAL_UART_DMAStop+0x20>

0800471c <HAL_UART_TxCpltCallback>:
}
 800471c:	4770      	bx	lr

0800471e <HAL_UART_RxHalfCpltCallback>:
}
 800471e:	4770      	bx	lr

08004720 <HAL_UART_ErrorCallback>:
}
 8004720:	4770      	bx	lr

08004722 <UART_DMAError>:
{
 8004722:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004724:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800472a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b21      	cmp	r3, #33	; 0x21
 8004732:	d00e      	beq.n	8004752 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004738:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b22      	cmp	r3, #34	; 0x22
 8004740:	d014      	beq.n	800476c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004744:	f043 0310 	orr.w	r3, r3, #16
 8004748:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800474a:	4620      	mov	r0, r4
 800474c:	f7ff ffe8 	bl	8004720 <HAL_UART_ErrorCallback>
}
 8004750:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004752:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004756:	d0ed      	beq.n	8004734 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8004758:	2300      	movs	r3, #0
 800475a:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800475c:	68d3      	ldr	r3, [r2, #12]
 800475e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004762:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004764:	2320      	movs	r3, #32
 8004766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800476a:	e7e3      	b.n	8004734 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800476c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004770:	d0e7      	beq.n	8004742 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff fe42 	bl	8004400 <UART_EndRxTransfer>
 800477c:	e7e1      	b.n	8004742 <UART_DMAError+0x20>

0800477e <UART_DMAAbortOnError>:
{
 800477e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004780:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004786:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004788:	f7ff ffca 	bl	8004720 <HAL_UART_ErrorCallback>
}
 800478c:	bd08      	pop	{r3, pc}

0800478e <HAL_UARTEx_RxEventCallback>:
}
 800478e:	4770      	bx	lr

08004790 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004790:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b22      	cmp	r3, #34	; 0x22
 8004798:	d11e      	bne.n	80047d8 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800479a:	6883      	ldr	r3, [r0, #8]
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a0:	d006      	beq.n	80047b0 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a4:	b183      	cbz	r3, 80047c8 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047a6:	6803      	ldr	r3, [r0, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ae:	e01b      	b.n	80047e8 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	6903      	ldr	r3, [r0, #16]
 80047b2:	b9ab      	cbnz	r3, 80047e0 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b6:	6803      	ldr	r3, [r0, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80047c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047c2:	3302      	adds	r3, #2
 80047c4:	6283      	str	r3, [r0, #40]	; 0x28
 80047c6:	e013      	b.n	80047f0 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047c8:	6903      	ldr	r3, [r0, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1eb      	bne.n	80047a6 <UART_Receive_IT+0x16>
 80047ce:	e008      	b.n	80047e2 <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 80047d0:	f7fd ffb4 	bl	800273c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80047d4:	2000      	movs	r0, #0
 80047d6:	e03f      	b.n	8004858 <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 80047d8:	2002      	movs	r0, #2
 80047da:	4770      	bx	lr
    return HAL_OK;
 80047dc:	2000      	movs	r0, #0
}
 80047de:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047e2:	6803      	ldr	r3, [r0, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80047ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047ec:	3301      	adds	r3, #1
 80047ee:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80047f0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ef      	bne.n	80047dc <UART_Receive_IT+0x4c>
{
 80047fc:	b500      	push	{lr}
 80047fe:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004800:	6802      	ldr	r2, [r0, #0]
 8004802:	68d3      	ldr	r3, [r2, #12]
 8004804:	f023 0320 	bic.w	r3, r3, #32
 8004808:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800480a:	6802      	ldr	r2, [r0, #0]
 800480c:	68d3      	ldr	r3, [r2, #12]
 800480e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004812:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004814:	6802      	ldr	r2, [r0, #0]
 8004816:	6953      	ldr	r3, [r2, #20]
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800481e:	2320      	movs	r3, #32
 8004820:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004824:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004826:	2b01      	cmp	r3, #1
 8004828:	d1d2      	bne.n	80047d0 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482a:	2300      	movs	r3, #0
 800482c:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482e:	6802      	ldr	r2, [r0, #0]
 8004830:	68d3      	ldr	r3, [r2, #12]
 8004832:	f023 0310 	bic.w	r3, r3, #16
 8004836:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004838:	6803      	ldr	r3, [r0, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f012 0f10 	tst.w	r2, #16
 8004840:	d006      	beq.n	8004850 <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004842:	2200      	movs	r2, #0
 8004844:	9201      	str	r2, [sp, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	9201      	str	r2, [sp, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004850:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004852:	f7ff ff9c 	bl	800478e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004856:	2000      	movs	r0, #0
}
 8004858:	b003      	add	sp, #12
 800485a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004860 <HAL_UART_IRQHandler>:
{
 8004860:	b510      	push	{r4, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004866:	6802      	ldr	r2, [r0, #0]
 8004868:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800486a:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800486c:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800486e:	f013 0f0f 	tst.w	r3, #15
 8004872:	d109      	bne.n	8004888 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004874:	f013 0f20 	tst.w	r3, #32
 8004878:	d00d      	beq.n	8004896 <HAL_UART_IRQHandler+0x36>
 800487a:	f011 0f20 	tst.w	r1, #32
 800487e:	d00a      	beq.n	8004896 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff ff85 	bl	8004790 <UART_Receive_IT>
      return;
 8004886:	e017      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004888:	f000 0001 	and.w	r0, r0, #1
 800488c:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 8004890:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004894:	d112      	bne.n	80048bc <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004896:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004898:	2801      	cmp	r0, #1
 800489a:	d077      	beq.n	800498c <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800489c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048a0:	d003      	beq.n	80048aa <HAL_UART_IRQHandler+0x4a>
 80048a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80048a6:	f040 80d9 	bne.w	8004a5c <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048ae:	d003      	beq.n	80048b8 <HAL_UART_IRQHandler+0x58>
 80048b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80048b4:	f040 80ff 	bne.w	8004ab6 <HAL_UART_IRQHandler+0x256>
}
 80048b8:	b002      	add	sp, #8
 80048ba:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048bc:	f013 0f01 	tst.w	r3, #1
 80048c0:	d006      	beq.n	80048d0 <HAL_UART_IRQHandler+0x70>
 80048c2:	f411 7f80 	tst.w	r1, #256	; 0x100
 80048c6:	d003      	beq.n	80048d0 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d0:	f013 0f04 	tst.w	r3, #4
 80048d4:	d02f      	beq.n	8004936 <HAL_UART_IRQHandler+0xd6>
 80048d6:	b158      	cbz	r0, 80048f0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048da:	f042 0202 	orr.w	r2, r2, #2
 80048de:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048e0:	f013 0f02 	tst.w	r3, #2
 80048e4:	f000 80f2 	beq.w	8004acc <HAL_UART_IRQHandler+0x26c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048ea:	f042 0204 	orr.w	r2, r2, #4
 80048ee:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048f0:	f013 0f08 	tst.w	r3, #8
 80048f4:	d007      	beq.n	8004906 <HAL_UART_IRQHandler+0xa6>
 80048f6:	f001 0220 	and.w	r2, r1, #32
 80048fa:	4302      	orrs	r2, r0
 80048fc:	d003      	beq.n	8004906 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004900:	f042 0208 	orr.w	r2, r2, #8
 8004904:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004906:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004908:	2a00      	cmp	r2, #0
 800490a:	d0d5      	beq.n	80048b8 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490c:	f013 0f20 	tst.w	r3, #32
 8004910:	d002      	beq.n	8004918 <HAL_UART_IRQHandler+0xb8>
 8004912:	f011 0f20 	tst.w	r1, #32
 8004916:	d114      	bne.n	8004942 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800491c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800491e:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	4313      	orrs	r3, r2
 8004928:	d10f      	bne.n	800494a <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fef8 	bl	8004720 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004930:	2300      	movs	r3, #0
 8004932:	6423      	str	r3, [r4, #64]	; 0x40
 8004934:	e7c0      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004936:	f013 0f02 	tst.w	r3, #2
 800493a:	d0d9      	beq.n	80048f0 <HAL_UART_IRQHandler+0x90>
 800493c:	2800      	cmp	r0, #0
 800493e:	d0d7      	beq.n	80048f0 <HAL_UART_IRQHandler+0x90>
 8004940:	e7d2      	b.n	80048e8 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8004942:	4620      	mov	r0, r4
 8004944:	f7ff ff24 	bl	8004790 <UART_Receive_IT>
 8004948:	e7e6      	b.n	8004918 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 800494a:	4620      	mov	r0, r4
 800494c:	f7ff fd58 	bl	8004400 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004958:	d014      	beq.n	8004984 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004964:	b153      	cbz	r3, 800497c <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004966:	4a5c      	ldr	r2, [pc, #368]	; (8004ad8 <HAL_UART_IRQHandler+0x278>)
 8004968:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800496a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800496c:	f7fe fa11 	bl	8002d92 <HAL_DMA_Abort_IT>
 8004970:	2800      	cmp	r0, #0
 8004972:	d0a1      	beq.n	80048b8 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004974:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004976:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004978:	4798      	blx	r3
 800497a:	e79d      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 800497c:	4620      	mov	r0, r4
 800497e:	f7ff fecf 	bl	8004720 <HAL_UART_ErrorCallback>
 8004982:	e799      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004984:	4620      	mov	r0, r4
 8004986:	f7ff fecb 	bl	8004720 <HAL_UART_ErrorCallback>
 800498a:	e795      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800498c:	f013 0f10 	tst.w	r3, #16
 8004990:	d084      	beq.n	800489c <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004992:	f011 0f10 	tst.w	r1, #16
 8004996:	d081      	beq.n	800489c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004998:	2300      	movs	r3, #0
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	6853      	ldr	r3, [r2, #4]
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a6:	6953      	ldr	r3, [r2, #20]
 80049a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049ac:	d032      	beq.n	8004a14 <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049b0:	680b      	ldr	r3, [r1, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f43f af7e 	beq.w	80048b8 <HAL_UART_IRQHandler+0x58>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80049bc:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80049be:	4298      	cmp	r0, r3
 80049c0:	f67f af7a 	bls.w	80048b8 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 80049c4:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049c6:	698b      	ldr	r3, [r1, #24]
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d107      	bne.n	80049dc <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049cc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80049ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80049d0:	1ac9      	subs	r1, r1, r3
 80049d2:	b289      	uxth	r1, r1
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff feda 	bl	800478e <HAL_UARTEx_RxEventCallback>
 80049da:	e76d      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049dc:	68d3      	ldr	r3, [r2, #12]
 80049de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e2:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e4:	6822      	ldr	r2, [r4, #0]
 80049e6:	6953      	ldr	r3, [r2, #20]
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	6953      	ldr	r3, [r2, #20]
 80049f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f6:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80049f8:	2320      	movs	r3, #32
 80049fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	2300      	movs	r3, #0
 8004a00:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	6822      	ldr	r2, [r4, #0]
 8004a04:	68d3      	ldr	r3, [r2, #12]
 8004a06:	f023 0310 	bic.w	r3, r3, #16
 8004a0a:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a0e:	f7fe f99b 	bl	8002d48 <HAL_DMA_Abort>
 8004a12:	e7db      	b.n	80049cc <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a14:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004a16:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 8004a18:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f43f af4b 	beq.w	80048b8 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a22:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004a24:	1a59      	subs	r1, r3, r1
 8004a26:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	f43f af45 	beq.w	80048b8 <HAL_UART_IRQHandler+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2e:	68d3      	ldr	r3, [r2, #12]
 8004a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a34:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	6953      	ldr	r3, [r2, #20]
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004a40:	2320      	movs	r3, #32
 8004a42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a46:	2300      	movs	r3, #0
 8004a48:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	68d3      	ldr	r3, [r2, #12]
 8004a4e:	f023 0310 	bic.w	r3, r3, #16
 8004a52:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff fe9a 	bl	800478e <HAL_UARTEx_RxEventCallback>
 8004a5a:	e72d      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a5c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b21      	cmp	r3, #33	; 0x21
 8004a64:	f47f af28 	bne.w	80048b8 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a68:	68a3      	ldr	r3, [r4, #8]
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	d016      	beq.n	8004a9e <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a70:	6a23      	ldr	r3, [r4, #32]
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	6221      	str	r1, [r4, #32]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004a7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f47f af18 	bne.w	80048b8 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	68d3      	ldr	r3, [r2, #12]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a90:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	68d3      	ldr	r3, [r2, #12]
 8004a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9a:	60d3      	str	r3, [r2, #12]
 8004a9c:	e70c      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa4:	6a23      	ldr	r3, [r4, #32]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aac:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004aae:	6a23      	ldr	r3, [r4, #32]
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	6223      	str	r3, [r4, #32]
 8004ab4:	e7e1      	b.n	8004a7a <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ab6:	68d3      	ldr	r3, [r2, #12]
 8004ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004abc:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004abe:	2320      	movs	r3, #32
 8004ac0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7ff fe29 	bl	800471c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004aca:	e6f5      	b.n	80048b8 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004acc:	f013 0f08 	tst.w	r3, #8
 8004ad0:	f47f af15 	bne.w	80048fe <HAL_UART_IRQHandler+0x9e>
 8004ad4:	e717      	b.n	8004906 <HAL_UART_IRQHandler+0xa6>
 8004ad6:	bf00      	nop
 8004ad8:	0800477f 	.word	0x0800477f

08004adc <UART_DMARxHalfCplt>:
{
 8004adc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ade:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d002      	beq.n	8004aec <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ae6:	f7ff fe1a 	bl	800471e <HAL_UART_RxHalfCpltCallback>
}
 8004aea:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004aec:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004aee:	0849      	lsrs	r1, r1, #1
 8004af0:	f7ff fe4d 	bl	800478e <HAL_UARTEx_RxEventCallback>
 8004af4:	e7f9      	b.n	8004aea <UART_DMARxHalfCplt+0xe>

08004af6 <UART_DMAReceiveCplt>:
{
 8004af6:	b508      	push	{r3, lr}
 8004af8:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004afa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f013 0f20 	tst.w	r3, #32
 8004b04:	d116      	bne.n	8004b34 <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0a:	6802      	ldr	r2, [r0, #0]
 8004b0c:	68d3      	ldr	r3, [r2, #12]
 8004b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b12:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	6802      	ldr	r2, [r0, #0]
 8004b16:	6953      	ldr	r3, [r2, #20]
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	6802      	ldr	r2, [r0, #0]
 8004b20:	6953      	ldr	r3, [r2, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d005      	beq.n	8004b40 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d008      	beq.n	8004b4c <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 8004b3a:	f7fd fdff 	bl	800273c <HAL_UART_RxCpltCallback>
}
 8004b3e:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b40:	6802      	ldr	r2, [r0, #0]
 8004b42:	68d3      	ldr	r3, [r2, #12]
 8004b44:	f023 0310 	bic.w	r3, r3, #16
 8004b48:	60d3      	str	r3, [r2, #12]
 8004b4a:	e7f3      	b.n	8004b34 <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004b4e:	f7ff fe1e 	bl	800478e <HAL_UARTEx_RxEventCallback>
 8004b52:	e7f4      	b.n	8004b3e <UART_DMAReceiveCplt+0x48>

08004b54 <HAL_UART_GetError>:
  return huart->ErrorCode;
 8004b54:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8004b56:	4770      	bx	lr

08004b58 <UART_Start_Receive_DMA>:
{
 8004b58:	b530      	push	{r4, r5, lr}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004b60:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b62:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	2500      	movs	r5, #0
 8004b66:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b68:	2222      	movs	r2, #34	; 0x22
 8004b6a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b6e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004b70:	4814      	ldr	r0, [pc, #80]	; (8004bc4 <UART_Start_Receive_DMA+0x6c>)
 8004b72:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b76:	4814      	ldr	r0, [pc, #80]	; (8004bc8 <UART_Start_Receive_DMA+0x70>)
 8004b78:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b7c:	4813      	ldr	r0, [pc, #76]	; (8004bcc <UART_Start_Receive_DMA+0x74>)
 8004b7e:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 8004b80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b82:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	460a      	mov	r2, r1
 8004b88:	1d01      	adds	r1, r0, #4
 8004b8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b8c:	f7fe f88a 	bl	8002ca4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b90:	9501      	str	r5, [sp, #4]
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	9201      	str	r2, [sp, #4]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	9201      	str	r2, [sp, #4]
 8004b9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 8004b9e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba8:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	6953      	ldr	r3, [r2, #20]
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	6953      	ldr	r3, [r2, #20]
 8004bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bbc:	6153      	str	r3, [r2, #20]
}
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	b003      	add	sp, #12
 8004bc2:	bd30      	pop	{r4, r5, pc}
 8004bc4:	08004af7 	.word	0x08004af7
 8004bc8:	08004add 	.word	0x08004add
 8004bcc:	08004723 	.word	0x08004723

08004bd0 <HAL_UART_Receive_DMA>:
{
 8004bd0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d10d      	bne.n	8004bf8 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004bdc:	b171      	cbz	r1, 8004bfc <HAL_UART_Receive_DMA+0x2c>
 8004bde:	b17a      	cbz	r2, 8004c00 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 8004be0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d00d      	beq.n	8004c04 <HAL_UART_Receive_DMA+0x34>
 8004be8:	2301      	movs	r3, #1
 8004bea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004bf2:	f7ff ffb1 	bl	8004b58 <UART_Start_Receive_DMA>
 8004bf6:	e000      	b.n	8004bfa <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 8004bf8:	2002      	movs	r0, #2
}
 8004bfa:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	e7fc      	b.n	8004bfa <HAL_UART_Receive_DMA+0x2a>
 8004c00:	2001      	movs	r0, #1
 8004c02:	e7fa      	b.n	8004bfa <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 8004c04:	2002      	movs	r0, #2
 8004c06:	e7f8      	b.n	8004bfa <HAL_UART_Receive_DMA+0x2a>

08004c08 <__libc_init_array>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	4d0c      	ldr	r5, [pc, #48]	; (8004c40 <__libc_init_array+0x38>)
 8004c0e:	4c0d      	ldr	r4, [pc, #52]	; (8004c44 <__libc_init_array+0x3c>)
 8004c10:	1b64      	subs	r4, r4, r5
 8004c12:	10a4      	asrs	r4, r4, #2
 8004c14:	42a6      	cmp	r6, r4
 8004c16:	d109      	bne.n	8004c2c <__libc_init_array+0x24>
 8004c18:	f000 f822 	bl	8004c60 <_init>
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	4d0a      	ldr	r5, [pc, #40]	; (8004c48 <__libc_init_array+0x40>)
 8004c20:	4c0a      	ldr	r4, [pc, #40]	; (8004c4c <__libc_init_array+0x44>)
 8004c22:	1b64      	subs	r4, r4, r5
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	42a6      	cmp	r6, r4
 8004c28:	d105      	bne.n	8004c36 <__libc_init_array+0x2e>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c30:	4798      	blx	r3
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7ee      	b.n	8004c14 <__libc_init_array+0xc>
 8004c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3a:	4798      	blx	r3
 8004c3c:	3601      	adds	r6, #1
 8004c3e:	e7f2      	b.n	8004c26 <__libc_init_array+0x1e>
 8004c40:	08004dbc 	.word	0x08004dbc
 8004c44:	08004dbc 	.word	0x08004dbc
 8004c48:	08004dbc 	.word	0x08004dbc
 8004c4c:	08004dc0 	.word	0x08004dc0

08004c50 <memset>:
 8004c50:	4603      	mov	r3, r0
 8004c52:	4402      	add	r2, r0
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memset+0xa>
 8004c58:	4770      	bx	lr
 8004c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c5e:	e7f9      	b.n	8004c54 <memset+0x4>

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
